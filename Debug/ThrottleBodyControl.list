
ThrottleBodyControl.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003c5c  080001d8  080001d8  000011d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08003e34  08003e34  00004e34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003e44  08003e44  00005024  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08003e44  08003e44  00005024  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08003e44  08003e44  00005024  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003e44  08003e44  00004e44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003e48  08003e48  00004e48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000024  20000000  08003e4c  00005000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001cc  20000028  08003e70  00005028  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200001f4  08003e70  000051f4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00005024  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016422  00000000  00000000  00005054  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000280b  00000000  00000000  0001b476  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loclists 0000bf12  00000000  00000000  0001dc81  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000fc8  00000000  00000000  00029b98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000d88  00000000  00000000  0002ab60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001f96c  00000000  00000000  0002b8e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001620e  00000000  00000000  0004b254  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d5086  00000000  00000000  00061462  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  001364e8  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002ad8  00000000  00000000  0013652c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006f  00000000  00000000  00139004  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000028 	.word	0x20000028
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08003e1c 	.word	0x08003e1c

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	2000002c 	.word	0x2000002c
 8000214:	08003e1c 	.word	0x08003e1c

08000218 <__aeabi_drsub>:
 8000218:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 800021c:	e002      	b.n	8000224 <__adddf3>
 800021e:	bf00      	nop

08000220 <__aeabi_dsub>:
 8000220:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000224 <__adddf3>:
 8000224:	b530      	push	{r4, r5, lr}
 8000226:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800022a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800022e:	ea94 0f05 	teq	r4, r5
 8000232:	bf08      	it	eq
 8000234:	ea90 0f02 	teqeq	r0, r2
 8000238:	bf1f      	itttt	ne
 800023a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800023e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000242:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000246:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800024a:	f000 80e2 	beq.w	8000412 <__adddf3+0x1ee>
 800024e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000252:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000256:	bfb8      	it	lt
 8000258:	426d      	neglt	r5, r5
 800025a:	dd0c      	ble.n	8000276 <__adddf3+0x52>
 800025c:	442c      	add	r4, r5
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	ea82 0000 	eor.w	r0, r2, r0
 800026a:	ea83 0101 	eor.w	r1, r3, r1
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	2d36      	cmp	r5, #54	@ 0x36
 8000278:	bf88      	it	hi
 800027a:	bd30      	pophi	{r4, r5, pc}
 800027c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000280:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000284:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000288:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800028c:	d002      	beq.n	8000294 <__adddf3+0x70>
 800028e:	4240      	negs	r0, r0
 8000290:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000294:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000298:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800029c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a0:	d002      	beq.n	80002a8 <__adddf3+0x84>
 80002a2:	4252      	negs	r2, r2
 80002a4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a8:	ea94 0f05 	teq	r4, r5
 80002ac:	f000 80a7 	beq.w	80003fe <__adddf3+0x1da>
 80002b0:	f1a4 0401 	sub.w	r4, r4, #1
 80002b4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002b8:	db0d      	blt.n	80002d6 <__adddf3+0xb2>
 80002ba:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002be:	fa22 f205 	lsr.w	r2, r2, r5
 80002c2:	1880      	adds	r0, r0, r2
 80002c4:	f141 0100 	adc.w	r1, r1, #0
 80002c8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002cc:	1880      	adds	r0, r0, r2
 80002ce:	fa43 f305 	asr.w	r3, r3, r5
 80002d2:	4159      	adcs	r1, r3
 80002d4:	e00e      	b.n	80002f4 <__adddf3+0xd0>
 80002d6:	f1a5 0520 	sub.w	r5, r5, #32
 80002da:	f10e 0e20 	add.w	lr, lr, #32
 80002de:	2a01      	cmp	r2, #1
 80002e0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002e4:	bf28      	it	cs
 80002e6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ea:	fa43 f305 	asr.w	r3, r3, r5
 80002ee:	18c0      	adds	r0, r0, r3
 80002f0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002f4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002f8:	d507      	bpl.n	800030a <__adddf3+0xe6>
 80002fa:	f04f 0e00 	mov.w	lr, #0
 80002fe:	f1dc 0c00 	rsbs	ip, ip, #0
 8000302:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000306:	eb6e 0101 	sbc.w	r1, lr, r1
 800030a:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800030e:	d31b      	bcc.n	8000348 <__adddf3+0x124>
 8000310:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000314:	d30c      	bcc.n	8000330 <__adddf3+0x10c>
 8000316:	0849      	lsrs	r1, r1, #1
 8000318:	ea5f 0030 	movs.w	r0, r0, rrx
 800031c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000320:	f104 0401 	add.w	r4, r4, #1
 8000324:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000328:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 800032c:	f080 809a 	bcs.w	8000464 <__adddf3+0x240>
 8000330:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	ea41 0105 	orr.w	r1, r1, r5
 8000346:	bd30      	pop	{r4, r5, pc}
 8000348:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800034c:	4140      	adcs	r0, r0
 800034e:	eb41 0101 	adc.w	r1, r1, r1
 8000352:	3c01      	subs	r4, #1
 8000354:	bf28      	it	cs
 8000356:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800035a:	d2e9      	bcs.n	8000330 <__adddf3+0x10c>
 800035c:	f091 0f00 	teq	r1, #0
 8000360:	bf04      	itt	eq
 8000362:	4601      	moveq	r1, r0
 8000364:	2000      	moveq	r0, #0
 8000366:	fab1 f381 	clz	r3, r1
 800036a:	bf08      	it	eq
 800036c:	3320      	addeq	r3, #32
 800036e:	f1a3 030b 	sub.w	r3, r3, #11
 8000372:	f1b3 0220 	subs.w	r2, r3, #32
 8000376:	da0c      	bge.n	8000392 <__adddf3+0x16e>
 8000378:	320c      	adds	r2, #12
 800037a:	dd08      	ble.n	800038e <__adddf3+0x16a>
 800037c:	f102 0c14 	add.w	ip, r2, #20
 8000380:	f1c2 020c 	rsb	r2, r2, #12
 8000384:	fa01 f00c 	lsl.w	r0, r1, ip
 8000388:	fa21 f102 	lsr.w	r1, r1, r2
 800038c:	e00c      	b.n	80003a8 <__adddf3+0x184>
 800038e:	f102 0214 	add.w	r2, r2, #20
 8000392:	bfd8      	it	le
 8000394:	f1c2 0c20 	rsble	ip, r2, #32
 8000398:	fa01 f102 	lsl.w	r1, r1, r2
 800039c:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a0:	bfdc      	itt	le
 80003a2:	ea41 010c 	orrle.w	r1, r1, ip
 80003a6:	4090      	lslle	r0, r2
 80003a8:	1ae4      	subs	r4, r4, r3
 80003aa:	bfa2      	ittt	ge
 80003ac:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b0:	4329      	orrge	r1, r5
 80003b2:	bd30      	popge	{r4, r5, pc}
 80003b4:	ea6f 0404 	mvn.w	r4, r4
 80003b8:	3c1f      	subs	r4, #31
 80003ba:	da1c      	bge.n	80003f6 <__adddf3+0x1d2>
 80003bc:	340c      	adds	r4, #12
 80003be:	dc0e      	bgt.n	80003de <__adddf3+0x1ba>
 80003c0:	f104 0414 	add.w	r4, r4, #20
 80003c4:	f1c4 0220 	rsb	r2, r4, #32
 80003c8:	fa20 f004 	lsr.w	r0, r0, r4
 80003cc:	fa01 f302 	lsl.w	r3, r1, r2
 80003d0:	ea40 0003 	orr.w	r0, r0, r3
 80003d4:	fa21 f304 	lsr.w	r3, r1, r4
 80003d8:	ea45 0103 	orr.w	r1, r5, r3
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	f1c4 040c 	rsb	r4, r4, #12
 80003e2:	f1c4 0220 	rsb	r2, r4, #32
 80003e6:	fa20 f002 	lsr.w	r0, r0, r2
 80003ea:	fa01 f304 	lsl.w	r3, r1, r4
 80003ee:	ea40 0003 	orr.w	r0, r0, r3
 80003f2:	4629      	mov	r1, r5
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	fa21 f004 	lsr.w	r0, r1, r4
 80003fa:	4629      	mov	r1, r5
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f094 0f00 	teq	r4, #0
 8000402:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000406:	bf06      	itte	eq
 8000408:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 800040c:	3401      	addeq	r4, #1
 800040e:	3d01      	subne	r5, #1
 8000410:	e74e      	b.n	80002b0 <__adddf3+0x8c>
 8000412:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000416:	bf18      	it	ne
 8000418:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800041c:	d029      	beq.n	8000472 <__adddf3+0x24e>
 800041e:	ea94 0f05 	teq	r4, r5
 8000422:	bf08      	it	eq
 8000424:	ea90 0f02 	teqeq	r0, r2
 8000428:	d005      	beq.n	8000436 <__adddf3+0x212>
 800042a:	ea54 0c00 	orrs.w	ip, r4, r0
 800042e:	bf04      	itt	eq
 8000430:	4619      	moveq	r1, r3
 8000432:	4610      	moveq	r0, r2
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	ea91 0f03 	teq	r1, r3
 800043a:	bf1e      	ittt	ne
 800043c:	2100      	movne	r1, #0
 800043e:	2000      	movne	r0, #0
 8000440:	bd30      	popne	{r4, r5, pc}
 8000442:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000446:	d105      	bne.n	8000454 <__adddf3+0x230>
 8000448:	0040      	lsls	r0, r0, #1
 800044a:	4149      	adcs	r1, r1
 800044c:	bf28      	it	cs
 800044e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000452:	bd30      	pop	{r4, r5, pc}
 8000454:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000458:	bf3c      	itt	cc
 800045a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800045e:	bd30      	popcc	{r4, r5, pc}
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000468:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800046c:	f04f 0000 	mov.w	r0, #0
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000476:	bf1a      	itte	ne
 8000478:	4619      	movne	r1, r3
 800047a:	4610      	movne	r0, r2
 800047c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000480:	bf1c      	itt	ne
 8000482:	460b      	movne	r3, r1
 8000484:	4602      	movne	r2, r0
 8000486:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800048a:	bf06      	itte	eq
 800048c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000490:	ea91 0f03 	teqeq	r1, r3
 8000494:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	bf00      	nop

0800049c <__aeabi_ui2d>:
 800049c:	f090 0f00 	teq	r0, #0
 80004a0:	bf04      	itt	eq
 80004a2:	2100      	moveq	r1, #0
 80004a4:	4770      	bxeq	lr
 80004a6:	b530      	push	{r4, r5, lr}
 80004a8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004ac:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004b0:	f04f 0500 	mov.w	r5, #0
 80004b4:	f04f 0100 	mov.w	r1, #0
 80004b8:	e750      	b.n	800035c <__adddf3+0x138>
 80004ba:	bf00      	nop

080004bc <__aeabi_i2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004d0:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004d4:	bf48      	it	mi
 80004d6:	4240      	negmi	r0, r0
 80004d8:	f04f 0100 	mov.w	r1, #0
 80004dc:	e73e      	b.n	800035c <__adddf3+0x138>
 80004de:	bf00      	nop

080004e0 <__aeabi_f2d>:
 80004e0:	0042      	lsls	r2, r0, #1
 80004e2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004e6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ea:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ee:	bf1f      	itttt	ne
 80004f0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004f4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004f8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004fc:	4770      	bxne	lr
 80004fe:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000502:	bf08      	it	eq
 8000504:	4770      	bxeq	lr
 8000506:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800050a:	bf04      	itt	eq
 800050c:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000510:	4770      	bxeq	lr
 8000512:	b530      	push	{r4, r5, lr}
 8000514:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000520:	e71c      	b.n	800035c <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_ul2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f04f 0500 	mov.w	r5, #0
 8000532:	e00a      	b.n	800054a <__aeabi_l2d+0x16>

08000534 <__aeabi_l2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000542:	d502      	bpl.n	800054a <__aeabi_l2d+0x16>
 8000544:	4240      	negs	r0, r0
 8000546:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800054a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800054e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000552:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000556:	f43f aed8 	beq.w	800030a <__adddf3+0xe6>
 800055a:	f04f 0203 	mov.w	r2, #3
 800055e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000562:	bf18      	it	ne
 8000564:	3203      	addne	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000572:	f1c2 0320 	rsb	r3, r2, #32
 8000576:	fa00 fc03 	lsl.w	ip, r0, r3
 800057a:	fa20 f002 	lsr.w	r0, r0, r2
 800057e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000582:	ea40 000e 	orr.w	r0, r0, lr
 8000586:	fa21 f102 	lsr.w	r1, r1, r2
 800058a:	4414      	add	r4, r2
 800058c:	e6bd      	b.n	800030a <__adddf3+0xe6>
 800058e:	bf00      	nop

08000590 <__aeabi_dmul>:
 8000590:	b570      	push	{r4, r5, r6, lr}
 8000592:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000596:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800059a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800059e:	bf1d      	ittte	ne
 80005a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005a4:	ea94 0f0c 	teqne	r4, ip
 80005a8:	ea95 0f0c 	teqne	r5, ip
 80005ac:	f000 f8de 	bleq	800076c <__aeabi_dmul+0x1dc>
 80005b0:	442c      	add	r4, r5
 80005b2:	ea81 0603 	eor.w	r6, r1, r3
 80005b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005c2:	bf18      	it	ne
 80005c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005c8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005cc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005d0:	d038      	beq.n	8000644 <__aeabi_dmul+0xb4>
 80005d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005de:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005e6:	f04f 0600 	mov.w	r6, #0
 80005ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ee:	f09c 0f00 	teq	ip, #0
 80005f2:	bf18      	it	ne
 80005f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005f8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005fc:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000600:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000604:	d204      	bcs.n	8000610 <__aeabi_dmul+0x80>
 8000606:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800060a:	416d      	adcs	r5, r5
 800060c:	eb46 0606 	adc.w	r6, r6, r6
 8000610:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000614:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000618:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800061c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000620:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000624:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000628:	bf88      	it	hi
 800062a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800062e:	d81e      	bhi.n	800066e <__aeabi_dmul+0xde>
 8000630:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000634:	bf08      	it	eq
 8000636:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800063a:	f150 0000 	adcs.w	r0, r0, #0
 800063e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000642:	bd70      	pop	{r4, r5, r6, pc}
 8000644:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000648:	ea46 0101 	orr.w	r1, r6, r1
 800064c:	ea40 0002 	orr.w	r0, r0, r2
 8000650:	ea81 0103 	eor.w	r1, r1, r3
 8000654:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000658:	bfc2      	ittt	gt
 800065a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800065e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000662:	bd70      	popgt	{r4, r5, r6, pc}
 8000664:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000668:	f04f 0e00 	mov.w	lr, #0
 800066c:	3c01      	subs	r4, #1
 800066e:	f300 80ab 	bgt.w	80007c8 <__aeabi_dmul+0x238>
 8000672:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000676:	bfde      	ittt	le
 8000678:	2000      	movle	r0, #0
 800067a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800067e:	bd70      	pople	{r4, r5, r6, pc}
 8000680:	f1c4 0400 	rsb	r4, r4, #0
 8000684:	3c20      	subs	r4, #32
 8000686:	da35      	bge.n	80006f4 <__aeabi_dmul+0x164>
 8000688:	340c      	adds	r4, #12
 800068a:	dc1b      	bgt.n	80006c4 <__aeabi_dmul+0x134>
 800068c:	f104 0414 	add.w	r4, r4, #20
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f305 	lsl.w	r3, r0, r5
 8000698:	fa20 f004 	lsr.w	r0, r0, r4
 800069c:	fa01 f205 	lsl.w	r2, r1, r5
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b0:	fa21 f604 	lsr.w	r6, r1, r4
 80006b4:	eb42 0106 	adc.w	r1, r2, r6
 80006b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006bc:	bf08      	it	eq
 80006be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f1c4 040c 	rsb	r4, r4, #12
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f304 	lsl.w	r3, r0, r4
 80006d0:	fa20 f005 	lsr.w	r0, r0, r5
 80006d4:	fa01 f204 	lsl.w	r2, r1, r4
 80006d8:	ea40 0002 	orr.w	r0, r0, r2
 80006dc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e4:	f141 0100 	adc.w	r1, r1, #0
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f1c4 0520 	rsb	r5, r4, #32
 80006f8:	fa00 f205 	lsl.w	r2, r0, r5
 80006fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000700:	fa20 f304 	lsr.w	r3, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea43 0302 	orr.w	r3, r3, r2
 800070c:	fa21 f004 	lsr.w	r0, r1, r4
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	fa21 f204 	lsr.w	r2, r1, r4
 8000718:	ea20 0002 	bic.w	r0, r0, r2
 800071c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f094 0f00 	teq	r4, #0
 8000730:	d10f      	bne.n	8000752 <__aeabi_dmul+0x1c2>
 8000732:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000736:	0040      	lsls	r0, r0, #1
 8000738:	eb41 0101 	adc.w	r1, r1, r1
 800073c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000740:	bf08      	it	eq
 8000742:	3c01      	subeq	r4, #1
 8000744:	d0f7      	beq.n	8000736 <__aeabi_dmul+0x1a6>
 8000746:	ea41 0106 	orr.w	r1, r1, r6
 800074a:	f095 0f00 	teq	r5, #0
 800074e:	bf18      	it	ne
 8000750:	4770      	bxne	lr
 8000752:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000756:	0052      	lsls	r2, r2, #1
 8000758:	eb43 0303 	adc.w	r3, r3, r3
 800075c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000760:	bf08      	it	eq
 8000762:	3d01      	subeq	r5, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1c6>
 8000766:	ea43 0306 	orr.w	r3, r3, r6
 800076a:	4770      	bx	lr
 800076c:	ea94 0f0c 	teq	r4, ip
 8000770:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000774:	bf18      	it	ne
 8000776:	ea95 0f0c 	teqne	r5, ip
 800077a:	d00c      	beq.n	8000796 <__aeabi_dmul+0x206>
 800077c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000780:	bf18      	it	ne
 8000782:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000786:	d1d1      	bne.n	800072c <__aeabi_dmul+0x19c>
 8000788:	ea81 0103 	eor.w	r1, r1, r3
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000790:	f04f 0000 	mov.w	r0, #0
 8000794:	bd70      	pop	{r4, r5, r6, pc}
 8000796:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800079a:	bf06      	itte	eq
 800079c:	4610      	moveq	r0, r2
 800079e:	4619      	moveq	r1, r3
 80007a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a4:	d019      	beq.n	80007da <__aeabi_dmul+0x24a>
 80007a6:	ea94 0f0c 	teq	r4, ip
 80007aa:	d102      	bne.n	80007b2 <__aeabi_dmul+0x222>
 80007ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007b0:	d113      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007b2:	ea95 0f0c 	teq	r5, ip
 80007b6:	d105      	bne.n	80007c4 <__aeabi_dmul+0x234>
 80007b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007bc:	bf1c      	itt	ne
 80007be:	4610      	movne	r0, r2
 80007c0:	4619      	movne	r1, r3
 80007c2:	d10a      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007c4:	ea81 0103 	eor.w	r1, r1, r3
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007d4:	f04f 0000 	mov.w	r0, #0
 80007d8:	bd70      	pop	{r4, r5, r6, pc}
 80007da:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007de:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007e2:	bd70      	pop	{r4, r5, r6, pc}

080007e4 <__aeabi_ddiv>:
 80007e4:	b570      	push	{r4, r5, r6, lr}
 80007e6:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007ea:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007ee:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007f2:	bf1d      	ittte	ne
 80007f4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007f8:	ea94 0f0c 	teqne	r4, ip
 80007fc:	ea95 0f0c 	teqne	r5, ip
 8000800:	f000 f8a7 	bleq	8000952 <__aeabi_ddiv+0x16e>
 8000804:	eba4 0405 	sub.w	r4, r4, r5
 8000808:	ea81 0e03 	eor.w	lr, r1, r3
 800080c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000810:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000814:	f000 8088 	beq.w	8000928 <__aeabi_ddiv+0x144>
 8000818:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800081c:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000820:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000824:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000828:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800082c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000830:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000834:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000838:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 800083c:	429d      	cmp	r5, r3
 800083e:	bf08      	it	eq
 8000840:	4296      	cmpeq	r6, r2
 8000842:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8000846:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800084a:	d202      	bcs.n	8000852 <__aeabi_ddiv+0x6e>
 800084c:	085b      	lsrs	r3, r3, #1
 800084e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000852:	1ab6      	subs	r6, r6, r2
 8000854:	eb65 0503 	sbc.w	r5, r5, r3
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000862:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 000c 	orrcs.w	r0, r0, ip
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008c4:	d018      	beq.n	80008f8 <__aeabi_ddiv+0x114>
 80008c6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ca:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ce:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008d2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008d6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008da:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008de:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008e2:	d1c0      	bne.n	8000866 <__aeabi_ddiv+0x82>
 80008e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008e8:	d10b      	bne.n	8000902 <__aeabi_ddiv+0x11e>
 80008ea:	ea41 0100 	orr.w	r1, r1, r0
 80008ee:	f04f 0000 	mov.w	r0, #0
 80008f2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008f6:	e7b6      	b.n	8000866 <__aeabi_ddiv+0x82>
 80008f8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008fc:	bf04      	itt	eq
 80008fe:	4301      	orreq	r1, r0
 8000900:	2000      	moveq	r0, #0
 8000902:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000906:	bf88      	it	hi
 8000908:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800090c:	f63f aeaf 	bhi.w	800066e <__aeabi_dmul+0xde>
 8000910:	ebb5 0c03 	subs.w	ip, r5, r3
 8000914:	bf04      	itt	eq
 8000916:	ebb6 0c02 	subseq.w	ip, r6, r2
 800091a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800091e:	f150 0000 	adcs.w	r0, r0, #0
 8000922:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000926:	bd70      	pop	{r4, r5, r6, pc}
 8000928:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 800092c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000930:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000934:	bfc2      	ittt	gt
 8000936:	ebd4 050c 	rsbsgt	r5, r4, ip
 800093a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800093e:	bd70      	popgt	{r4, r5, r6, pc}
 8000940:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000944:	f04f 0e00 	mov.w	lr, #0
 8000948:	3c01      	subs	r4, #1
 800094a:	e690      	b.n	800066e <__aeabi_dmul+0xde>
 800094c:	ea45 0e06 	orr.w	lr, r5, r6
 8000950:	e68d      	b.n	800066e <__aeabi_dmul+0xde>
 8000952:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000956:	ea94 0f0c 	teq	r4, ip
 800095a:	bf08      	it	eq
 800095c:	ea95 0f0c 	teqeq	r5, ip
 8000960:	f43f af3b 	beq.w	80007da <__aeabi_dmul+0x24a>
 8000964:	ea94 0f0c 	teq	r4, ip
 8000968:	d10a      	bne.n	8000980 <__aeabi_ddiv+0x19c>
 800096a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800096e:	f47f af34 	bne.w	80007da <__aeabi_dmul+0x24a>
 8000972:	ea95 0f0c 	teq	r5, ip
 8000976:	f47f af25 	bne.w	80007c4 <__aeabi_dmul+0x234>
 800097a:	4610      	mov	r0, r2
 800097c:	4619      	mov	r1, r3
 800097e:	e72c      	b.n	80007da <__aeabi_dmul+0x24a>
 8000980:	ea95 0f0c 	teq	r5, ip
 8000984:	d106      	bne.n	8000994 <__aeabi_ddiv+0x1b0>
 8000986:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800098a:	f43f aefd 	beq.w	8000788 <__aeabi_dmul+0x1f8>
 800098e:	4610      	mov	r0, r2
 8000990:	4619      	mov	r1, r3
 8000992:	e722      	b.n	80007da <__aeabi_dmul+0x24a>
 8000994:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800099e:	f47f aec5 	bne.w	800072c <__aeabi_dmul+0x19c>
 80009a2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009a6:	f47f af0d 	bne.w	80007c4 <__aeabi_dmul+0x234>
 80009aa:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ae:	f47f aeeb 	bne.w	8000788 <__aeabi_dmul+0x1f8>
 80009b2:	e712      	b.n	80007da <__aeabi_dmul+0x24a>

080009b4 <__gedf2>:
 80009b4:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 80009b8:	e006      	b.n	80009c8 <__cmpdf2+0x4>
 80009ba:	bf00      	nop

080009bc <__ledf2>:
 80009bc:	f04f 0c01 	mov.w	ip, #1
 80009c0:	e002      	b.n	80009c8 <__cmpdf2+0x4>
 80009c2:	bf00      	nop

080009c4 <__cmpdf2>:
 80009c4:	f04f 0c01 	mov.w	ip, #1
 80009c8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009cc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009d0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009d8:	bf18      	it	ne
 80009da:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009de:	d01b      	beq.n	8000a18 <__cmpdf2+0x54>
 80009e0:	b001      	add	sp, #4
 80009e2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009e6:	bf0c      	ite	eq
 80009e8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ec:	ea91 0f03 	teqne	r1, r3
 80009f0:	bf02      	ittt	eq
 80009f2:	ea90 0f02 	teqeq	r0, r2
 80009f6:	2000      	moveq	r0, #0
 80009f8:	4770      	bxeq	lr
 80009fa:	f110 0f00 	cmn.w	r0, #0
 80009fe:	ea91 0f03 	teq	r1, r3
 8000a02:	bf58      	it	pl
 8000a04:	4299      	cmppl	r1, r3
 8000a06:	bf08      	it	eq
 8000a08:	4290      	cmpeq	r0, r2
 8000a0a:	bf2c      	ite	cs
 8000a0c:	17d8      	asrcs	r0, r3, #31
 8000a0e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a12:	f040 0001 	orr.w	r0, r0, #1
 8000a16:	4770      	bx	lr
 8000a18:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a1c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a20:	d102      	bne.n	8000a28 <__cmpdf2+0x64>
 8000a22:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a26:	d107      	bne.n	8000a38 <__cmpdf2+0x74>
 8000a28:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a2c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a30:	d1d6      	bne.n	80009e0 <__cmpdf2+0x1c>
 8000a32:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a36:	d0d3      	beq.n	80009e0 <__cmpdf2+0x1c>
 8000a38:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a3c:	4770      	bx	lr
 8000a3e:	bf00      	nop

08000a40 <__aeabi_cdrcmple>:
 8000a40:	4684      	mov	ip, r0
 8000a42:	4610      	mov	r0, r2
 8000a44:	4662      	mov	r2, ip
 8000a46:	468c      	mov	ip, r1
 8000a48:	4619      	mov	r1, r3
 8000a4a:	4663      	mov	r3, ip
 8000a4c:	e000      	b.n	8000a50 <__aeabi_cdcmpeq>
 8000a4e:	bf00      	nop

08000a50 <__aeabi_cdcmpeq>:
 8000a50:	b501      	push	{r0, lr}
 8000a52:	f7ff ffb7 	bl	80009c4 <__cmpdf2>
 8000a56:	2800      	cmp	r0, #0
 8000a58:	bf48      	it	mi
 8000a5a:	f110 0f00 	cmnmi.w	r0, #0
 8000a5e:	bd01      	pop	{r0, pc}

08000a60 <__aeabi_dcmpeq>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff fff4 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a68:	bf0c      	ite	eq
 8000a6a:	2001      	moveq	r0, #1
 8000a6c:	2000      	movne	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmplt>:
 8000a74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a78:	f7ff ffea 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a7c:	bf34      	ite	cc
 8000a7e:	2001      	movcc	r0, #1
 8000a80:	2000      	movcs	r0, #0
 8000a82:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a86:	bf00      	nop

08000a88 <__aeabi_dcmple>:
 8000a88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a8c:	f7ff ffe0 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a90:	bf94      	ite	ls
 8000a92:	2001      	movls	r0, #1
 8000a94:	2000      	movhi	r0, #0
 8000a96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9a:	bf00      	nop

08000a9c <__aeabi_dcmpge>:
 8000a9c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa0:	f7ff ffce 	bl	8000a40 <__aeabi_cdrcmple>
 8000aa4:	bf94      	ite	ls
 8000aa6:	2001      	movls	r0, #1
 8000aa8:	2000      	movhi	r0, #0
 8000aaa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aae:	bf00      	nop

08000ab0 <__aeabi_dcmpgt>:
 8000ab0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab4:	f7ff ffc4 	bl	8000a40 <__aeabi_cdrcmple>
 8000ab8:	bf34      	ite	cc
 8000aba:	2001      	movcc	r0, #1
 8000abc:	2000      	movcs	r0, #0
 8000abe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac2:	bf00      	nop

08000ac4 <__aeabi_d2f>:
 8000ac4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ac8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000acc:	bf24      	itt	cs
 8000ace:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000ad2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000ad6:	d90d      	bls.n	8000af4 <__aeabi_d2f+0x30>
 8000ad8:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000adc:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae4:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000ae8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000aec:	bf08      	it	eq
 8000aee:	f020 0001 	biceq.w	r0, r0, #1
 8000af2:	4770      	bx	lr
 8000af4:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000af8:	d121      	bne.n	8000b3e <__aeabi_d2f+0x7a>
 8000afa:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000afe:	bfbc      	itt	lt
 8000b00:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b04:	4770      	bxlt	lr
 8000b06:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b0a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b0e:	f1c2 0218 	rsb	r2, r2, #24
 8000b12:	f1c2 0c20 	rsb	ip, r2, #32
 8000b16:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1a:	fa20 f002 	lsr.w	r0, r0, r2
 8000b1e:	bf18      	it	ne
 8000b20:	f040 0001 	orrne.w	r0, r0, #1
 8000b24:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b28:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b2c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b30:	ea40 000c 	orr.w	r0, r0, ip
 8000b34:	fa23 f302 	lsr.w	r3, r3, r2
 8000b38:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b3c:	e7cc      	b.n	8000ad8 <__aeabi_d2f+0x14>
 8000b3e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b42:	d107      	bne.n	8000b54 <__aeabi_d2f+0x90>
 8000b44:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b48:	bf1e      	ittt	ne
 8000b4a:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b4e:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b52:	4770      	bxne	lr
 8000b54:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b58:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b5c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b60:	4770      	bx	lr
 8000b62:	bf00      	nop

08000b64 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b64:	b570      	push	{r4, r5, r6, lr}
 8000b66:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b68:	2400      	movs	r4, #0
 8000b6a:	9403      	str	r4, [sp, #12]
 8000b6c:	9404      	str	r4, [sp, #16]
 8000b6e:	9405      	str	r4, [sp, #20]
 8000b70:	9406      	str	r4, [sp, #24]
 8000b72:	9407      	str	r4, [sp, #28]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b74:	4b1e      	ldr	r3, [pc, #120]	@ (8000bf0 <MX_GPIO_Init+0x8c>)
 8000b76:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000b78:	f042 0201 	orr.w	r2, r2, #1
 8000b7c:	64da      	str	r2, [r3, #76]	@ 0x4c
 8000b7e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000b80:	f002 0201 	and.w	r2, r2, #1
 8000b84:	9201      	str	r2, [sp, #4]
 8000b86:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b88:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000b8a:	f042 0202 	orr.w	r2, r2, #2
 8000b8e:	64da      	str	r2, [r3, #76]	@ 0x4c
 8000b90:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b92:	f003 0302 	and.w	r3, r3, #2
 8000b96:	9302      	str	r3, [sp, #8]
 8000b98:	9b02      	ldr	r3, [sp, #8]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(IN_1_GPIO_Port, IN_1_Pin, GPIO_PIN_SET);
 8000b9a:	2201      	movs	r2, #1
 8000b9c:	2108      	movs	r1, #8
 8000b9e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000ba2:	f001 fe5b 	bl	800285c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(IN_2_GPIO_Port, IN_2_Pin, GPIO_PIN_RESET);
 8000ba6:	4622      	mov	r2, r4
 8000ba8:	2110      	movs	r1, #16
 8000baa:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000bae:	f001 fe55 	bl	800285c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000bb2:	4d10      	ldr	r5, [pc, #64]	@ (8000bf4 <MX_GPIO_Init+0x90>)
 8000bb4:	4622      	mov	r2, r4
 8000bb6:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000bba:	4628      	mov	r0, r5
 8000bbc:	f001 fe4e 	bl	800285c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : IN_1_Pin IN_2_Pin */
  GPIO_InitStruct.Pin = IN_1_Pin|IN_2_Pin;
 8000bc0:	2318      	movs	r3, #24
 8000bc2:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bc4:	2601      	movs	r6, #1
 8000bc6:	9604      	str	r6, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000bc8:	2302      	movs	r3, #2
 8000bca:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bcc:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bce:	a903      	add	r1, sp, #12
 8000bd0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000bd4:	f001 fd58 	bl	8002688 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000bd8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000bdc:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bde:	9604      	str	r6, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000be0:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000be2:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000be4:	a903      	add	r1, sp, #12
 8000be6:	4628      	mov	r0, r5
 8000be8:	f001 fd4e 	bl	8002688 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000bec:	b008      	add	sp, #32
 8000bee:	bd70      	pop	{r4, r5, r6, pc}
 8000bf0:	40021000 	.word	0x40021000
 8000bf4:	48000400 	.word	0x48000400

08000bf8 <MX_DMA_Init>:
{
 8000bf8:	b500      	push	{lr}
 8000bfa:	b083      	sub	sp, #12
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8000bfc:	4b0e      	ldr	r3, [pc, #56]	@ (8000c38 <MX_DMA_Init+0x40>)
 8000bfe:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8000c00:	f042 0204 	orr.w	r2, r2, #4
 8000c04:	649a      	str	r2, [r3, #72]	@ 0x48
 8000c06:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8000c08:	f002 0204 	and.w	r2, r2, #4
 8000c0c:	9200      	str	r2, [sp, #0]
 8000c0e:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000c10:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8000c12:	f042 0201 	orr.w	r2, r2, #1
 8000c16:	649a      	str	r2, [r3, #72]	@ 0x48
 8000c18:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000c1a:	f003 0301 	and.w	r3, r3, #1
 8000c1e:	9301      	str	r3, [sp, #4]
 8000c20:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000c22:	2200      	movs	r2, #0
 8000c24:	4611      	mov	r1, r2
 8000c26:	200b      	movs	r0, #11
 8000c28:	f001 fb96 	bl	8002358 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000c2c:	200b      	movs	r0, #11
 8000c2e:	f001 fba3 	bl	8002378 <HAL_NVIC_EnableIRQ>
}
 8000c32:	b003      	add	sp, #12
 8000c34:	f85d fb04 	ldr.w	pc, [sp], #4
 8000c38:	40021000 	.word	0x40021000

08000c3c <Error_Handler>:
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c3c:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c3e:	e7fe      	b.n	8000c3e <Error_Handler+0x2>

08000c40 <MX_ADC1_Init>:
{
 8000c40:	b510      	push	{r4, lr}
 8000c42:	b08c      	sub	sp, #48	@ 0x30
  ADC_MultiModeTypeDef multimode = {0};
 8000c44:	2400      	movs	r4, #0
 8000c46:	9409      	str	r4, [sp, #36]	@ 0x24
 8000c48:	940a      	str	r4, [sp, #40]	@ 0x28
 8000c4a:	940b      	str	r4, [sp, #44]	@ 0x2c
  ADC_ChannelConfTypeDef sConfig = {0};
 8000c4c:	2220      	movs	r2, #32
 8000c4e:	4621      	mov	r1, r4
 8000c50:	a801      	add	r0, sp, #4
 8000c52:	f003 f8b7 	bl	8003dc4 <memset>
  hadc1.Instance = ADC1;
 8000c56:	482f      	ldr	r0, [pc, #188]	@ (8000d14 <MX_ADC1_Init+0xd4>)
 8000c58:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8000c5c:	6003      	str	r3, [r0, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000c5e:	f44f 3340 	mov.w	r3, #196608	@ 0x30000
 8000c62:	6043      	str	r3, [r0, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_10B;
 8000c64:	2308      	movs	r3, #8
 8000c66:	6083      	str	r3, [r0, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000c68:	60c4      	str	r4, [r0, #12]
  hadc1.Init.GainCompensation = 0;
 8000c6a:	6104      	str	r4, [r0, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000c6c:	2301      	movs	r3, #1
 8000c6e:	6143      	str	r3, [r0, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000c70:	2204      	movs	r2, #4
 8000c72:	6182      	str	r2, [r0, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000c74:	7704      	strb	r4, [r0, #28]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000c76:	7743      	strb	r3, [r0, #29]
  hadc1.Init.NbrOfConversion = 3;
 8000c78:	2203      	movs	r2, #3
 8000c7a:	6202      	str	r2, [r0, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000c7c:	f880 4024 	strb.w	r4, [r0, #36]	@ 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000c80:	62c4      	str	r4, [r0, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000c82:	6304      	str	r4, [r0, #48]	@ 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000c84:	f880 3038 	strb.w	r3, [r0, #56]	@ 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000c88:	63c4      	str	r4, [r0, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8000c8a:	f880 4040 	strb.w	r4, [r0, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000c8e:	f000 fd5d 	bl	800174c <HAL_ADC_Init>
 8000c92:	2800      	cmp	r0, #0
 8000c94:	d131      	bne.n	8000cfa <MX_ADC1_Init+0xba>
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000c96:	2300      	movs	r3, #0
 8000c98:	9309      	str	r3, [sp, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000c9a:	a909      	add	r1, sp, #36	@ 0x24
 8000c9c:	481d      	ldr	r0, [pc, #116]	@ (8000d14 <MX_ADC1_Init+0xd4>)
 8000c9e:	f001 fa7b 	bl	8002198 <HAL_ADCEx_MultiModeConfigChannel>
 8000ca2:	2800      	cmp	r0, #0
 8000ca4:	d12b      	bne.n	8000cfe <MX_ADC1_Init+0xbe>
  sConfig.Channel = ADC_CHANNEL_1;
 8000ca6:	4b1c      	ldr	r3, [pc, #112]	@ (8000d18 <MX_ADC1_Init+0xd8>)
 8000ca8:	9301      	str	r3, [sp, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000caa:	2306      	movs	r3, #6
 8000cac:	9302      	str	r3, [sp, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_12CYCLES_5;
 8000cae:	2302      	movs	r3, #2
 8000cb0:	9303      	str	r3, [sp, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000cb2:	237f      	movs	r3, #127	@ 0x7f
 8000cb4:	9304      	str	r3, [sp, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000cb6:	2304      	movs	r3, #4
 8000cb8:	9305      	str	r3, [sp, #20]
  sConfig.Offset = 0;
 8000cba:	2300      	movs	r3, #0
 8000cbc:	9306      	str	r3, [sp, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000cbe:	a901      	add	r1, sp, #4
 8000cc0:	4814      	ldr	r0, [pc, #80]	@ (8000d14 <MX_ADC1_Init+0xd4>)
 8000cc2:	f000 feaf 	bl	8001a24 <HAL_ADC_ConfigChannel>
 8000cc6:	b9e0      	cbnz	r0, 8000d02 <MX_ADC1_Init+0xc2>
  sConfig.Channel = ADC_CHANNEL_2;
 8000cc8:	4b14      	ldr	r3, [pc, #80]	@ (8000d1c <MX_ADC1_Init+0xdc>)
 8000cca:	9301      	str	r3, [sp, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000ccc:	230c      	movs	r3, #12
 8000cce:	9302      	str	r3, [sp, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000cd0:	a901      	add	r1, sp, #4
 8000cd2:	4810      	ldr	r0, [pc, #64]	@ (8000d14 <MX_ADC1_Init+0xd4>)
 8000cd4:	f000 fea6 	bl	8001a24 <HAL_ADC_ConfigChannel>
 8000cd8:	b9a8      	cbnz	r0, 8000d06 <MX_ADC1_Init+0xc6>
  sConfig.Channel = ADC_CHANNEL_3;
 8000cda:	4b11      	ldr	r3, [pc, #68]	@ (8000d20 <MX_ADC1_Init+0xe0>)
 8000cdc:	9301      	str	r3, [sp, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8000cde:	2312      	movs	r3, #18
 8000ce0:	9302      	str	r3, [sp, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000ce2:	a901      	add	r1, sp, #4
 8000ce4:	480b      	ldr	r0, [pc, #44]	@ (8000d14 <MX_ADC1_Init+0xd4>)
 8000ce6:	f000 fe9d 	bl	8001a24 <HAL_ADC_ConfigChannel>
 8000cea:	b970      	cbnz	r0, 8000d0a <MX_ADC1_Init+0xca>
  if (HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED) != HAL_OK)
 8000cec:	217f      	movs	r1, #127	@ 0x7f
 8000cee:	4809      	ldr	r0, [pc, #36]	@ (8000d14 <MX_ADC1_Init+0xd4>)
 8000cf0:	f001 fa04 	bl	80020fc <HAL_ADCEx_Calibration_Start>
 8000cf4:	b958      	cbnz	r0, 8000d0e <MX_ADC1_Init+0xce>
}
 8000cf6:	b00c      	add	sp, #48	@ 0x30
 8000cf8:	bd10      	pop	{r4, pc}
    Error_Handler();
 8000cfa:	f7ff ff9f 	bl	8000c3c <Error_Handler>
    Error_Handler();
 8000cfe:	f7ff ff9d 	bl	8000c3c <Error_Handler>
    Error_Handler();
 8000d02:	f7ff ff9b 	bl	8000c3c <Error_Handler>
    Error_Handler();
 8000d06:	f7ff ff99 	bl	8000c3c <Error_Handler>
    Error_Handler();
 8000d0a:	f7ff ff97 	bl	8000c3c <Error_Handler>
  	  Error_Handler();
 8000d0e:	f7ff ff95 	bl	8000c3c <Error_Handler>
 8000d12:	bf00      	nop
 8000d14:	20000184 	.word	0x20000184
 8000d18:	04300002 	.word	0x04300002
 8000d1c:	08600004 	.word	0x08600004
 8000d20:	0c900008 	.word	0x0c900008

08000d24 <MX_TIM3_Init>:
{
 8000d24:	b500      	push	{lr}
 8000d26:	b08f      	sub	sp, #60	@ 0x3c
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d28:	2300      	movs	r3, #0
 8000d2a:	930a      	str	r3, [sp, #40]	@ 0x28
 8000d2c:	930b      	str	r3, [sp, #44]	@ 0x2c
 8000d2e:	930c      	str	r3, [sp, #48]	@ 0x30
 8000d30:	930d      	str	r3, [sp, #52]	@ 0x34
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d32:	9307      	str	r3, [sp, #28]
 8000d34:	9308      	str	r3, [sp, #32]
 8000d36:	9309      	str	r3, [sp, #36]	@ 0x24
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000d38:	9300      	str	r3, [sp, #0]
 8000d3a:	9301      	str	r3, [sp, #4]
 8000d3c:	9302      	str	r3, [sp, #8]
 8000d3e:	9303      	str	r3, [sp, #12]
 8000d40:	9304      	str	r3, [sp, #16]
 8000d42:	9305      	str	r3, [sp, #20]
 8000d44:	9306      	str	r3, [sp, #24]
  htim3.Instance = TIM3;
 8000d46:	481f      	ldr	r0, [pc, #124]	@ (8000dc4 <MX_TIM3_Init+0xa0>)
 8000d48:	4a1f      	ldr	r2, [pc, #124]	@ (8000dc8 <MX_TIM3_Init+0xa4>)
 8000d4a:	6002      	str	r2, [r0, #0]
  htim3.Init.Prescaler = 333-1;
 8000d4c:	f44f 72a6 	mov.w	r2, #332	@ 0x14c
 8000d50:	6042      	str	r2, [r0, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d52:	6083      	str	r3, [r0, #8]
  htim3.Init.Period = 1023;
 8000d54:	f240 32ff 	movw	r2, #1023	@ 0x3ff
 8000d58:	60c2      	str	r2, [r0, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d5a:	6103      	str	r3, [r0, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000d5c:	2380      	movs	r3, #128	@ 0x80
 8000d5e:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000d60:	f002 fd3a 	bl	80037d8 <HAL_TIM_Base_Init>
 8000d64:	bb20      	cbnz	r0, 8000db0 <MX_TIM3_Init+0x8c>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d66:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000d6a:	930a      	str	r3, [sp, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000d6c:	a90a      	add	r1, sp, #40	@ 0x28
 8000d6e:	4815      	ldr	r0, [pc, #84]	@ (8000dc4 <MX_TIM3_Init+0xa0>)
 8000d70:	f002 fe82 	bl	8003a78 <HAL_TIM_ConfigClockSource>
 8000d74:	b9f0      	cbnz	r0, 8000db4 <MX_TIM3_Init+0x90>
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000d76:	4813      	ldr	r0, [pc, #76]	@ (8000dc4 <MX_TIM3_Init+0xa0>)
 8000d78:	f002 fd5e 	bl	8003838 <HAL_TIM_PWM_Init>
 8000d7c:	b9e0      	cbnz	r0, 8000db8 <MX_TIM3_Init+0x94>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d7e:	2300      	movs	r3, #0
 8000d80:	9307      	str	r3, [sp, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d82:	9309      	str	r3, [sp, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000d84:	a907      	add	r1, sp, #28
 8000d86:	480f      	ldr	r0, [pc, #60]	@ (8000dc4 <MX_TIM3_Init+0xa0>)
 8000d88:	f002 ffd2 	bl	8003d30 <HAL_TIMEx_MasterConfigSynchronization>
 8000d8c:	b9b0      	cbnz	r0, 8000dbc <MX_TIM3_Init+0x98>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000d8e:	2360      	movs	r3, #96	@ 0x60
 8000d90:	9300      	str	r3, [sp, #0]
  sConfigOC.Pulse = 0;
 8000d92:	2200      	movs	r2, #0
 8000d94:	9201      	str	r2, [sp, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000d96:	9202      	str	r2, [sp, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000d98:	9204      	str	r2, [sp, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000d9a:	4669      	mov	r1, sp
 8000d9c:	4809      	ldr	r0, [pc, #36]	@ (8000dc4 <MX_TIM3_Init+0xa0>)
 8000d9e:	f002 fdc1 	bl	8003924 <HAL_TIM_PWM_ConfigChannel>
 8000da2:	b968      	cbnz	r0, 8000dc0 <MX_TIM3_Init+0x9c>
  HAL_TIM_MspPostInit(&htim3);
 8000da4:	4807      	ldr	r0, [pc, #28]	@ (8000dc4 <MX_TIM3_Init+0xa0>)
 8000da6:	f000 fbd5 	bl	8001554 <HAL_TIM_MspPostInit>
}
 8000daa:	b00f      	add	sp, #60	@ 0x3c
 8000dac:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8000db0:	f7ff ff44 	bl	8000c3c <Error_Handler>
    Error_Handler();
 8000db4:	f7ff ff42 	bl	8000c3c <Error_Handler>
    Error_Handler();
 8000db8:	f7ff ff40 	bl	8000c3c <Error_Handler>
    Error_Handler();
 8000dbc:	f7ff ff3e 	bl	8000c3c <Error_Handler>
    Error_Handler();
 8000dc0:	f7ff ff3c 	bl	8000c3c <Error_Handler>
 8000dc4:	200000d8 	.word	0x200000d8
 8000dc8:	40000400 	.word	0x40000400

08000dcc <SystemClock_Config>:
{
 8000dcc:	b500      	push	{lr}
 8000dce:	b095      	sub	sp, #84	@ 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000dd0:	2238      	movs	r2, #56	@ 0x38
 8000dd2:	2100      	movs	r1, #0
 8000dd4:	a806      	add	r0, sp, #24
 8000dd6:	f002 fff5 	bl	8003dc4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000dda:	2000      	movs	r0, #0
 8000ddc:	9001      	str	r0, [sp, #4]
 8000dde:	9002      	str	r0, [sp, #8]
 8000de0:	9003      	str	r0, [sp, #12]
 8000de2:	9004      	str	r0, [sp, #16]
 8000de4:	9005      	str	r0, [sp, #20]
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8000de6:	f001 fd3f 	bl	8002868 <HAL_PWREx_ControlVoltageScaling>
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000dea:	2302      	movs	r3, #2
 8000dec:	9306      	str	r3, [sp, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000dee:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000df2:	9209      	str	r2, [sp, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000df4:	2240      	movs	r2, #64	@ 0x40
 8000df6:	920a      	str	r2, [sp, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000df8:	930d      	str	r3, [sp, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000dfa:	930e      	str	r3, [sp, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8000dfc:	2204      	movs	r2, #4
 8000dfe:	920f      	str	r2, [sp, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8000e00:	2255      	movs	r2, #85	@ 0x55
 8000e02:	9210      	str	r2, [sp, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000e04:	9311      	str	r3, [sp, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000e06:	9312      	str	r3, [sp, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000e08:	9313      	str	r3, [sp, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e0a:	a806      	add	r0, sp, #24
 8000e0c:	f001 fde6 	bl	80029dc <HAL_RCC_OscConfig>
 8000e10:	b980      	cbnz	r0, 8000e34 <SystemClock_Config+0x68>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e12:	230f      	movs	r3, #15
 8000e14:	9301      	str	r3, [sp, #4]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e16:	2303      	movs	r3, #3
 8000e18:	9302      	str	r3, [sp, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000e1e:	9304      	str	r3, [sp, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000e20:	9305      	str	r3, [sp, #20]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000e22:	2104      	movs	r1, #4
 8000e24:	eb0d 0001 	add.w	r0, sp, r1
 8000e28:	f002 f88e 	bl	8002f48 <HAL_RCC_ClockConfig>
 8000e2c:	b920      	cbnz	r0, 8000e38 <SystemClock_Config+0x6c>
}
 8000e2e:	b015      	add	sp, #84	@ 0x54
 8000e30:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8000e34:	f7ff ff02 	bl	8000c3c <Error_Handler>
    Error_Handler();
 8000e38:	f7ff ff00 	bl	8000c3c <Error_Handler>
 8000e3c:	0000      	movs	r0, r0
	...

08000e40 <main>:
{
 8000e40:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000e42:	b083      	sub	sp, #12
  HAL_Init();
 8000e44:	f000 fc1e 	bl	8001684 <HAL_Init>
  SystemClock_Config();
 8000e48:	f7ff ffc0 	bl	8000dcc <SystemClock_Config>
  MX_GPIO_Init();
 8000e4c:	f7ff fe8a 	bl	8000b64 <MX_GPIO_Init>
  MX_DMA_Init();
 8000e50:	f7ff fed2 	bl	8000bf8 <MX_DMA_Init>
  MX_ADC1_Init();
 8000e54:	f7ff fef4 	bl	8000c40 <MX_ADC1_Init>
  MX_TIM3_Init();
 8000e58:	f7ff ff64 	bl	8000d24 <MX_TIM3_Init>
  if (HAL_ADC_Start_DMA(&hadc1, (uint32_t*) adc_convertions, 3) != HAL_OK)
 8000e5c:	2203      	movs	r2, #3
 8000e5e:	494c      	ldr	r1, [pc, #304]	@ (8000f90 <main+0x150>)
 8000e60:	484c      	ldr	r0, [pc, #304]	@ (8000f94 <main+0x154>)
 8000e62:	f001 f87d 	bl	8001f60 <HAL_ADC_Start_DMA>
 8000e66:	b108      	cbz	r0, 8000e6c <main+0x2c>
  	  Error_Handler();
 8000e68:	f7ff fee8 	bl	8000c3c <Error_Handler>
  htim3.Instance->CCR1 = 330;
 8000e6c:	484a      	ldr	r0, [pc, #296]	@ (8000f98 <main+0x158>)
 8000e6e:	6803      	ldr	r3, [r0, #0]
 8000e70:	f44f 72a5 	mov.w	r2, #330	@ 0x14a
 8000e74:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1) != HAL_OK)
 8000e76:	2100      	movs	r1, #0
 8000e78:	f002 feaa 	bl	8003bd0 <HAL_TIM_PWM_Start>
 8000e7c:	b108      	cbz	r0, 8000e82 <main+0x42>
	  Error_Handler();
 8000e7e:	f7ff fedd 	bl	8000c3c <Error_Handler>
  HAL_GPIO_WritePin(GPIOA, IN_1_Pin, GPIO_PIN_SET);
 8000e82:	2201      	movs	r2, #1
 8000e84:	2108      	movs	r1, #8
 8000e86:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000e8a:	f001 fce7 	bl	800285c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, IN_2_Pin, GPIO_PIN_RESET);
 8000e8e:	2200      	movs	r2, #0
 8000e90:	2110      	movs	r1, #16
 8000e92:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000e96:	f001 fce1 	bl	800285c <HAL_GPIO_WritePin>
  PID(&TPID, &tpsPercent, &PIDOut, &pedalPercent, p_gain, i_gain, d_gain, _PID_P_ON_M, _PID_CD_DIRECT);
 8000e9a:	4c40      	ldr	r4, [pc, #256]	@ (8000f9c <main+0x15c>)
 8000e9c:	2300      	movs	r3, #0
 8000e9e:	9301      	str	r3, [sp, #4]
 8000ea0:	9300      	str	r3, [sp, #0]
 8000ea2:	4b3f      	ldr	r3, [pc, #252]	@ (8000fa0 <main+0x160>)
 8000ea4:	ed93 2b00 	vldr	d2, [r3]
 8000ea8:	4b3e      	ldr	r3, [pc, #248]	@ (8000fa4 <main+0x164>)
 8000eaa:	ed93 1b00 	vldr	d1, [r3]
 8000eae:	4b3e      	ldr	r3, [pc, #248]	@ (8000fa8 <main+0x168>)
 8000eb0:	ed93 0b00 	vldr	d0, [r3]
 8000eb4:	4b3d      	ldr	r3, [pc, #244]	@ (8000fac <main+0x16c>)
 8000eb6:	4a3e      	ldr	r2, [pc, #248]	@ (8000fb0 <main+0x170>)
 8000eb8:	493e      	ldr	r1, [pc, #248]	@ (8000fb4 <main+0x174>)
 8000eba:	4620      	mov	r0, r4
 8000ebc:	f000 fa4c 	bl	8001358 <PID>
  PID_SetMode(&TPID, _PID_MODE_AUTOMATIC);
 8000ec0:	2101      	movs	r1, #1
 8000ec2:	4620      	mov	r0, r4
 8000ec4:	f000 f958 	bl	8001178 <PID_SetMode>
  PID_SetSampleTime(&TPID, 100);
 8000ec8:	2164      	movs	r1, #100	@ 0x64
 8000eca:	4620      	mov	r0, r4
 8000ecc:	f000 fa88 	bl	80013e0 <PID_SetSampleTime>
  PID_SetOutputLimits(&TPID, 1, 900);
 8000ed0:	ed9f 1b27 	vldr	d1, [pc, #156]	@ 8000f70 <main+0x130>
 8000ed4:	ed9f 0b28 	vldr	d0, [pc, #160]	@ 8000f78 <main+0x138>
 8000ed8:	4620      	mov	r0, r4
 8000eda:	f000 f95c 	bl	8001196 <PID_SetOutputLimits>
  uint32_t pwmValue = 0;
 8000ede:	e00d      	b.n	8000efc <main+0xbc>
		  tpsPercent = 0;
 8000ee0:	4b34      	ldr	r3, [pc, #208]	@ (8000fb4 <main+0x174>)
 8000ee2:	2000      	movs	r0, #0
 8000ee4:	2100      	movs	r1, #0
 8000ee6:	e9c3 0100 	strd	r0, r1, [r3]
	  PID_Compute(&TPID);
 8000eea:	482c      	ldr	r0, [pc, #176]	@ (8000f9c <main+0x15c>)
 8000eec:	f000 f894 	bl	8001018 <PID_Compute>
	  htim3.Instance->CCR1 = pedal_value;
 8000ef0:	4b29      	ldr	r3, [pc, #164]	@ (8000f98 <main+0x158>)
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	635d      	str	r5, [r3, #52]	@ 0x34
	  HAL_Delay(100);
 8000ef6:	2064      	movs	r0, #100	@ 0x64
 8000ef8:	f000 fbe6 	bl	80016c8 <HAL_Delay>
	  tps1_raw = adc_convertions[0];
 8000efc:	4b24      	ldr	r3, [pc, #144]	@ (8000f90 <main+0x150>)
	  pedal_value = adc_convertions[2];
 8000efe:	889d      	ldrh	r5, [r3, #4]
	  tps1_voltage = (3.3/1024.0 * tps1_raw);
 8000f00:	8818      	ldrh	r0, [r3, #0]
 8000f02:	f7ff fadb 	bl	80004bc <__aeabi_i2d>
 8000f06:	a31e      	add	r3, pc, #120	@ (adr r3, 8000f80 <main+0x140>)
 8000f08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f0c:	f7ff fb40 	bl	8000590 <__aeabi_dmul>
 8000f10:	f7ff fdd8 	bl	8000ac4 <__aeabi_d2f>
 8000f14:	4604      	mov	r4, r0
	  pedalPercent  = (pedal_value / 1024.0) * 100;	// das ist setPoint, da will ich hin
 8000f16:	4628      	mov	r0, r5
 8000f18:	f7ff fad0 	bl	80004bc <__aeabi_i2d>
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	4b26      	ldr	r3, [pc, #152]	@ (8000fb8 <main+0x178>)
 8000f20:	f7ff fb36 	bl	8000590 <__aeabi_dmul>
 8000f24:	2200      	movs	r2, #0
 8000f26:	4b25      	ldr	r3, [pc, #148]	@ (8000fbc <main+0x17c>)
 8000f28:	f7ff fb32 	bl	8000590 <__aeabi_dmul>
 8000f2c:	4b1f      	ldr	r3, [pc, #124]	@ (8000fac <main+0x16c>)
 8000f2e:	e9c3 0100 	strd	r0, r1, [r3]
	  tpsPercent = 0 + ((100-0)/(3.2-0.5))*(tps1_voltage - 0.5);
 8000f32:	4620      	mov	r0, r4
 8000f34:	f7ff fad4 	bl	80004e0 <__aeabi_f2d>
 8000f38:	2200      	movs	r2, #0
 8000f3a:	4b21      	ldr	r3, [pc, #132]	@ (8000fc0 <main+0x180>)
 8000f3c:	f7ff f970 	bl	8000220 <__aeabi_dsub>
 8000f40:	a311      	add	r3, pc, #68	@ (adr r3, 8000f88 <main+0x148>)
 8000f42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f46:	f7ff fb23 	bl	8000590 <__aeabi_dmul>
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	f7ff f969 	bl	8000224 <__adddf3>
 8000f52:	4606      	mov	r6, r0
 8000f54:	460f      	mov	r7, r1
 8000f56:	4b17      	ldr	r3, [pc, #92]	@ (8000fb4 <main+0x174>)
 8000f58:	e9c3 6700 	strd	r6, r7, [r3]
	  if (tpsPercent < 0)
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	2300      	movs	r3, #0
 8000f60:	f7ff fd88 	bl	8000a74 <__aeabi_dcmplt>
 8000f64:	2800      	cmp	r0, #0
 8000f66:	d1bb      	bne.n	8000ee0 <main+0xa0>
 8000f68:	e7bf      	b.n	8000eea <main+0xaa>
 8000f6a:	bf00      	nop
 8000f6c:	f3af 8000 	nop.w
 8000f70:	00000000 	.word	0x00000000
 8000f74:	408c2000 	.word	0x408c2000
 8000f78:	00000000 	.word	0x00000000
 8000f7c:	3ff00000 	.word	0x3ff00000
 8000f80:	66666666 	.word	0x66666666
 8000f84:	3f6a6666 	.word	0x3f6a6666
 8000f88:	a12f684c 	.word	0xa12f684c
 8000f8c:	404284bd 	.word	0x404284bd
 8000f90:	200000d0 	.word	0x200000d0
 8000f94:	20000184 	.word	0x20000184
 8000f98:	200000d8 	.word	0x200000d8
 8000f9c:	20000060 	.word	0x20000060
 8000fa0:	20000000 	.word	0x20000000
 8000fa4:	20000008 	.word	0x20000008
 8000fa8:	20000010 	.word	0x20000010
 8000fac:	20000048 	.word	0x20000048
 8000fb0:	20000058 	.word	0x20000058
 8000fb4:	20000050 	.word	0x20000050
 8000fb8:	3f500000 	.word	0x3f500000
 8000fbc:	40590000 	.word	0x40590000
 8000fc0:	3fe00000 	.word	0x3fe00000

08000fc4 <PID_Init>:
#include "pid.h"

/* ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ */
/* ~~~~~~~~~~~~~~~~~ Initialize ~~~~~~~~~~~~~~~~ */
void PID_Init(PID_TypeDef *uPID)
{
 8000fc4:	e92d 43d0 	stmdb	sp!, {r4, r6, r7, r8, r9, lr}
 8000fc8:	4604      	mov	r4, r0
	/* ~~~~~~~~~~ Set parameter ~~~~~~~~~~ */
	uPID->OutputSum = *uPID->MyOutput;
 8000fca:	6c43      	ldr	r3, [r0, #68]	@ 0x44
 8000fcc:	e9d3 6700 	ldrd	r6, r7, [r3]
 8000fd0:	e9c0 6714 	strd	r6, r7, [r0, #80]	@ 0x50
	uPID->LastInput = *uPID->MyInput;
 8000fd4:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 8000fd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fda:	e9c0 2316 	strd	r2, r3, [r0, #88]	@ 0x58
	
	if (uPID->OutputSum > uPID->OutMax)
 8000fde:	e9d0 891a 	ldrd	r8, r9, [r0, #104]	@ 0x68
 8000fe2:	4642      	mov	r2, r8
 8000fe4:	464b      	mov	r3, r9
 8000fe6:	4630      	mov	r0, r6
 8000fe8:	4639      	mov	r1, r7
 8000fea:	f7ff fd61 	bl	8000ab0 <__aeabi_dcmpgt>
 8000fee:	b118      	cbz	r0, 8000ff8 <PID_Init+0x34>
	{
		uPID->OutputSum = uPID->OutMax;
 8000ff0:	e9c4 8914 	strd	r8, r9, [r4, #80]	@ 0x50
	{
		uPID->OutputSum = uPID->OutMin;
	}
	else { }
	
}
 8000ff4:	e8bd 83d0 	ldmia.w	sp!, {r4, r6, r7, r8, r9, pc}
	else if (uPID->OutputSum < uPID->OutMin)
 8000ff8:	e9d4 8918 	ldrd	r8, r9, [r4, #96]	@ 0x60
 8000ffc:	4642      	mov	r2, r8
 8000ffe:	464b      	mov	r3, r9
 8001000:	4630      	mov	r0, r6
 8001002:	4639      	mov	r1, r7
 8001004:	f7ff fd36 	bl	8000a74 <__aeabi_dcmplt>
 8001008:	2800      	cmp	r0, #0
 800100a:	d0f3      	beq.n	8000ff4 <PID_Init+0x30>
		uPID->OutputSum = uPID->OutMin;
 800100c:	e9c4 8914 	strd	r8, r9, [r4, #80]	@ 0x50
}
 8001010:	e7f0      	b.n	8000ff4 <PID_Init+0x30>
 8001012:	0000      	movs	r0, r0
 8001014:	0000      	movs	r0, r0
	...

08001018 <PID_Compute>:
	PID(uPID, Input, Output, Setpoint, Kp, Ki, Kd, _PID_P_ON_E, ControllerDirection);
}

/* ~~~~~~~~~~~~~~~~~ Computing ~~~~~~~~~~~~~~~~~ */
uint8_t PID_Compute(PID_TypeDef *uPID)
{
 8001018:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800101c:	ed2d ab04 	vpush	{d10-d11}
 8001020:	b085      	sub	sp, #20
 8001022:	4604      	mov	r4, r0
	double error;
	double dInput;
	double output;
	
	/* ~~~~~~~~~~ Check PID mode ~~~~~~~~~~ */
	if (!uPID->InAuto)
 8001024:	7840      	ldrb	r0, [r0, #1]
 8001026:	b920      	cbnz	r0, 8001032 <PID_Compute+0x1a>
	else
	{
		return _FALSE;
	}
	
}
 8001028:	b005      	add	sp, #20
 800102a:	ecbd ab04 	vpop	{d10-d11}
 800102e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	now        = GetTime();
 8001032:	f000 fb43 	bl	80016bc <HAL_GetTick>
 8001036:	4605      	mov	r5, r0
	timeChange = (now - uPID->LastTime);
 8001038:	6863      	ldr	r3, [r4, #4]
 800103a:	1ac3      	subs	r3, r0, r3
	if (timeChange >= uPID->SampleTime)
 800103c:	68a2      	ldr	r2, [r4, #8]
 800103e:	429a      	cmp	r2, r3
 8001040:	f200 8094 	bhi.w	800116c <PID_Compute+0x154>
		input   = *uPID->MyInput;
 8001044:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8001046:	e9d3 8900 	ldrd	r8, r9, [r3]
		error   = *uPID->MySetpoint - input;
 800104a:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800104c:	4642      	mov	r2, r8
 800104e:	464b      	mov	r3, r9
 8001050:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001054:	f7ff f8e4 	bl	8000220 <__aeabi_dsub>
 8001058:	4606      	mov	r6, r0
 800105a:	460f      	mov	r7, r1
 800105c:	e9cd 6702 	strd	r6, r7, [sp, #8]
		dInput  = (input - uPID->LastInput);
 8001060:	e9d4 2316 	ldrd	r2, r3, [r4, #88]	@ 0x58
 8001064:	4640      	mov	r0, r8
 8001066:	4649      	mov	r1, r9
 8001068:	f7ff f8da 	bl	8000220 <__aeabi_dsub>
 800106c:	e9cd 0100 	strd	r0, r1, [sp]
		uPID->OutputSum     += (uPID->Ki * error);
 8001070:	e9d4 ab14 	ldrd	sl, fp, [r4, #80]	@ 0x50
 8001074:	4632      	mov	r2, r6
 8001076:	463b      	mov	r3, r7
 8001078:	e9d4 010c 	ldrd	r0, r1, [r4, #48]	@ 0x30
 800107c:	f7ff fa88 	bl	8000590 <__aeabi_dmul>
 8001080:	4602      	mov	r2, r0
 8001082:	460b      	mov	r3, r1
 8001084:	4650      	mov	r0, sl
 8001086:	4659      	mov	r1, fp
 8001088:	f7ff f8cc 	bl	8000224 <__adddf3>
 800108c:	4606      	mov	r6, r0
 800108e:	460f      	mov	r7, r1
 8001090:	e9c4 6714 	strd	r6, r7, [r4, #80]	@ 0x50
		if (!uPID->POnE)
 8001094:	f894 a000 	ldrb.w	sl, [r4]
 8001098:	f1ba 0f00 	cmp.w	sl, #0
 800109c:	d10d      	bne.n	80010ba <PID_Compute+0xa2>
			uPID->OutputSum -= uPID->Kp * dInput;
 800109e:	e9dd 2300 	ldrd	r2, r3, [sp]
 80010a2:	e9d4 010a 	ldrd	r0, r1, [r4, #40]	@ 0x28
 80010a6:	f7ff fa73 	bl	8000590 <__aeabi_dmul>
 80010aa:	4602      	mov	r2, r0
 80010ac:	460b      	mov	r3, r1
 80010ae:	4630      	mov	r0, r6
 80010b0:	4639      	mov	r1, r7
 80010b2:	f7ff f8b5 	bl	8000220 <__aeabi_dsub>
 80010b6:	e9c4 0114 	strd	r0, r1, [r4, #80]	@ 0x50
		if (uPID->OutputSum > uPID->OutMax)
 80010ba:	ed94 ab14 	vldr	d10, [r4, #80]	@ 0x50
 80010be:	e9d4 671a 	ldrd	r6, r7, [r4, #104]	@ 0x68
 80010c2:	4632      	mov	r2, r6
 80010c4:	463b      	mov	r3, r7
 80010c6:	ec51 0b1a 	vmov	r0, r1, d10
 80010ca:	f7ff fcf1 	bl	8000ab0 <__aeabi_dcmpgt>
 80010ce:	2800      	cmp	r0, #0
 80010d0:	d03a      	beq.n	8001148 <PID_Compute+0x130>
			uPID->OutputSum = uPID->OutMax;
 80010d2:	e9c4 6714 	strd	r6, r7, [r4, #80]	@ 0x50
		if (uPID->POnE)
 80010d6:	f1ba 0f00 	cmp.w	sl, #0
 80010da:	d042      	beq.n	8001162 <PID_Compute+0x14a>
			output = uPID->Kp * error;
 80010dc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80010e0:	e9d4 010a 	ldrd	r0, r1, [r4, #40]	@ 0x28
 80010e4:	f7ff fa54 	bl	8000590 <__aeabi_dmul>
 80010e8:	e9cd 0102 	strd	r0, r1, [sp, #8]
		output += uPID->OutputSum - uPID->Kd * dInput;
 80010ec:	e9d4 ab14 	ldrd	sl, fp, [r4, #80]	@ 0x50
 80010f0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80010f4:	e9d4 010e 	ldrd	r0, r1, [r4, #56]	@ 0x38
 80010f8:	f7ff fa4a 	bl	8000590 <__aeabi_dmul>
 80010fc:	4602      	mov	r2, r0
 80010fe:	460b      	mov	r3, r1
 8001100:	4650      	mov	r0, sl
 8001102:	4659      	mov	r1, fp
 8001104:	f7ff f88c 	bl	8000220 <__aeabi_dsub>
 8001108:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800110c:	f7ff f88a 	bl	8000224 <__adddf3>
 8001110:	4682      	mov	sl, r0
 8001112:	468b      	mov	fp, r1
		if (output > uPID->OutMax)
 8001114:	4602      	mov	r2, r0
 8001116:	460b      	mov	r3, r1
 8001118:	4630      	mov	r0, r6
 800111a:	4639      	mov	r1, r7
 800111c:	f7ff fcaa 	bl	8000a74 <__aeabi_dcmplt>
 8001120:	b950      	cbnz	r0, 8001138 <PID_Compute+0x120>
		else if (output < uPID->OutMin)
 8001122:	e9d4 6718 	ldrd	r6, r7, [r4, #96]	@ 0x60
 8001126:	4652      	mov	r2, sl
 8001128:	465b      	mov	r3, fp
 800112a:	4630      	mov	r0, r6
 800112c:	4639      	mov	r1, r7
 800112e:	f7ff fcbf 	bl	8000ab0 <__aeabi_dcmpgt>
 8001132:	b908      	cbnz	r0, 8001138 <PID_Compute+0x120>
		output += uPID->OutputSum - uPID->Kd * dInput;
 8001134:	4656      	mov	r6, sl
 8001136:	465f      	mov	r7, fp
		*uPID->MyOutput = output;
 8001138:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 800113a:	e9c3 6700 	strd	r6, r7, [r3]
		uPID->LastInput = input;
 800113e:	e9c4 8916 	strd	r8, r9, [r4, #88]	@ 0x58
		uPID->LastTime = now;
 8001142:	6065      	str	r5, [r4, #4]
		return _TRUE;
 8001144:	2001      	movs	r0, #1
 8001146:	e76f      	b.n	8001028 <PID_Compute+0x10>
		else if (uPID->OutputSum < uPID->OutMin)
 8001148:	ed94 bb18 	vldr	d11, [r4, #96]	@ 0x60
 800114c:	ec53 2b1b 	vmov	r2, r3, d11
 8001150:	ec51 0b1a 	vmov	r0, r1, d10
 8001154:	f7ff fc8e 	bl	8000a74 <__aeabi_dcmplt>
 8001158:	2800      	cmp	r0, #0
 800115a:	d0bc      	beq.n	80010d6 <PID_Compute+0xbe>
			uPID->OutputSum = uPID->OutMin;
 800115c:	ed84 bb14 	vstr	d11, [r4, #80]	@ 0x50
 8001160:	e7b9      	b.n	80010d6 <PID_Compute+0xbe>
			output = 0;
 8001162:	ed9f 7b03 	vldr	d7, [pc, #12]	@ 8001170 <PID_Compute+0x158>
 8001166:	ed8d 7b02 	vstr	d7, [sp, #8]
 800116a:	e7bf      	b.n	80010ec <PID_Compute+0xd4>
		return _FALSE;
 800116c:	2000      	movs	r0, #0
 800116e:	e75b      	b.n	8001028 <PID_Compute+0x10>
	...

08001178 <PID_SetMode>:

/* ~~~~~~~~~~~~~~~~~ PID Mode ~~~~~~~~~~~~~~~~~~ */
void            PID_SetMode(PID_TypeDef *uPID, PIDMode_TypeDef Mode)
{
 8001178:	b538      	push	{r3, r4, r5, lr}
 800117a:	4604      	mov	r4, r0
	
	uint8_t newAuto = (Mode == _PID_MODE_AUTOMATIC);
 800117c:	2901      	cmp	r1, #1
 800117e:	bf0c      	ite	eq
 8001180:	2501      	moveq	r5, #1
 8001182:	2500      	movne	r5, #0
	
	/* ~~~~~~~~~~ Initialize the PID ~~~~~~~~~~ */
	if (newAuto && !uPID->InAuto)
 8001184:	d001      	beq.n	800118a <PID_SetMode+0x12>
	{
		PID_Init(uPID);
	}
	
	uPID->InAuto = (PIDMode_TypeDef)newAuto;
 8001186:	7065      	strb	r5, [r4, #1]
	
}
 8001188:	bd38      	pop	{r3, r4, r5, pc}
	if (newAuto && !uPID->InAuto)
 800118a:	7843      	ldrb	r3, [r0, #1]
 800118c:	2b00      	cmp	r3, #0
 800118e:	d1fa      	bne.n	8001186 <PID_SetMode+0xe>
		PID_Init(uPID);
 8001190:	f7ff ff18 	bl	8000fc4 <PID_Init>
 8001194:	e7f7      	b.n	8001186 <PID_SetMode+0xe>

08001196 <PID_SetOutputLimits>:
	return uPID->InAuto ? _PID_MODE_AUTOMATIC : _PID_MODE_MANUAL;
}

/* ~~~~~~~~~~~~~~~~ PID Limits ~~~~~~~~~~~~~~~~~ */
void PID_SetOutputLimits(PID_TypeDef *uPID, double Min, double Max)
{
 8001196:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800119a:	4604      	mov	r4, r0
 800119c:	ec59 8b10 	vmov	r8, r9, d0
 80011a0:	ec57 6b11 	vmov	r6, r7, d1
	/* ~~~~~~~~~~ Check value ~~~~~~~~~~ */
	if (Min >= Max)
 80011a4:	4632      	mov	r2, r6
 80011a6:	463b      	mov	r3, r7
 80011a8:	4640      	mov	r0, r8
 80011aa:	4649      	mov	r1, r9
 80011ac:	f7ff fc76 	bl	8000a9c <__aeabi_dcmpge>
 80011b0:	b9f0      	cbnz	r0, 80011f0 <PID_SetOutputLimits+0x5a>
	{
		return;
	}
	
	uPID->OutMin = Min;
 80011b2:	e9c4 8918 	strd	r8, r9, [r4, #96]	@ 0x60
	uPID->OutMax = Max;
 80011b6:	e9c4 671a 	strd	r6, r7, [r4, #104]	@ 0x68
	
	/* ~~~~~~~~~~ Check PID Mode ~~~~~~~~~~ */
	if (uPID->InAuto)
 80011ba:	7863      	ldrb	r3, [r4, #1]
 80011bc:	b1c3      	cbz	r3, 80011f0 <PID_SetOutputLimits+0x5a>
	{
		
		/* ..... Check out value ..... */
		if (*uPID->MyOutput > uPID->OutMax)
 80011be:	6c65      	ldr	r5, [r4, #68]	@ 0x44
 80011c0:	e9d5 ab00 	ldrd	sl, fp, [r5]
 80011c4:	4632      	mov	r2, r6
 80011c6:	463b      	mov	r3, r7
 80011c8:	4650      	mov	r0, sl
 80011ca:	4659      	mov	r1, fp
 80011cc:	f7ff fc70 	bl	8000ab0 <__aeabi_dcmpgt>
 80011d0:	b180      	cbz	r0, 80011f4 <PID_SetOutputLimits+0x5e>
		{
			*uPID->MyOutput = uPID->OutMax;
 80011d2:	e9c5 6700 	strd	r6, r7, [r5]
			*uPID->MyOutput = uPID->OutMin;
		}
		else { }
		
		/* ..... Check out value ..... */
		if (uPID->OutputSum > uPID->OutMax)
 80011d6:	e9d4 6714 	ldrd	r6, r7, [r4, #80]	@ 0x50
 80011da:	e9d4 891a 	ldrd	r8, r9, [r4, #104]	@ 0x68
 80011de:	4642      	mov	r2, r8
 80011e0:	464b      	mov	r3, r9
 80011e2:	4630      	mov	r0, r6
 80011e4:	4639      	mov	r1, r7
 80011e6:	f7ff fc63 	bl	8000ab0 <__aeabi_dcmpgt>
 80011ea:	b170      	cbz	r0, 800120a <PID_SetOutputLimits+0x74>
		{
			uPID->OutputSum = uPID->OutMax;
 80011ec:	e9c4 8914 	strd	r8, r9, [r4, #80]	@ 0x50
		}
		else { }
		
	}
	
}
 80011f0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		else if (*uPID->MyOutput < uPID->OutMin)
 80011f4:	4642      	mov	r2, r8
 80011f6:	464b      	mov	r3, r9
 80011f8:	4650      	mov	r0, sl
 80011fa:	4659      	mov	r1, fp
 80011fc:	f7ff fc3a 	bl	8000a74 <__aeabi_dcmplt>
 8001200:	2800      	cmp	r0, #0
 8001202:	d0e8      	beq.n	80011d6 <PID_SetOutputLimits+0x40>
			*uPID->MyOutput = uPID->OutMin;
 8001204:	e9c5 8900 	strd	r8, r9, [r5]
 8001208:	e7e5      	b.n	80011d6 <PID_SetOutputLimits+0x40>
		else if (uPID->OutputSum < uPID->OutMin)
 800120a:	e9d4 8918 	ldrd	r8, r9, [r4, #96]	@ 0x60
 800120e:	4642      	mov	r2, r8
 8001210:	464b      	mov	r3, r9
 8001212:	4630      	mov	r0, r6
 8001214:	4639      	mov	r1, r7
 8001216:	f7ff fc2d 	bl	8000a74 <__aeabi_dcmplt>
 800121a:	2800      	cmp	r0, #0
 800121c:	d0e8      	beq.n	80011f0 <PID_SetOutputLimits+0x5a>
			uPID->OutputSum = uPID->OutMin;
 800121e:	e9c4 8914 	strd	r8, r9, [r4, #80]	@ 0x50
		else { }
 8001222:	e7e5      	b.n	80011f0 <PID_SetOutputLimits+0x5a>

08001224 <PID_SetTunings2>:
void PID_SetTunings(PID_TypeDef *uPID, double Kp, double Ki, double Kd)
{
	PID_SetTunings2(uPID, Kp, Ki, Kd, uPID->POn);
}
void PID_SetTunings2(PID_TypeDef *uPID, double Kp, double Ki, double Kd, PIDPON_TypeDef POn)
{
 8001224:	e92d 4fd0 	stmdb	sp!, {r4, r6, r7, r8, r9, sl, fp, lr}
 8001228:	ed2d 8b04 	vpush	{d8-d9}
 800122c:	4604      	mov	r4, r0
 800122e:	ec5b ab10 	vmov	sl, fp, d0
 8001232:	ec57 6b11 	vmov	r6, r7, d1
 8001236:	eeb0 8a42 	vmov.f32	s16, s4
 800123a:	eef0 8a62 	vmov.f32	s17, s5
 800123e:	4688      	mov	r8, r1
	
	double SampleTimeInSec;
	
	/* ~~~~~~~~~~ Check value ~~~~~~~~~~ */
	if (Kp < 0 || Ki < 0 || Kd < 0)
 8001240:	2200      	movs	r2, #0
 8001242:	2300      	movs	r3, #0
 8001244:	4650      	mov	r0, sl
 8001246:	4659      	mov	r1, fp
 8001248:	f7ff fc14 	bl	8000a74 <__aeabi_dcmplt>
 800124c:	2800      	cmp	r0, #0
 800124e:	d142      	bne.n	80012d6 <PID_SetTunings2+0xb2>
 8001250:	2200      	movs	r2, #0
 8001252:	2300      	movs	r3, #0
 8001254:	4630      	mov	r0, r6
 8001256:	4639      	mov	r1, r7
 8001258:	f7ff fc0c 	bl	8000a74 <__aeabi_dcmplt>
 800125c:	2800      	cmp	r0, #0
 800125e:	d13a      	bne.n	80012d6 <PID_SetTunings2+0xb2>
 8001260:	2200      	movs	r2, #0
 8001262:	2300      	movs	r3, #0
 8001264:	ec51 0b18 	vmov	r0, r1, d8
 8001268:	f7ff fc04 	bl	8000a74 <__aeabi_dcmplt>
 800126c:	2800      	cmp	r0, #0
 800126e:	d132      	bne.n	80012d6 <PID_SetTunings2+0xb2>
	{
		return;
	}
	
	/* ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ */
	uPID->POn    = POn;
 8001270:	f884 8002 	strb.w	r8, [r4, #2]
	uPID->POnE   = (PIDPON_TypeDef)(POn == _PID_P_ON_E);
 8001274:	f1b8 0f01 	cmp.w	r8, #1
 8001278:	bf14      	ite	ne
 800127a:	f04f 0800 	movne.w	r8, #0
 800127e:	f04f 0801 	moveq.w	r8, #1
 8001282:	f884 8000 	strb.w	r8, [r4]

	uPID->DispKp = Kp;
 8001286:	e9c4 ab04 	strd	sl, fp, [r4, #16]
	uPID->DispKi = Ki;
 800128a:	e9c4 6706 	strd	r6, r7, [r4, #24]
	uPID->DispKd = Kd;
 800128e:	ed84 8b08 	vstr	d8, [r4, #32]
	
	/* ~~~~~~~~~ Calculate time ~~~~~~~~ */
	SampleTimeInSec = ((double)uPID->SampleTime) / 1000;
 8001292:	68a0      	ldr	r0, [r4, #8]
 8001294:	f7ff f902 	bl	800049c <__aeabi_ui2d>
 8001298:	2200      	movs	r2, #0
 800129a:	4b1d      	ldr	r3, [pc, #116]	@ (8001310 <PID_SetTunings2+0xec>)
 800129c:	f7ff faa2 	bl	80007e4 <__aeabi_ddiv>
 80012a0:	4680      	mov	r8, r0
 80012a2:	4689      	mov	r9, r1
	
	uPID->Kp = Kp;
 80012a4:	e9c4 ab0a 	strd	sl, fp, [r4, #40]	@ 0x28
	uPID->Ki = Ki * SampleTimeInSec;
 80012a8:	4602      	mov	r2, r0
 80012aa:	460b      	mov	r3, r1
 80012ac:	4630      	mov	r0, r6
 80012ae:	4639      	mov	r1, r7
 80012b0:	f7ff f96e 	bl	8000590 <__aeabi_dmul>
 80012b4:	ec41 0b19 	vmov	d9, r0, r1
 80012b8:	e9c4 010c 	strd	r0, r1, [r4, #48]	@ 0x30
	uPID->Kd = Kd / SampleTimeInSec;
 80012bc:	4642      	mov	r2, r8
 80012be:	464b      	mov	r3, r9
 80012c0:	ec51 0b18 	vmov	r0, r1, d8
 80012c4:	f7ff fa8e 	bl	80007e4 <__aeabi_ddiv>
 80012c8:	4606      	mov	r6, r0
 80012ca:	460f      	mov	r7, r1
 80012cc:	e9c4 670e 	strd	r6, r7, [r4, #56]	@ 0x38
	
	/* ~~~~~~~~ Check direction ~~~~~~~~ */
	if (uPID->ControllerDirection == _PID_CD_REVERSE)
 80012d0:	78e3      	ldrb	r3, [r4, #3]
 80012d2:	2b01      	cmp	r3, #1
 80012d4:	d003      	beq.n	80012de <PID_SetTunings2+0xba>
		uPID->Ki = (0 - uPID->Ki);
		uPID->Kd = (0 - uPID->Kd);
		
	}
	
}
 80012d6:	ecbd 8b04 	vpop	{d8-d9}
 80012da:	e8bd 8fd0 	ldmia.w	sp!, {r4, r6, r7, r8, r9, sl, fp, pc}
		uPID->Kp = (0 - uPID->Kp);
 80012de:	4652      	mov	r2, sl
 80012e0:	465b      	mov	r3, fp
 80012e2:	2000      	movs	r0, #0
 80012e4:	2100      	movs	r1, #0
 80012e6:	f7fe ff9b 	bl	8000220 <__aeabi_dsub>
 80012ea:	e9c4 010a 	strd	r0, r1, [r4, #40]	@ 0x28
		uPID->Ki = (0 - uPID->Ki);
 80012ee:	ec53 2b19 	vmov	r2, r3, d9
 80012f2:	2000      	movs	r0, #0
 80012f4:	2100      	movs	r1, #0
 80012f6:	f7fe ff93 	bl	8000220 <__aeabi_dsub>
 80012fa:	e9c4 010c 	strd	r0, r1, [r4, #48]	@ 0x30
		uPID->Kd = (0 - uPID->Kd);
 80012fe:	4632      	mov	r2, r6
 8001300:	463b      	mov	r3, r7
 8001302:	2000      	movs	r0, #0
 8001304:	2100      	movs	r1, #0
 8001306:	f7fe ff8b 	bl	8000220 <__aeabi_dsub>
 800130a:	e9c4 010e 	strd	r0, r1, [r4, #56]	@ 0x38
 800130e:	e7e2      	b.n	80012d6 <PID_SetTunings2+0xb2>
 8001310:	408f4000 	.word	0x408f4000

08001314 <PID_SetControllerDirection>:

/* ~~~~~~~~~~~~~~~ PID Direction ~~~~~~~~~~~~~~~ */
void          PID_SetControllerDirection(PID_TypeDef *uPID, PIDCD_TypeDef Direction)
{
 8001314:	b538      	push	{r3, r4, r5, lr}
 8001316:	4604      	mov	r4, r0
 8001318:	460d      	mov	r5, r1
	/* ~~~~~~~~~~ Check parameters ~~~~~~~~~~ */
	if ((uPID->InAuto) && (Direction !=uPID->ControllerDirection))
 800131a:	7843      	ldrb	r3, [r0, #1]
 800131c:	b1d3      	cbz	r3, 8001354 <PID_SetControllerDirection+0x40>
 800131e:	78c3      	ldrb	r3, [r0, #3]
 8001320:	428b      	cmp	r3, r1
 8001322:	d017      	beq.n	8001354 <PID_SetControllerDirection+0x40>
	{
		
		uPID->Kp = (0 - uPID->Kp);
 8001324:	e9d0 230a 	ldrd	r2, r3, [r0, #40]	@ 0x28
 8001328:	2000      	movs	r0, #0
 800132a:	2100      	movs	r1, #0
 800132c:	f7fe ff78 	bl	8000220 <__aeabi_dsub>
 8001330:	e9c4 010a 	strd	r0, r1, [r4, #40]	@ 0x28
		uPID->Ki = (0 - uPID->Ki);
 8001334:	e9d4 230c 	ldrd	r2, r3, [r4, #48]	@ 0x30
 8001338:	2000      	movs	r0, #0
 800133a:	2100      	movs	r1, #0
 800133c:	f7fe ff70 	bl	8000220 <__aeabi_dsub>
 8001340:	e9c4 010c 	strd	r0, r1, [r4, #48]	@ 0x30
		uPID->Kd = (0 - uPID->Kd);
 8001344:	e9d4 230e 	ldrd	r2, r3, [r4, #56]	@ 0x38
 8001348:	2000      	movs	r0, #0
 800134a:	2100      	movs	r1, #0
 800134c:	f7fe ff68 	bl	8000220 <__aeabi_dsub>
 8001350:	e9c4 010e 	strd	r0, r1, [r4, #56]	@ 0x38
		
	}
	
	uPID->ControllerDirection = Direction;
 8001354:	70e5      	strb	r5, [r4, #3]
	
}
 8001356:	bd38      	pop	{r3, r4, r5, pc}

08001358 <PID>:
{
 8001358:	b510      	push	{r4, lr}
 800135a:	ed2d 8b06 	vpush	{d8-d10}
 800135e:	4604      	mov	r4, r0
 8001360:	eeb0 8a40 	vmov.f32	s16, s0
 8001364:	eef0 8a60 	vmov.f32	s17, s1
 8001368:	eeb0 9a41 	vmov.f32	s18, s2
 800136c:	eef0 9a61 	vmov.f32	s19, s3
 8001370:	eeb0 aa42 	vmov.f32	s20, s4
 8001374:	eef0 aa62 	vmov.f32	s21, s5
	uPID->MyOutput   = Output;
 8001378:	6442      	str	r2, [r0, #68]	@ 0x44
	uPID->MyInput    = Input;
 800137a:	6401      	str	r1, [r0, #64]	@ 0x40
	uPID->MySetpoint = Setpoint;
 800137c:	6483      	str	r3, [r0, #72]	@ 0x48
	uPID->InAuto     = (PIDMode_TypeDef)_FALSE;
 800137e:	2300      	movs	r3, #0
 8001380:	7043      	strb	r3, [r0, #1]
	PID_SetOutputLimits(uPID, 0, _PID_8BIT_PWM_MAX);
 8001382:	ed9f 1b13 	vldr	d1, [pc, #76]	@ 80013d0 <PID+0x78>
 8001386:	ed9f 0b14 	vldr	d0, [pc, #80]	@ 80013d8 <PID+0x80>
 800138a:	f7ff ff04 	bl	8001196 <PID_SetOutputLimits>
	uPID->SampleTime = _PID_SAMPLE_TIME_MS_DEF; /* default Controller Sample Time is 0.1 seconds */
 800138e:	2364      	movs	r3, #100	@ 0x64
 8001390:	60a3      	str	r3, [r4, #8]
	PID_SetControllerDirection(uPID, ControllerDirection);
 8001392:	f89d 1024 	ldrb.w	r1, [sp, #36]	@ 0x24
 8001396:	4620      	mov	r0, r4
 8001398:	f7ff ffbc 	bl	8001314 <PID_SetControllerDirection>
	PID_SetTunings2(uPID, Kp, Ki, Kd, POn);
 800139c:	f89d 1020 	ldrb.w	r1, [sp, #32]
 80013a0:	eeb0 2a4a 	vmov.f32	s4, s20
 80013a4:	eef0 2a6a 	vmov.f32	s5, s21
 80013a8:	eeb0 1a49 	vmov.f32	s2, s18
 80013ac:	eef0 1a69 	vmov.f32	s3, s19
 80013b0:	eeb0 0a48 	vmov.f32	s0, s16
 80013b4:	eef0 0a68 	vmov.f32	s1, s17
 80013b8:	4620      	mov	r0, r4
 80013ba:	f7ff ff33 	bl	8001224 <PID_SetTunings2>
	uPID->LastTime = GetTime() - uPID->SampleTime;
 80013be:	f000 f97d 	bl	80016bc <HAL_GetTick>
 80013c2:	68a3      	ldr	r3, [r4, #8]
 80013c4:	1ac0      	subs	r0, r0, r3
 80013c6:	6060      	str	r0, [r4, #4]
}
 80013c8:	ecbd 8b06 	vpop	{d8-d10}
 80013cc:	bd10      	pop	{r4, pc}
 80013ce:	bf00      	nop
 80013d0:	00000000 	.word	0x00000000
 80013d4:	406fe000 	.word	0x406fe000
	...

080013e0 <PID_SetSampleTime>:
	return uPID->ControllerDirection;
}

/* ~~~~~~~~~~~~~~~ PID Sampling ~~~~~~~~~~~~~~~~ */
void PID_SetSampleTime(PID_TypeDef *uPID, int32_t NewSampleTime)
{
 80013e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	
	double ratio;
	
	/* ~~~~~~~~~~ Check value ~~~~~~~~~~ */
	if (NewSampleTime > 0)
 80013e2:	1e0d      	subs	r5, r1, #0
 80013e4:	dd21      	ble.n	800142a <PID_SetSampleTime+0x4a>
 80013e6:	4604      	mov	r4, r0
	{
		
		ratio = (double)NewSampleTime / (double)uPID->SampleTime;
 80013e8:	4628      	mov	r0, r5
 80013ea:	f7ff f867 	bl	80004bc <__aeabi_i2d>
 80013ee:	4606      	mov	r6, r0
 80013f0:	460f      	mov	r7, r1
 80013f2:	68a0      	ldr	r0, [r4, #8]
 80013f4:	f7ff f852 	bl	800049c <__aeabi_ui2d>
 80013f8:	4602      	mov	r2, r0
 80013fa:	460b      	mov	r3, r1
 80013fc:	4630      	mov	r0, r6
 80013fe:	4639      	mov	r1, r7
 8001400:	f7ff f9f0 	bl	80007e4 <__aeabi_ddiv>
 8001404:	4606      	mov	r6, r0
 8001406:	460f      	mov	r7, r1
		
		uPID->Ki *= ratio;
 8001408:	4602      	mov	r2, r0
 800140a:	460b      	mov	r3, r1
 800140c:	e9d4 010c 	ldrd	r0, r1, [r4, #48]	@ 0x30
 8001410:	f7ff f8be 	bl	8000590 <__aeabi_dmul>
 8001414:	e9c4 010c 	strd	r0, r1, [r4, #48]	@ 0x30
		uPID->Kd /= ratio;
 8001418:	4632      	mov	r2, r6
 800141a:	463b      	mov	r3, r7
 800141c:	e9d4 010e 	ldrd	r0, r1, [r4, #56]	@ 0x38
 8001420:	f7ff f9e0 	bl	80007e4 <__aeabi_ddiv>
 8001424:	e9c4 010e 	strd	r0, r1, [r4, #56]	@ 0x38
		uPID->SampleTime = (uint32_t)NewSampleTime;
 8001428:	60a5      	str	r5, [r4, #8]
		
	}
	
}
 800142a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800142c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800142c:	b500      	push	{lr}
 800142e:	b083      	sub	sp, #12

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001430:	4b0b      	ldr	r3, [pc, #44]	@ (8001460 <HAL_MspInit+0x34>)
 8001432:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001434:	f042 0201 	orr.w	r2, r2, #1
 8001438:	661a      	str	r2, [r3, #96]	@ 0x60
 800143a:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800143c:	f002 0201 	and.w	r2, r2, #1
 8001440:	9200      	str	r2, [sp, #0]
 8001442:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001444:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8001446:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 800144a:	659a      	str	r2, [r3, #88]	@ 0x58
 800144c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800144e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001452:	9301      	str	r3, [sp, #4]
 8001454:	9b01      	ldr	r3, [sp, #4]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8001456:	f001 fa8d 	bl	8002974 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800145a:	b003      	add	sp, #12
 800145c:	f85d fb04 	ldr.w	pc, [sp], #4
 8001460:	40021000 	.word	0x40021000

08001464 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001464:	b530      	push	{r4, r5, lr}
 8001466:	b099      	sub	sp, #100	@ 0x64
 8001468:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800146a:	2100      	movs	r1, #0
 800146c:	9113      	str	r1, [sp, #76]	@ 0x4c
 800146e:	9114      	str	r1, [sp, #80]	@ 0x50
 8001470:	9115      	str	r1, [sp, #84]	@ 0x54
 8001472:	9116      	str	r1, [sp, #88]	@ 0x58
 8001474:	9117      	str	r1, [sp, #92]	@ 0x5c
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001476:	2244      	movs	r2, #68	@ 0x44
 8001478:	a802      	add	r0, sp, #8
 800147a:	f002 fca3 	bl	8003dc4 <memset>
  if(hadc->Instance==ADC1)
 800147e:	6823      	ldr	r3, [r4, #0]
 8001480:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001484:	d001      	beq.n	800148a <HAL_ADC_MspInit+0x26>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 8001486:	b019      	add	sp, #100	@ 0x64
 8001488:	bd30      	pop	{r4, r5, pc}
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 800148a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800148e:	9302      	str	r3, [sp, #8]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8001490:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8001494:	9311      	str	r3, [sp, #68]	@ 0x44
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001496:	a802      	add	r0, sp, #8
 8001498:	f001 fe52 	bl	8003140 <HAL_RCCEx_PeriphCLKConfig>
 800149c:	2800      	cmp	r0, #0
 800149e:	d136      	bne.n	800150e <HAL_ADC_MspInit+0xaa>
    __HAL_RCC_ADC12_CLK_ENABLE();
 80014a0:	4b1e      	ldr	r3, [pc, #120]	@ (800151c <HAL_ADC_MspInit+0xb8>)
 80014a2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80014a4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80014a8:	64da      	str	r2, [r3, #76]	@ 0x4c
 80014aa:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80014ac:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 80014b0:	9200      	str	r2, [sp, #0]
 80014b2:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014b4:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80014b6:	f042 0201 	orr.w	r2, r2, #1
 80014ba:	64da      	str	r2, [r3, #76]	@ 0x4c
 80014bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014be:	f003 0301 	and.w	r3, r3, #1
 80014c2:	9301      	str	r3, [sp, #4]
 80014c4:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = TPS1_1_Pin|TPS1_2_Pin|Pedal_Pin;
 80014c6:	2307      	movs	r3, #7
 80014c8:	9313      	str	r3, [sp, #76]	@ 0x4c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80014ca:	2303      	movs	r3, #3
 80014cc:	9314      	str	r3, [sp, #80]	@ 0x50
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ce:	2500      	movs	r5, #0
 80014d0:	9515      	str	r5, [sp, #84]	@ 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014d2:	a913      	add	r1, sp, #76	@ 0x4c
 80014d4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80014d8:	f001 f8d6 	bl	8002688 <HAL_GPIO_Init>
    hdma_adc1.Instance = DMA1_Channel1;
 80014dc:	4810      	ldr	r0, [pc, #64]	@ (8001520 <HAL_ADC_MspInit+0xbc>)
 80014de:	4b11      	ldr	r3, [pc, #68]	@ (8001524 <HAL_ADC_MspInit+0xc0>)
 80014e0:	6003      	str	r3, [r0, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 80014e2:	2305      	movs	r3, #5
 80014e4:	6043      	str	r3, [r0, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80014e6:	6085      	str	r5, [r0, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80014e8:	60c5      	str	r5, [r0, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80014ea:	2380      	movs	r3, #128	@ 0x80
 80014ec:	6103      	str	r3, [r0, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80014ee:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80014f2:	6143      	str	r3, [r0, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80014f4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80014f8:	6183      	str	r3, [r0, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80014fa:	2320      	movs	r3, #32
 80014fc:	61c3      	str	r3, [r0, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80014fe:	6205      	str	r5, [r0, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001500:	f000 ffac 	bl	800245c <HAL_DMA_Init>
 8001504:	b930      	cbnz	r0, 8001514 <HAL_ADC_MspInit+0xb0>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001506:	4b06      	ldr	r3, [pc, #24]	@ (8001520 <HAL_ADC_MspInit+0xbc>)
 8001508:	6563      	str	r3, [r4, #84]	@ 0x54
 800150a:	629c      	str	r4, [r3, #40]	@ 0x28
}
 800150c:	e7bb      	b.n	8001486 <HAL_ADC_MspInit+0x22>
      Error_Handler();
 800150e:	f7ff fb95 	bl	8000c3c <Error_Handler>
 8001512:	e7c5      	b.n	80014a0 <HAL_ADC_MspInit+0x3c>
      Error_Handler();
 8001514:	f7ff fb92 	bl	8000c3c <Error_Handler>
 8001518:	e7f5      	b.n	8001506 <HAL_ADC_MspInit+0xa2>
 800151a:	bf00      	nop
 800151c:	40021000 	.word	0x40021000
 8001520:	20000124 	.word	0x20000124
 8001524:	40020008 	.word	0x40020008

08001528 <HAL_TIM_Base_MspInit>:
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
  if(htim_base->Instance==TIM3)
 8001528:	6802      	ldr	r2, [r0, #0]
 800152a:	4b09      	ldr	r3, [pc, #36]	@ (8001550 <HAL_TIM_Base_MspInit+0x28>)
 800152c:	429a      	cmp	r2, r3
 800152e:	d000      	beq.n	8001532 <HAL_TIM_Base_MspInit+0xa>
 8001530:	4770      	bx	lr
{
 8001532:	b082      	sub	sp, #8
  {
    /* USER CODE BEGIN TIM3_MspInit 0 */

    /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001534:	f503 3303 	add.w	r3, r3, #134144	@ 0x20c00
 8001538:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800153a:	f042 0202 	orr.w	r2, r2, #2
 800153e:	659a      	str	r2, [r3, #88]	@ 0x58
 8001540:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001542:	f003 0302 	and.w	r3, r3, #2
 8001546:	9301      	str	r3, [sp, #4]
 8001548:	9b01      	ldr	r3, [sp, #4]

    /* USER CODE END TIM3_MspInit 1 */

  }

}
 800154a:	b002      	add	sp, #8
 800154c:	4770      	bx	lr
 800154e:	bf00      	nop
 8001550:	40000400 	.word	0x40000400

08001554 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001554:	b500      	push	{lr}
 8001556:	b087      	sub	sp, #28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001558:	2300      	movs	r3, #0
 800155a:	9301      	str	r3, [sp, #4]
 800155c:	9302      	str	r3, [sp, #8]
 800155e:	9303      	str	r3, [sp, #12]
 8001560:	9304      	str	r3, [sp, #16]
 8001562:	9305      	str	r3, [sp, #20]
  if(htim->Instance==TIM3)
 8001564:	6802      	ldr	r2, [r0, #0]
 8001566:	4b0d      	ldr	r3, [pc, #52]	@ (800159c <HAL_TIM_MspPostInit+0x48>)
 8001568:	429a      	cmp	r2, r3
 800156a:	d002      	beq.n	8001572 <HAL_TIM_MspPostInit+0x1e>
    /* USER CODE BEGIN TIM3_MspPostInit 1 */

    /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800156c:	b007      	add	sp, #28
 800156e:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001572:	f503 3303 	add.w	r3, r3, #134144	@ 0x20c00
 8001576:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001578:	f042 0202 	orr.w	r2, r2, #2
 800157c:	64da      	str	r2, [r3, #76]	@ 0x4c
 800157e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001580:	f003 0302 	and.w	r3, r3, #2
 8001584:	9300      	str	r3, [sp, #0]
 8001586:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = EN_A_Pin;
 8001588:	2310      	movs	r3, #16
 800158a:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800158c:	2302      	movs	r3, #2
 800158e:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001590:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(EN_A_GPIO_Port, &GPIO_InitStruct);
 8001592:	a901      	add	r1, sp, #4
 8001594:	4802      	ldr	r0, [pc, #8]	@ (80015a0 <HAL_TIM_MspPostInit+0x4c>)
 8001596:	f001 f877 	bl	8002688 <HAL_GPIO_Init>
}
 800159a:	e7e7      	b.n	800156c <HAL_TIM_MspPostInit+0x18>
 800159c:	40000400 	.word	0x40000400
 80015a0:	48000400 	.word	0x48000400

080015a4 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80015a4:	e7fe      	b.n	80015a4 <NMI_Handler>

080015a6 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80015a6:	e7fe      	b.n	80015a6 <HardFault_Handler>

080015a8 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80015a8:	e7fe      	b.n	80015a8 <MemManage_Handler>

080015aa <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80015aa:	e7fe      	b.n	80015aa <BusFault_Handler>

080015ac <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80015ac:	e7fe      	b.n	80015ac <UsageFault_Handler>

080015ae <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80015ae:	4770      	bx	lr

080015b0 <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80015b0:	4770      	bx	lr

080015b2 <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80015b2:	4770      	bx	lr

080015b4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80015b4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80015b6:	f000 f875 	bl	80016a4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80015ba:	bd08      	pop	{r3, pc}

080015bc <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80015bc:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80015be:	4802      	ldr	r0, [pc, #8]	@ (80015c8 <DMA1_Channel1_IRQHandler+0xc>)
 80015c0:	f001 f800 	bl	80025c4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80015c4:	bd08      	pop	{r3, pc}
 80015c6:	bf00      	nop
 80015c8:	20000124 	.word	0x20000124

080015cc <SystemInit>:

void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80015cc:	4a03      	ldr	r2, [pc, #12]	@ (80015dc <SystemInit+0x10>)
 80015ce:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 80015d2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80015d6:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80015da:	4770      	bx	lr
 80015dc:	e000ed00 	.word	0xe000ed00

080015e0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80015e0:	480d      	ldr	r0, [pc, #52]	@ (8001618 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80015e2:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 80015e4:	f7ff fff2 	bl	80015cc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80015e8:	480c      	ldr	r0, [pc, #48]	@ (800161c <LoopForever+0x6>)
  ldr r1, =_edata
 80015ea:	490d      	ldr	r1, [pc, #52]	@ (8001620 <LoopForever+0xa>)
  ldr r2, =_sidata
 80015ec:	4a0d      	ldr	r2, [pc, #52]	@ (8001624 <LoopForever+0xe>)
  movs r3, #0
 80015ee:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80015f0:	e002      	b.n	80015f8 <LoopCopyDataInit>

080015f2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80015f2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80015f4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80015f6:	3304      	adds	r3, #4

080015f8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80015f8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80015fa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80015fc:	d3f9      	bcc.n	80015f2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80015fe:	4a0a      	ldr	r2, [pc, #40]	@ (8001628 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001600:	4c0a      	ldr	r4, [pc, #40]	@ (800162c <LoopForever+0x16>)
  movs r3, #0
 8001602:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001604:	e001      	b.n	800160a <LoopFillZerobss>

08001606 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001606:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001608:	3204      	adds	r2, #4

0800160a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800160a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800160c:	d3fb      	bcc.n	8001606 <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 800160e:	f002 fbe1 	bl	8003dd4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001612:	f7ff fc15 	bl	8000e40 <main>

08001616 <LoopForever>:

LoopForever:
    b LoopForever
 8001616:	e7fe      	b.n	8001616 <LoopForever>
  ldr   r0, =_estack
 8001618:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 800161c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001620:	20000024 	.word	0x20000024
  ldr r2, =_sidata
 8001624:	08003e4c 	.word	0x08003e4c
  ldr r2, =_sbss
 8001628:	20000028 	.word	0x20000028
  ldr r4, =_ebss
 800162c:	200001f4 	.word	0x200001f4

08001630 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001630:	e7fe      	b.n	8001630 <ADC1_2_IRQHandler>
	...

08001634 <HAL_InitTick>:
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
  HAL_StatusTypeDef  status = HAL_OK;

  if (uwTickFreq != 0U)
 8001634:	4b10      	ldr	r3, [pc, #64]	@ (8001678 <HAL_InitTick+0x44>)
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	b90b      	cbnz	r3, 800163e <HAL_InitTick+0xa>
      status = HAL_ERROR;
    }
  }
  else
  {
    status = HAL_ERROR;
 800163a:	2001      	movs	r0, #1
  }

  /* Return function status */
  return status;
}
 800163c:	4770      	bx	lr
{
 800163e:	b510      	push	{r4, lr}
 8001640:	4604      	mov	r4, r0
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001642:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001646:	fbb0 f3f3 	udiv	r3, r0, r3
 800164a:	4a0c      	ldr	r2, [pc, #48]	@ (800167c <HAL_InitTick+0x48>)
 800164c:	6810      	ldr	r0, [r2, #0]
 800164e:	fbb0 f0f3 	udiv	r0, r0, r3
 8001652:	f000 fe95 	bl	8002380 <HAL_SYSTICK_Config>
 8001656:	b968      	cbnz	r0, 8001674 <HAL_InitTick+0x40>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001658:	2c0f      	cmp	r4, #15
 800165a:	d901      	bls.n	8001660 <HAL_InitTick+0x2c>
        status = HAL_ERROR;
 800165c:	2001      	movs	r0, #1
 800165e:	e00a      	b.n	8001676 <HAL_InitTick+0x42>
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001660:	2200      	movs	r2, #0
 8001662:	4621      	mov	r1, r4
 8001664:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001668:	f000 fe76 	bl	8002358 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800166c:	4b04      	ldr	r3, [pc, #16]	@ (8001680 <HAL_InitTick+0x4c>)
 800166e:	601c      	str	r4, [r3, #0]
  HAL_StatusTypeDef  status = HAL_OK;
 8001670:	2000      	movs	r0, #0
 8001672:	e000      	b.n	8001676 <HAL_InitTick+0x42>
      status = HAL_ERROR;
 8001674:	2001      	movs	r0, #1
}
 8001676:	bd10      	pop	{r4, pc}
 8001678:	2000001c 	.word	0x2000001c
 800167c:	20000018 	.word	0x20000018
 8001680:	20000020 	.word	0x20000020

08001684 <HAL_Init>:
{
 8001684:	b510      	push	{r4, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001686:	2003      	movs	r0, #3
 8001688:	f000 fe54 	bl	8002334 <HAL_NVIC_SetPriorityGrouping>
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800168c:	2000      	movs	r0, #0
 800168e:	f7ff ffd1 	bl	8001634 <HAL_InitTick>
 8001692:	b110      	cbz	r0, 800169a <HAL_Init+0x16>
    status = HAL_ERROR;
 8001694:	2401      	movs	r4, #1
}
 8001696:	4620      	mov	r0, r4
 8001698:	bd10      	pop	{r4, pc}
 800169a:	4604      	mov	r4, r0
    HAL_MspInit();
 800169c:	f7ff fec6 	bl	800142c <HAL_MspInit>
 80016a0:	e7f9      	b.n	8001696 <HAL_Init+0x12>
	...

080016a4 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80016a4:	4a03      	ldr	r2, [pc, #12]	@ (80016b4 <HAL_IncTick+0x10>)
 80016a6:	6813      	ldr	r3, [r2, #0]
 80016a8:	4903      	ldr	r1, [pc, #12]	@ (80016b8 <HAL_IncTick+0x14>)
 80016aa:	6809      	ldr	r1, [r1, #0]
 80016ac:	440b      	add	r3, r1
 80016ae:	6013      	str	r3, [r2, #0]
}
 80016b0:	4770      	bx	lr
 80016b2:	bf00      	nop
 80016b4:	200001f0 	.word	0x200001f0
 80016b8:	2000001c 	.word	0x2000001c

080016bc <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80016bc:	4b01      	ldr	r3, [pc, #4]	@ (80016c4 <HAL_GetTick+0x8>)
 80016be:	6818      	ldr	r0, [r3, #0]
}
 80016c0:	4770      	bx	lr
 80016c2:	bf00      	nop
 80016c4:	200001f0 	.word	0x200001f0

080016c8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80016c8:	b538      	push	{r3, r4, r5, lr}
 80016ca:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80016cc:	f7ff fff6 	bl	80016bc <HAL_GetTick>
 80016d0:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80016d2:	f1b4 3fff 	cmp.w	r4, #4294967295	@ 0xffffffff
 80016d6:	d002      	beq.n	80016de <HAL_Delay+0x16>
  {
    wait += (uint32_t)(uwTickFreq);
 80016d8:	4b04      	ldr	r3, [pc, #16]	@ (80016ec <HAL_Delay+0x24>)
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80016de:	f7ff ffed 	bl	80016bc <HAL_GetTick>
 80016e2:	1b40      	subs	r0, r0, r5
 80016e4:	42a0      	cmp	r0, r4
 80016e6:	d3fa      	bcc.n	80016de <HAL_Delay+0x16>
  {
  }
}
 80016e8:	bd38      	pop	{r3, r4, r5, pc}
 80016ea:	bf00      	nop
 80016ec:	2000001c 	.word	0x2000001c

080016f0 <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80016f0:	b410      	push	{r4}
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 80016f2:	3030      	adds	r0, #48	@ 0x30
 80016f4:	0a0b      	lsrs	r3, r1, #8
 80016f6:	009b      	lsls	r3, r3, #2
 80016f8:	f003 030c 	and.w	r3, r3, #12
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80016fc:	58c4      	ldr	r4, [r0, r3]
 80016fe:	f001 011f 	and.w	r1, r1, #31
 8001702:	f04f 0c1f 	mov.w	ip, #31
 8001706:	fa0c fc01 	lsl.w	ip, ip, r1
 800170a:	ea24 0c0c 	bic.w	ip, r4, ip
 800170e:	f3c2 6284 	ubfx	r2, r2, #26, #5
 8001712:	408a      	lsls	r2, r1
 8001714:	ea4c 0202 	orr.w	r2, ip, r2
 8001718:	50c2      	str	r2, [r0, r3]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800171a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800171e:	4770      	bx	lr

08001720 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001720:	b410      	push	{r4}
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8001722:	3014      	adds	r0, #20
 8001724:	0e4b      	lsrs	r3, r1, #25
 8001726:	009b      	lsls	r3, r3, #2
 8001728:	f003 0304 	and.w	r3, r3, #4
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 800172c:	58c4      	ldr	r4, [r0, r3]
 800172e:	f3c1 5104 	ubfx	r1, r1, #20, #5
 8001732:	f04f 0c07 	mov.w	ip, #7
 8001736:	fa0c fc01 	lsl.w	ip, ip, r1
 800173a:	ea24 0c0c 	bic.w	ip, r4, ip
 800173e:	408a      	lsls	r2, r1
 8001740:	ea4c 0202 	orr.w	r2, ip, r2
 8001744:	50c2      	str	r2, [r0, r3]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001746:	f85d 4b04 	ldr.w	r4, [sp], #4
 800174a:	4770      	bx	lr

0800174c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800174c:	b530      	push	{r4, r5, lr}
 800174e:	b083      	sub	sp, #12
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8001750:	2300      	movs	r3, #0
 8001752:	9301      	str	r3, [sp, #4]

  /* Check ADC handle */
  if (hadc == NULL)
 8001754:	2800      	cmp	r0, #0
 8001756:	f000 80ff 	beq.w	8001958 <HAL_ADC_Init+0x20c>
 800175a:	4604      	mov	r4, r0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800175c:	6dc3      	ldr	r3, [r0, #92]	@ 0x5c
 800175e:	b313      	cbz	r3, 80017a6 <HAL_ADC_Init+0x5a>
    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001760:	6823      	ldr	r3, [r4, #0]
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001762:	689a      	ldr	r2, [r3, #8]
 8001764:	f012 5f00 	tst.w	r2, #536870912	@ 0x20000000
 8001768:	d005      	beq.n	8001776 <HAL_ADC_Init+0x2a>
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 800176a:	689a      	ldr	r2, [r3, #8]
 800176c:	f022 4220 	bic.w	r2, r2, #2684354560	@ 0xa0000000
 8001770:	f022 023f 	bic.w	r2, r2, #63	@ 0x3f
 8001774:	609a      	str	r2, [r3, #8]
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001776:	6822      	ldr	r2, [r4, #0]
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001778:	6893      	ldr	r3, [r2, #8]
 800177a:	f013 5f80 	tst.w	r3, #268435456	@ 0x10000000
 800177e:	d11f      	bne.n	80017c0 <HAL_ADC_Init+0x74>
  MODIFY_REG(ADCx->CR,
 8001780:	6893      	ldr	r3, [r2, #8]
 8001782:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8001786:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800178a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800178e:	6093      	str	r3, [r2, #8]
    LL_ADC_EnableInternalRegulator(hadc->Instance);

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001790:	4b72      	ldr	r3, [pc, #456]	@ (800195c <HAL_ADC_Init+0x210>)
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	099b      	lsrs	r3, r3, #6
 8001796:	4a72      	ldr	r2, [pc, #456]	@ (8001960 <HAL_ADC_Init+0x214>)
 8001798:	fba2 2303 	umull	r2, r3, r2, r3
 800179c:	099b      	lsrs	r3, r3, #6
 800179e:	3301      	adds	r3, #1
 80017a0:	005b      	lsls	r3, r3, #1
 80017a2:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 80017a4:	e009      	b.n	80017ba <HAL_ADC_Init+0x6e>
    HAL_ADC_MspInit(hadc);
 80017a6:	f7ff fe5d 	bl	8001464 <HAL_ADC_MspInit>
    ADC_CLEAR_ERRORCODE(hadc);
 80017aa:	2300      	movs	r3, #0
 80017ac:	6623      	str	r3, [r4, #96]	@ 0x60
    hadc->Lock = HAL_UNLOCKED;
 80017ae:	f884 3058 	strb.w	r3, [r4, #88]	@ 0x58
 80017b2:	e7d5      	b.n	8001760 <HAL_ADC_Init+0x14>
    {
      wait_loop_index--;
 80017b4:	9b01      	ldr	r3, [sp, #4]
 80017b6:	3b01      	subs	r3, #1
 80017b8:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 80017ba:	9b01      	ldr	r3, [sp, #4]
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d1f9      	bne.n	80017b4 <HAL_ADC_Init+0x68>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80017c0:	6822      	ldr	r2, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80017c2:	6893      	ldr	r3, [r2, #8]
 80017c4:	f013 5f80 	tst.w	r3, #268435456	@ 0x10000000
 80017c8:	f040 8092 	bne.w	80018f0 <HAL_ADC_Init+0x1a4>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80017cc:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 80017ce:	f043 0310 	orr.w	r3, r3, #16
 80017d2:	65e3      	str	r3, [r4, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80017d4:	6e23      	ldr	r3, [r4, #96]	@ 0x60
 80017d6:	f043 0301 	orr.w	r3, r3, #1
 80017da:	6623      	str	r3, [r4, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 80017dc:	2001      	movs	r0, #1
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80017de:	6893      	ldr	r3, [r2, #8]
 80017e0:	f013 0304 	ands.w	r3, r3, #4
 80017e4:	d000      	beq.n	80017e8 <HAL_ADC_Init+0x9c>
 80017e6:	2301      	movs	r3, #1
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80017e8:	6de1      	ldr	r1, [r4, #92]	@ 0x5c
 80017ea:	f011 0f10 	tst.w	r1, #16
 80017ee:	f040 80ac 	bne.w	800194a <HAL_ADC_Init+0x1fe>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	f040 80a9 	bne.w	800194a <HAL_ADC_Init+0x1fe>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80017f8:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 80017fa:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 80017fe:	f043 0302 	orr.w	r3, r3, #2
 8001802:	65e3      	str	r3, [r4, #92]	@ 0x5c
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001804:	6893      	ldr	r3, [r2, #8]
 8001806:	f013 0f01 	tst.w	r3, #1
 800180a:	d113      	bne.n	8001834 <HAL_ADC_Init+0xe8>
 800180c:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8001810:	689b      	ldr	r3, [r3, #8]
 8001812:	f013 0301 	ands.w	r3, r3, #1
 8001816:	d000      	beq.n	800181a <HAL_ADC_Init+0xce>
 8001818:	2301      	movs	r3, #1
 800181a:	4a52      	ldr	r2, [pc, #328]	@ (8001964 <HAL_ADC_Init+0x218>)
 800181c:	6892      	ldr	r2, [r2, #8]
 800181e:	f012 0f01 	tst.w	r2, #1
 8001822:	d107      	bne.n	8001834 <HAL_ADC_Init+0xe8>
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001824:	b933      	cbnz	r3, 8001834 <HAL_ADC_Init+0xe8>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001826:	6863      	ldr	r3, [r4, #4]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001828:	494f      	ldr	r1, [pc, #316]	@ (8001968 <HAL_ADC_Init+0x21c>)
 800182a:	688a      	ldr	r2, [r1, #8]
 800182c:	f422 127c 	bic.w	r2, r2, #4128768	@ 0x3f0000
 8001830:	4313      	orrs	r3, r2
 8001832:	608b      	str	r3, [r1, #8]
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001834:	7f62      	ldrb	r2, [r4, #29]
                 hadc->Init.Overrun                                                     |
 8001836:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001838:	ea43 3342 	orr.w	r3, r3, r2, lsl #13
                 hadc->Init.DataAlign                                                   |
 800183c:	68e2      	ldr	r2, [r4, #12]
                 hadc->Init.Overrun                                                     |
 800183e:	4313      	orrs	r3, r2
                 hadc->Init.Resolution                                                  |
 8001840:	68a2      	ldr	r2, [r4, #8]
                 hadc->Init.DataAlign                                                   |
 8001842:	4313      	orrs	r3, r2
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001844:	f894 2024 	ldrb.w	r2, [r4, #36]	@ 0x24
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001848:	ea43 4302 	orr.w	r3, r3, r2, lsl #16

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800184c:	2a01      	cmp	r2, #1
 800184e:	d051      	beq.n	80018f4 <HAL_ADC_Init+0x1a8>
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001850:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8001852:	b122      	cbz	r2, 800185e <HAL_ADC_Init+0x112>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001854:	f402 7278 	and.w	r2, r2, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8001858:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800185a:	430a      	orrs	r2, r1
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800185c:	4313      	orrs	r3, r2
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 800185e:	6821      	ldr	r1, [r4, #0]
 8001860:	68cd      	ldr	r5, [r1, #12]
 8001862:	4a42      	ldr	r2, [pc, #264]	@ (800196c <HAL_ADC_Init+0x220>)
 8001864:	402a      	ands	r2, r5
 8001866:	431a      	orrs	r2, r3
 8001868:	60ca      	str	r2, [r1, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 800186a:	6822      	ldr	r2, [r4, #0]
 800186c:	6913      	ldr	r3, [r2, #16]
 800186e:	f023 6340 	bic.w	r3, r3, #201326592	@ 0xc000000
 8001872:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8001874:	430b      	orrs	r3, r1
 8001876:	6113      	str	r3, [r2, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001878:	6822      	ldr	r2, [r4, #0]
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800187a:	6893      	ldr	r3, [r2, #8]
 800187c:	f013 0308 	ands.w	r3, r3, #8
 8001880:	d000      	beq.n	8001884 <HAL_ADC_Init+0x138>
 8001882:	2301      	movs	r3, #1
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001884:	bb2b      	cbnz	r3, 80018d2 <HAL_ADC_Init+0x186>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001886:	7f23      	ldrb	r3, [r4, #28]
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001888:	f894 1038 	ldrb.w	r1, [r4, #56]	@ 0x38
 800188c:	0049      	lsls	r1, r1, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 800188e:	ea41 3183 	orr.w	r1, r1, r3, lsl #14

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8001892:	68d3      	ldr	r3, [r2, #12]
 8001894:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8001898:	f023 0302 	bic.w	r3, r3, #2
 800189c:	430b      	orrs	r3, r1
 800189e:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 80018a0:	6923      	ldr	r3, [r4, #16]
 80018a2:	b363      	cbz	r3, 80018fe <HAL_ADC_Init+0x1b2>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80018a4:	6822      	ldr	r2, [r4, #0]
 80018a6:	6913      	ldr	r3, [r2, #16]
 80018a8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80018ac:	6113      	str	r3, [r2, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 80018ae:	6822      	ldr	r2, [r4, #0]
 80018b0:	f8d2 30c0 	ldr.w	r3, [r2, #192]	@ 0xc0
 80018b4:	f36f 030d 	bfc	r3, #0, #14
 80018b8:	6921      	ldr	r1, [r4, #16]
 80018ba:	430b      	orrs	r3, r1
 80018bc:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 80018c0:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 80018c4:	2b01      	cmp	r3, #1
 80018c6:	d027      	beq.n	8001918 <HAL_ADC_Init+0x1cc>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80018c8:	6822      	ldr	r2, [r4, #0]
 80018ca:	6913      	ldr	r3, [r2, #16]
 80018cc:	f023 0301 	bic.w	r3, r3, #1
 80018d0:	6113      	str	r3, [r2, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80018d2:	6963      	ldr	r3, [r4, #20]
 80018d4:	2b01      	cmp	r3, #1
 80018d6:	d02f      	beq.n	8001938 <HAL_ADC_Init+0x1ec>
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80018d8:	6822      	ldr	r2, [r4, #0]
 80018da:	6b13      	ldr	r3, [r2, #48]	@ 0x30
 80018dc:	f023 030f 	bic.w	r3, r3, #15
 80018e0:	6313      	str	r3, [r2, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80018e2:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 80018e4:	f023 0303 	bic.w	r3, r3, #3
 80018e8:	f043 0301 	orr.w	r3, r3, #1
 80018ec:	65e3      	str	r3, [r4, #92]	@ 0x5c
 80018ee:	e031      	b.n	8001954 <HAL_ADC_Init+0x208>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80018f0:	2000      	movs	r0, #0
 80018f2:	e774      	b.n	80017de <HAL_ADC_Init+0x92>
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80018f4:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 80018f6:	3a01      	subs	r2, #1
 80018f8:	ea43 4342 	orr.w	r3, r3, r2, lsl #17
 80018fc:	e7a8      	b.n	8001850 <HAL_ADC_Init+0x104>
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80018fe:	6822      	ldr	r2, [r4, #0]
 8001900:	6913      	ldr	r3, [r2, #16]
 8001902:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001906:	6113      	str	r3, [r2, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8001908:	6822      	ldr	r2, [r4, #0]
 800190a:	f8d2 30c0 	ldr.w	r3, [r2, #192]	@ 0xc0
 800190e:	f36f 030d 	bfc	r3, #0, #14
 8001912:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 8001916:	e7d3      	b.n	80018c0 <HAL_ADC_Init+0x174>
        MODIFY_REG(hadc->Instance->CFGR2,
 8001918:	6821      	ldr	r1, [r4, #0]
 800191a:	690b      	ldr	r3, [r1, #16]
 800191c:	f36f 038a 	bfc	r3, #2, #9
 8001920:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 8001922:	6ca5      	ldr	r5, [r4, #72]	@ 0x48
 8001924:	432a      	orrs	r2, r5
 8001926:	6ce5      	ldr	r5, [r4, #76]	@ 0x4c
 8001928:	432a      	orrs	r2, r5
 800192a:	6d25      	ldr	r5, [r4, #80]	@ 0x50
 800192c:	432a      	orrs	r2, r5
 800192e:	4313      	orrs	r3, r2
 8001930:	f043 0301 	orr.w	r3, r3, #1
 8001934:	610b      	str	r3, [r1, #16]
 8001936:	e7cc      	b.n	80018d2 <HAL_ADC_Init+0x186>
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001938:	6821      	ldr	r1, [r4, #0]
 800193a:	6b0b      	ldr	r3, [r1, #48]	@ 0x30
 800193c:	f023 030f 	bic.w	r3, r3, #15
 8001940:	6a22      	ldr	r2, [r4, #32]
 8001942:	3a01      	subs	r2, #1
 8001944:	4313      	orrs	r3, r2
 8001946:	630b      	str	r3, [r1, #48]	@ 0x30
 8001948:	e7cb      	b.n	80018e2 <HAL_ADC_Init+0x196>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800194a:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 800194c:	f043 0310 	orr.w	r3, r3, #16
 8001950:	65e3      	str	r3, [r4, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8001952:	2001      	movs	r0, #1
  }

  /* Return function status */
  return tmp_hal_status;
}
 8001954:	b003      	add	sp, #12
 8001956:	bd30      	pop	{r4, r5, pc}
    return HAL_ERROR;
 8001958:	2001      	movs	r0, #1
 800195a:	e7fb      	b.n	8001954 <HAL_ADC_Init+0x208>
 800195c:	20000018 	.word	0x20000018
 8001960:	053e2d63 	.word	0x053e2d63
 8001964:	50000100 	.word	0x50000100
 8001968:	50000300 	.word	0x50000300
 800196c:	fff04007 	.word	0xfff04007

08001970 <HAL_ADC_ConvCpltCallback>:
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8001970:	4770      	bx	lr

08001972 <HAL_ADC_ConvHalfCpltCallback>:
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8001972:	4770      	bx	lr

08001974 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8001974:	b508      	push	{r3, lr}

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001976:	6a80      	ldr	r0, [r0, #40]	@ 0x28
 8001978:	f7ff fffb 	bl	8001972 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800197c:	bd08      	pop	{r3, pc}

0800197e <HAL_ADC_ErrorCallback>:
}
 800197e:	4770      	bx	lr

08001980 <ADC_DMAConvCplt>:
{
 8001980:	b508      	push	{r3, lr}
 8001982:	4603      	mov	r3, r0
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001984:	6a80      	ldr	r0, [r0, #40]	@ 0x28
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8001986:	6dc2      	ldr	r2, [r0, #92]	@ 0x5c
 8001988:	f012 0f50 	tst.w	r2, #80	@ 0x50
 800198c:	d130      	bne.n	80019f0 <ADC_DMAConvCplt+0x70>
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800198e:	6dc3      	ldr	r3, [r0, #92]	@ 0x5c
 8001990:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001994:	65c3      	str	r3, [r0, #92]	@ 0x5c
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8001996:	6803      	ldr	r3, [r0, #0]
 8001998:	681a      	ldr	r2, [r3, #0]
 800199a:	f012 0f08 	tst.w	r2, #8
 800199e:	d014      	beq.n	80019ca <ADC_DMAConvCplt+0x4a>
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80019a0:	68da      	ldr	r2, [r3, #12]
 80019a2:	f412 6f40 	tst.w	r2, #3072	@ 0xc00
 80019a6:	d120      	bne.n	80019ea <ADC_DMAConvCplt+0x6a>
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 80019a8:	68db      	ldr	r3, [r3, #12]
 80019aa:	f413 5f00 	tst.w	r3, #8192	@ 0x2000
 80019ae:	d11c      	bne.n	80019ea <ADC_DMAConvCplt+0x6a>
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80019b0:	6dc3      	ldr	r3, [r0, #92]	@ 0x5c
 80019b2:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80019b6:	65c3      	str	r3, [r0, #92]	@ 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80019b8:	6dc3      	ldr	r3, [r0, #92]	@ 0x5c
 80019ba:	f413 5f80 	tst.w	r3, #4096	@ 0x1000
 80019be:	d114      	bne.n	80019ea <ADC_DMAConvCplt+0x6a>
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80019c0:	6dc3      	ldr	r3, [r0, #92]	@ 0x5c
 80019c2:	f043 0301 	orr.w	r3, r3, #1
 80019c6:	65c3      	str	r3, [r0, #92]	@ 0x5c
 80019c8:	e00f      	b.n	80019ea <ADC_DMAConvCplt+0x6a>
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 80019ca:	68db      	ldr	r3, [r3, #12]
 80019cc:	f013 0f02 	tst.w	r3, #2
 80019d0:	d10b      	bne.n	80019ea <ADC_DMAConvCplt+0x6a>
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80019d2:	6dc3      	ldr	r3, [r0, #92]	@ 0x5c
 80019d4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80019d8:	65c3      	str	r3, [r0, #92]	@ 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80019da:	6dc3      	ldr	r3, [r0, #92]	@ 0x5c
 80019dc:	f413 5f80 	tst.w	r3, #4096	@ 0x1000
 80019e0:	d103      	bne.n	80019ea <ADC_DMAConvCplt+0x6a>
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80019e2:	6dc3      	ldr	r3, [r0, #92]	@ 0x5c
 80019e4:	f043 0301 	orr.w	r3, r3, #1
 80019e8:	65c3      	str	r3, [r0, #92]	@ 0x5c
    HAL_ADC_ConvCpltCallback(hadc);
 80019ea:	f7ff ffc1 	bl	8001970 <HAL_ADC_ConvCpltCallback>
}
 80019ee:	bd08      	pop	{r3, pc}
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80019f0:	6dc2      	ldr	r2, [r0, #92]	@ 0x5c
 80019f2:	f012 0f10 	tst.w	r2, #16
 80019f6:	d104      	bne.n	8001a02 <ADC_DMAConvCplt+0x82>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80019f8:	6d42      	ldr	r2, [r0, #84]	@ 0x54
 80019fa:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80019fc:	4618      	mov	r0, r3
 80019fe:	4790      	blx	r2
}
 8001a00:	e7f5      	b.n	80019ee <ADC_DMAConvCplt+0x6e>
      HAL_ADC_ErrorCallback(hadc);
 8001a02:	f7ff ffbc 	bl	800197e <HAL_ADC_ErrorCallback>
 8001a06:	e7f2      	b.n	80019ee <ADC_DMAConvCplt+0x6e>

08001a08 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8001a08:	b508      	push	{r3, lr}
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001a0a:	6a80      	ldr	r0, [r0, #40]	@ 0x28

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8001a0c:	6dc3      	ldr	r3, [r0, #92]	@ 0x5c
 8001a0e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001a12:	65c3      	str	r3, [r0, #92]	@ 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8001a14:	6e03      	ldr	r3, [r0, #96]	@ 0x60
 8001a16:	f043 0304 	orr.w	r3, r3, #4
 8001a1a:	6603      	str	r3, [r0, #96]	@ 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8001a1c:	f7ff ffaf 	bl	800197e <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001a20:	bd08      	pop	{r3, pc}
	...

08001a24 <HAL_ADC_ConfigChannel>:
{
 8001a24:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001a26:	b083      	sub	sp, #12
  __IO uint32_t wait_loop_index = 0UL;
 8001a28:	2300      	movs	r3, #0
 8001a2a:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 8001a2c:	f890 3058 	ldrb.w	r3, [r0, #88]	@ 0x58
 8001a30:	2b01      	cmp	r3, #1
 8001a32:	f000 821c 	beq.w	8001e6e <HAL_ADC_ConfigChannel+0x44a>
 8001a36:	4604      	mov	r4, r0
 8001a38:	460d      	mov	r5, r1
 8001a3a:	2301      	movs	r3, #1
 8001a3c:	f880 3058 	strb.w	r3, [r0, #88]	@ 0x58
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001a40:	6800      	ldr	r0, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001a42:	6883      	ldr	r3, [r0, #8]
 8001a44:	f013 0f04 	tst.w	r3, #4
 8001a48:	d009      	beq.n	8001a5e <HAL_ADC_ConfigChannel+0x3a>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001a4a:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 8001a4c:	f043 0320 	orr.w	r3, r3, #32
 8001a50:	65e3      	str	r3, [r4, #92]	@ 0x5c
    tmp_hal_status = HAL_ERROR;
 8001a52:	2001      	movs	r0, #1
  __HAL_UNLOCK(hadc);
 8001a54:	2300      	movs	r3, #0
 8001a56:	f884 3058 	strb.w	r3, [r4, #88]	@ 0x58
}
 8001a5a:	b003      	add	sp, #12
 8001a5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8001a5e:	680a      	ldr	r2, [r1, #0]
 8001a60:	6849      	ldr	r1, [r1, #4]
 8001a62:	f7ff fe45 	bl	80016f0 <LL_ADC_REG_SetSequencerRanks>
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001a66:	6820      	ldr	r0, [r4, #0]
 8001a68:	6883      	ldr	r3, [r0, #8]
 8001a6a:	f013 0304 	ands.w	r3, r3, #4
 8001a6e:	d000      	beq.n	8001a72 <HAL_ADC_ConfigChannel+0x4e>
 8001a70:	2301      	movs	r3, #1
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001a72:	6886      	ldr	r6, [r0, #8]
 8001a74:	f016 0608 	ands.w	r6, r6, #8
 8001a78:	d000      	beq.n	8001a7c <HAL_ADC_ConfigChannel+0x58>
 8001a7a:	2601      	movs	r6, #1
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d13e      	bne.n	8001afe <HAL_ADC_ConfigChannel+0xda>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001a80:	2e00      	cmp	r6, #0
 8001a82:	d13c      	bne.n	8001afe <HAL_ADC_ConfigChannel+0xda>
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8001a84:	68aa      	ldr	r2, [r5, #8]
 8001a86:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8001a8a:	d06f      	beq.n	8001b6c <HAL_ADC_ConfigChannel+0x148>
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8001a8c:	6829      	ldr	r1, [r5, #0]
 8001a8e:	f7ff fe47 	bl	8001720 <LL_ADC_SetChannelSamplingTime>
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8001a92:	6822      	ldr	r2, [r4, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8001a94:	6953      	ldr	r3, [r2, #20]
 8001a96:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001a9a:	6153      	str	r3, [r2, #20]
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8001a9c:	6969      	ldr	r1, [r5, #20]
 8001a9e:	6822      	ldr	r2, [r4, #0]
 8001aa0:	68d3      	ldr	r3, [r2, #12]
 8001aa2:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8001aa6:	005b      	lsls	r3, r3, #1
 8001aa8:	4099      	lsls	r1, r3
      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001aaa:	6928      	ldr	r0, [r5, #16]
 8001aac:	2804      	cmp	r0, #4
 8001aae:	d06a      	beq.n	8001b86 <HAL_ADC_ConfigChannel+0x162>
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001ab0:	3260      	adds	r2, #96	@ 0x60
  MODIFY_REG(*preg,
 8001ab2:	f852 7020 	ldr.w	r7, [r2, r0, lsl #2]
 8001ab6:	4bab      	ldr	r3, [pc, #684]	@ (8001d64 <HAL_ADC_ConfigChannel+0x340>)
 8001ab8:	403b      	ands	r3, r7
 8001aba:	682f      	ldr	r7, [r5, #0]
 8001abc:	f007 4cf8 	and.w	ip, r7, #2080374784	@ 0x7c000000
 8001ac0:	ea41 010c 	orr.w	r1, r1, ip
 8001ac4:	430b      	orrs	r3, r1
 8001ac6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8001aca:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 8001ace:	6823      	ldr	r3, [r4, #0]
 8001ad0:	6928      	ldr	r0, [r5, #16]
 8001ad2:	69aa      	ldr	r2, [r5, #24]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001ad4:	3360      	adds	r3, #96	@ 0x60
  MODIFY_REG(*preg,
 8001ad6:	f853 1020 	ldr.w	r1, [r3, r0, lsl #2]
 8001ada:	f021 7180 	bic.w	r1, r1, #16777216	@ 0x1000000
 8001ade:	430a      	orrs	r2, r1
 8001ae0:	f843 2020 	str.w	r2, [r3, r0, lsl #2]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8001ae4:	6823      	ldr	r3, [r4, #0]
 8001ae6:	6929      	ldr	r1, [r5, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 8001ae8:	7f2a      	ldrb	r2, [r5, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8001aea:	2a01      	cmp	r2, #1
 8001aec:	d048      	beq.n	8001b80 <HAL_ADC_ConfigChannel+0x15c>
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001aee:	3360      	adds	r3, #96	@ 0x60
  MODIFY_REG(*preg,
 8001af0:	f853 2021 	ldr.w	r2, [r3, r1, lsl #2]
 8001af4:	f022 7200 	bic.w	r2, r2, #33554432	@ 0x2000000
 8001af8:	4332      	orrs	r2, r6
 8001afa:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001afe:	6822      	ldr	r2, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001b00:	6893      	ldr	r3, [r2, #8]
 8001b02:	f013 0f01 	tst.w	r3, #1
 8001b06:	d116      	bne.n	8001b36 <HAL_ADC_ConfigChannel+0x112>
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8001b08:	682b      	ldr	r3, [r5, #0]
 8001b0a:	68e8      	ldr	r0, [r5, #12]
  MODIFY_REG(ADCx->DIFSEL,
 8001b0c:	f8d2 10b0 	ldr.w	r1, [r2, #176]	@ 0xb0
 8001b10:	f3c3 0612 	ubfx	r6, r3, #0, #19
 8001b14:	ea21 0106 	bic.w	r1, r1, r6
 8001b18:	f000 0618 	and.w	r6, r0, #24
 8001b1c:	4892      	ldr	r0, [pc, #584]	@ (8001d68 <HAL_ADC_ConfigChannel+0x344>)
 8001b1e:	40f0      	lsrs	r0, r6
 8001b20:	4003      	ands	r3, r0
 8001b22:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b26:	430b      	orrs	r3, r1
 8001b28:	f8c2 30b0 	str.w	r3, [r2, #176]	@ 0xb0
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8001b2c:	68ea      	ldr	r2, [r5, #12]
 8001b2e:	4b8f      	ldr	r3, [pc, #572]	@ (8001d6c <HAL_ADC_ConfigChannel+0x348>)
 8001b30:	429a      	cmp	r2, r3
 8001b32:	f000 808f 	beq.w	8001c54 <HAL_ADC_ConfigChannel+0x230>
    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8001b36:	682b      	ldr	r3, [r5, #0]
 8001b38:	4a8d      	ldr	r2, [pc, #564]	@ (8001d70 <HAL_ADC_ConfigChannel+0x34c>)
 8001b3a:	4213      	tst	r3, r2
 8001b3c:	f000 818f 	beq.w	8001e5e <HAL_ADC_ConfigChannel+0x43a>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8001b40:	4a8c      	ldr	r2, [pc, #560]	@ (8001d74 <HAL_ADC_ConfigChannel+0x350>)
 8001b42:	6892      	ldr	r2, [r2, #8]
 8001b44:	f002 71e0 	and.w	r1, r2, #29360128	@ 0x1c00000
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8001b48:	488b      	ldr	r0, [pc, #556]	@ (8001d78 <HAL_ADC_ConfigChannel+0x354>)
 8001b4a:	4283      	cmp	r3, r0
 8001b4c:	f000 813e 	beq.w	8001dcc <HAL_ADC_ConfigChannel+0x3a8>
 8001b50:	488a      	ldr	r0, [pc, #552]	@ (8001d7c <HAL_ADC_ConfigChannel+0x358>)
 8001b52:	4283      	cmp	r3, r0
 8001b54:	f000 813a 	beq.w	8001dcc <HAL_ADC_ConfigChannel+0x3a8>
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8001b58:	4889      	ldr	r0, [pc, #548]	@ (8001d80 <HAL_ADC_ConfigChannel+0x35c>)
 8001b5a:	4283      	cmp	r3, r0
 8001b5c:	f000 815c 	beq.w	8001e18 <HAL_ADC_ConfigChannel+0x3f4>
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8001b60:	4888      	ldr	r0, [pc, #544]	@ (8001d84 <HAL_ADC_ConfigChannel+0x360>)
 8001b62:	4283      	cmp	r3, r0
 8001b64:	f000 816a 	beq.w	8001e3c <HAL_ADC_ConfigChannel+0x418>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001b68:	2000      	movs	r0, #0
 8001b6a:	e773      	b.n	8001a54 <HAL_ADC_ConfigChannel+0x30>
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	6829      	ldr	r1, [r5, #0]
 8001b70:	f7ff fdd6 	bl	8001720 <LL_ADC_SetChannelSamplingTime>
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8001b74:	6822      	ldr	r2, [r4, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8001b76:	6953      	ldr	r3, [r2, #20]
 8001b78:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8001b7c:	6153      	str	r3, [r2, #20]
}
 8001b7e:	e78d      	b.n	8001a9c <HAL_ADC_ConfigChannel+0x78>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8001b80:	f04f 7600 	mov.w	r6, #33554432	@ 0x2000000
 8001b84:	e7b3      	b.n	8001aee <HAL_ADC_ConfigChannel+0xca>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001b86:	6e13      	ldr	r3, [r2, #96]	@ 0x60
 8001b88:	6e11      	ldr	r1, [r2, #96]	@ 0x60
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001b8a:	f3c1 6184 	ubfx	r1, r1, #26, #5
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001b8e:	682b      	ldr	r3, [r5, #0]
 8001b90:	f3c3 0012 	ubfx	r0, r3, #0, #19
 8001b94:	bb78      	cbnz	r0, 8001bf6 <HAL_ADC_ConfigChannel+0x1d2>
 8001b96:	f3c3 6384 	ubfx	r3, r3, #26, #5
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001b9a:	4299      	cmp	r1, r3
 8001b9c:	d033      	beq.n	8001c06 <HAL_ADC_ConfigChannel+0x1e2>
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001b9e:	6821      	ldr	r1, [r4, #0]
 8001ba0:	6e4b      	ldr	r3, [r1, #100]	@ 0x64
 8001ba2:	6e4a      	ldr	r2, [r1, #100]	@ 0x64
 8001ba4:	f3c2 6284 	ubfx	r2, r2, #26, #5
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001ba8:	682b      	ldr	r3, [r5, #0]
 8001baa:	f3c3 0012 	ubfx	r0, r3, #0, #19
 8001bae:	bb78      	cbnz	r0, 8001c10 <HAL_ADC_ConfigChannel+0x1ec>
 8001bb0:	f3c3 6384 	ubfx	r3, r3, #26, #5
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001bb4:	429a      	cmp	r2, r3
 8001bb6:	d033      	beq.n	8001c20 <HAL_ADC_ConfigChannel+0x1fc>
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001bb8:	6821      	ldr	r1, [r4, #0]
 8001bba:	6e8b      	ldr	r3, [r1, #104]	@ 0x68
 8001bbc:	6e8a      	ldr	r2, [r1, #104]	@ 0x68
 8001bbe:	f3c2 6284 	ubfx	r2, r2, #26, #5
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001bc2:	682b      	ldr	r3, [r5, #0]
 8001bc4:	f3c3 0012 	ubfx	r0, r3, #0, #19
 8001bc8:	bb78      	cbnz	r0, 8001c2a <HAL_ADC_ConfigChannel+0x206>
 8001bca:	f3c3 6384 	ubfx	r3, r3, #26, #5
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001bce:	429a      	cmp	r2, r3
 8001bd0:	d033      	beq.n	8001c3a <HAL_ADC_ConfigChannel+0x216>
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001bd2:	6821      	ldr	r1, [r4, #0]
 8001bd4:	6ecb      	ldr	r3, [r1, #108]	@ 0x6c
 8001bd6:	6eca      	ldr	r2, [r1, #108]	@ 0x6c
 8001bd8:	f3c2 6284 	ubfx	r2, r2, #26, #5
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001bdc:	682b      	ldr	r3, [r5, #0]
 8001bde:	f3c3 0012 	ubfx	r0, r3, #0, #19
 8001be2:	bb78      	cbnz	r0, 8001c44 <HAL_ADC_ConfigChannel+0x220>
 8001be4:	f3c3 6384 	ubfx	r3, r3, #26, #5
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001be8:	429a      	cmp	r2, r3
 8001bea:	d188      	bne.n	8001afe <HAL_ADC_ConfigChannel+0xda>
  MODIFY_REG(*preg,
 8001bec:	6ecb      	ldr	r3, [r1, #108]	@ 0x6c
 8001bee:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001bf2:	66cb      	str	r3, [r1, #108]	@ 0x6c
}
 8001bf4:	e783      	b.n	8001afe <HAL_ADC_ConfigChannel+0xda>
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bf6:	fa93 f3a3 	rbit	r3, r3
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001bfa:	b113      	cbz	r3, 8001c02 <HAL_ADC_ConfigChannel+0x1de>
  {
    return 32U;
  }
  return __builtin_clz(value);
 8001bfc:	fab3 f383 	clz	r3, r3
 8001c00:	e7cb      	b.n	8001b9a <HAL_ADC_ConfigChannel+0x176>
    return 32U;
 8001c02:	2320      	movs	r3, #32
 8001c04:	e7c9      	b.n	8001b9a <HAL_ADC_ConfigChannel+0x176>
  MODIFY_REG(*preg,
 8001c06:	6e13      	ldr	r3, [r2, #96]	@ 0x60
 8001c08:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001c0c:	6613      	str	r3, [r2, #96]	@ 0x60
}
 8001c0e:	e7c6      	b.n	8001b9e <HAL_ADC_ConfigChannel+0x17a>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c10:	fa93 f3a3 	rbit	r3, r3
  if (value == 0U)
 8001c14:	b113      	cbz	r3, 8001c1c <HAL_ADC_ConfigChannel+0x1f8>
  return __builtin_clz(value);
 8001c16:	fab3 f383 	clz	r3, r3
 8001c1a:	e7cb      	b.n	8001bb4 <HAL_ADC_ConfigChannel+0x190>
    return 32U;
 8001c1c:	2320      	movs	r3, #32
 8001c1e:	e7c9      	b.n	8001bb4 <HAL_ADC_ConfigChannel+0x190>
  MODIFY_REG(*preg,
 8001c20:	6e4b      	ldr	r3, [r1, #100]	@ 0x64
 8001c22:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001c26:	664b      	str	r3, [r1, #100]	@ 0x64
}
 8001c28:	e7c6      	b.n	8001bb8 <HAL_ADC_ConfigChannel+0x194>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c2a:	fa93 f3a3 	rbit	r3, r3
  if (value == 0U)
 8001c2e:	b113      	cbz	r3, 8001c36 <HAL_ADC_ConfigChannel+0x212>
  return __builtin_clz(value);
 8001c30:	fab3 f383 	clz	r3, r3
 8001c34:	e7cb      	b.n	8001bce <HAL_ADC_ConfigChannel+0x1aa>
    return 32U;
 8001c36:	2320      	movs	r3, #32
 8001c38:	e7c9      	b.n	8001bce <HAL_ADC_ConfigChannel+0x1aa>
  MODIFY_REG(*preg,
 8001c3a:	6e8b      	ldr	r3, [r1, #104]	@ 0x68
 8001c3c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001c40:	668b      	str	r3, [r1, #104]	@ 0x68
}
 8001c42:	e7c6      	b.n	8001bd2 <HAL_ADC_ConfigChannel+0x1ae>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c44:	fa93 f3a3 	rbit	r3, r3
  if (value == 0U)
 8001c48:	b113      	cbz	r3, 8001c50 <HAL_ADC_ConfigChannel+0x22c>
  return __builtin_clz(value);
 8001c4a:	fab3 f383 	clz	r3, r3
 8001c4e:	e7cb      	b.n	8001be8 <HAL_ADC_ConfigChannel+0x1c4>
    return 32U;
 8001c50:	2320      	movs	r3, #32
 8001c52:	e7c9      	b.n	8001be8 <HAL_ADC_ConfigChannel+0x1c4>
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001c54:	6820      	ldr	r0, [r4, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8001c56:	682b      	ldr	r3, [r5, #0]
 8001c58:	f3c3 0612 	ubfx	r6, r3, #0, #19
 8001c5c:	bb26      	cbnz	r6, 8001ca8 <HAL_ADC_ConfigChannel+0x284>
 8001c5e:	0e9a      	lsrs	r2, r3, #26
 8001c60:	3201      	adds	r2, #1
 8001c62:	f002 021f 	and.w	r2, r2, #31
 8001c66:	2a09      	cmp	r2, #9
 8001c68:	bf8c      	ite	hi
 8001c6a:	2200      	movhi	r2, #0
 8001c6c:	2201      	movls	r2, #1
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001c6e:	2a00      	cmp	r2, #0
 8001c70:	d052      	beq.n	8001d18 <HAL_ADC_ConfigChannel+0x2f4>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8001c72:	bb46      	cbnz	r6, 8001cc6 <HAL_ADC_ConfigChannel+0x2a2>
 8001c74:	0e99      	lsrs	r1, r3, #26
 8001c76:	3101      	adds	r1, #1
 8001c78:	0689      	lsls	r1, r1, #26
 8001c7a:	f001 41f8 	and.w	r1, r1, #2080374784	@ 0x7c000000
 8001c7e:	bb76      	cbnz	r6, 8001cde <HAL_ADC_ConfigChannel+0x2ba>
 8001c80:	0e9f      	lsrs	r7, r3, #26
 8001c82:	3701      	adds	r7, #1
 8001c84:	f007 071f 	and.w	r7, r7, #31
 8001c88:	2201      	movs	r2, #1
 8001c8a:	40ba      	lsls	r2, r7
 8001c8c:	4311      	orrs	r1, r2
 8001c8e:	bbae      	cbnz	r6, 8001cfc <HAL_ADC_ConfigChannel+0x2d8>
 8001c90:	0e9b      	lsrs	r3, r3, #26
 8001c92:	3301      	adds	r3, #1
 8001c94:	f003 031f 	and.w	r3, r3, #31
 8001c98:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8001c9c:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001c9e:	4319      	orrs	r1, r3
 8001ca0:	68aa      	ldr	r2, [r5, #8]
 8001ca2:	f7ff fd3d 	bl	8001720 <LL_ADC_SetChannelSamplingTime>
 8001ca6:	e746      	b.n	8001b36 <HAL_ADC_ConfigChannel+0x112>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ca8:	fa93 f2a3 	rbit	r2, r3
  if (value == 0U)
 8001cac:	b14a      	cbz	r2, 8001cc2 <HAL_ADC_ConfigChannel+0x29e>
  return __builtin_clz(value);
 8001cae:	fab2 f282 	clz	r2, r2
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8001cb2:	3201      	adds	r2, #1
 8001cb4:	f002 021f 	and.w	r2, r2, #31
 8001cb8:	2a09      	cmp	r2, #9
 8001cba:	bf8c      	ite	hi
 8001cbc:	2200      	movhi	r2, #0
 8001cbe:	2201      	movls	r2, #1
 8001cc0:	e7d5      	b.n	8001c6e <HAL_ADC_ConfigChannel+0x24a>
    return 32U;
 8001cc2:	2220      	movs	r2, #32
 8001cc4:	e7f5      	b.n	8001cb2 <HAL_ADC_ConfigChannel+0x28e>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cc6:	fa93 f1a3 	rbit	r1, r3
  if (value == 0U)
 8001cca:	b131      	cbz	r1, 8001cda <HAL_ADC_ConfigChannel+0x2b6>
  return __builtin_clz(value);
 8001ccc:	fab1 f181 	clz	r1, r1
 8001cd0:	3101      	adds	r1, #1
 8001cd2:	0689      	lsls	r1, r1, #26
 8001cd4:	f001 41f8 	and.w	r1, r1, #2080374784	@ 0x7c000000
 8001cd8:	e7d1      	b.n	8001c7e <HAL_ADC_ConfigChannel+0x25a>
    return 32U;
 8001cda:	2120      	movs	r1, #32
 8001cdc:	e7f8      	b.n	8001cd0 <HAL_ADC_ConfigChannel+0x2ac>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cde:	fa93 f2a3 	rbit	r2, r3
  if (value == 0U)
 8001ce2:	b14a      	cbz	r2, 8001cf8 <HAL_ADC_ConfigChannel+0x2d4>
  return __builtin_clz(value);
 8001ce4:	fab2 f282 	clz	r2, r2
 8001ce8:	3201      	adds	r2, #1
 8001cea:	f002 021f 	and.w	r2, r2, #31
 8001cee:	f04f 0c01 	mov.w	ip, #1
 8001cf2:	fa0c f202 	lsl.w	r2, ip, r2
 8001cf6:	e7c9      	b.n	8001c8c <HAL_ADC_ConfigChannel+0x268>
    return 32U;
 8001cf8:	2220      	movs	r2, #32
 8001cfa:	e7f5      	b.n	8001ce8 <HAL_ADC_ConfigChannel+0x2c4>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cfc:	fa93 f3a3 	rbit	r3, r3
  if (value == 0U)
 8001d00:	b143      	cbz	r3, 8001d14 <HAL_ADC_ConfigChannel+0x2f0>
  return __builtin_clz(value);
 8001d02:	fab3 f383 	clz	r3, r3
 8001d06:	3301      	adds	r3, #1
 8001d08:	f003 031f 	and.w	r3, r3, #31
 8001d0c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8001d10:	051b      	lsls	r3, r3, #20
 8001d12:	e7c4      	b.n	8001c9e <HAL_ADC_ConfigChannel+0x27a>
    return 32U;
 8001d14:	2320      	movs	r3, #32
 8001d16:	e7f6      	b.n	8001d06 <HAL_ADC_ConfigChannel+0x2e2>
 8001d18:	b9ce      	cbnz	r6, 8001d4e <HAL_ADC_ConfigChannel+0x32a>
 8001d1a:	0e99      	lsrs	r1, r3, #26
 8001d1c:	3101      	adds	r1, #1
 8001d1e:	0689      	lsls	r1, r1, #26
 8001d20:	f001 41f8 	and.w	r1, r1, #2080374784	@ 0x7c000000
 8001d24:	bb96      	cbnz	r6, 8001d8c <HAL_ADC_ConfigChannel+0x368>
 8001d26:	0e9f      	lsrs	r7, r3, #26
 8001d28:	3701      	adds	r7, #1
 8001d2a:	f007 071f 	and.w	r7, r7, #31
 8001d2e:	2201      	movs	r2, #1
 8001d30:	40ba      	lsls	r2, r7
 8001d32:	4311      	orrs	r1, r2
 8001d34:	bbce      	cbnz	r6, 8001daa <HAL_ADC_ConfigChannel+0x386>
 8001d36:	0e9b      	lsrs	r3, r3, #26
 8001d38:	3301      	adds	r3, #1
 8001d3a:	f003 031f 	and.w	r3, r3, #31
 8001d3e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8001d42:	3b1e      	subs	r3, #30
 8001d44:	051b      	lsls	r3, r3, #20
 8001d46:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001d4a:	4319      	orrs	r1, r3
 8001d4c:	e7a8      	b.n	8001ca0 <HAL_ADC_ConfigChannel+0x27c>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d4e:	fa93 f1a3 	rbit	r1, r3
  if (value == 0U)
 8001d52:	b1c9      	cbz	r1, 8001d88 <HAL_ADC_ConfigChannel+0x364>
  return __builtin_clz(value);
 8001d54:	fab1 f181 	clz	r1, r1
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8001d58:	3101      	adds	r1, #1
 8001d5a:	0689      	lsls	r1, r1, #26
 8001d5c:	f001 41f8 	and.w	r1, r1, #2080374784	@ 0x7c000000
 8001d60:	e7e0      	b.n	8001d24 <HAL_ADC_ConfigChannel+0x300>
 8001d62:	bf00      	nop
 8001d64:	03fff000 	.word	0x03fff000
 8001d68:	0007ffff 	.word	0x0007ffff
 8001d6c:	407f0000 	.word	0x407f0000
 8001d70:	80080000 	.word	0x80080000
 8001d74:	50000300 	.word	0x50000300
 8001d78:	c3210000 	.word	0xc3210000
 8001d7c:	90c00010 	.word	0x90c00010
 8001d80:	c7520000 	.word	0xc7520000
 8001d84:	cb840000 	.word	0xcb840000
    return 32U;
 8001d88:	2120      	movs	r1, #32
 8001d8a:	e7e5      	b.n	8001d58 <HAL_ADC_ConfigChannel+0x334>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d8c:	fa93 f2a3 	rbit	r2, r3
  if (value == 0U)
 8001d90:	b14a      	cbz	r2, 8001da6 <HAL_ADC_ConfigChannel+0x382>
  return __builtin_clz(value);
 8001d92:	fab2 f282 	clz	r2, r2
 8001d96:	3201      	adds	r2, #1
 8001d98:	f002 021f 	and.w	r2, r2, #31
 8001d9c:	f04f 0c01 	mov.w	ip, #1
 8001da0:	fa0c f202 	lsl.w	r2, ip, r2
 8001da4:	e7c5      	b.n	8001d32 <HAL_ADC_ConfigChannel+0x30e>
    return 32U;
 8001da6:	2220      	movs	r2, #32
 8001da8:	e7f5      	b.n	8001d96 <HAL_ADC_ConfigChannel+0x372>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001daa:	fa93 f3a3 	rbit	r3, r3
  if (value == 0U)
 8001dae:	b15b      	cbz	r3, 8001dc8 <HAL_ADC_ConfigChannel+0x3a4>
  return __builtin_clz(value);
 8001db0:	fab3 f383 	clz	r3, r3
 8001db4:	3301      	adds	r3, #1
 8001db6:	f003 031f 	and.w	r3, r3, #31
 8001dba:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8001dbe:	3b1e      	subs	r3, #30
 8001dc0:	051b      	lsls	r3, r3, #20
 8001dc2:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001dc6:	e7c0      	b.n	8001d4a <HAL_ADC_ConfigChannel+0x326>
    return 32U;
 8001dc8:	2320      	movs	r3, #32
 8001dca:	e7f3      	b.n	8001db4 <HAL_ADC_ConfigChannel+0x390>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8001dcc:	f412 0f00 	tst.w	r2, #8388608	@ 0x800000
 8001dd0:	f47f aec2 	bne.w	8001b58 <HAL_ADC_ConfigChannel+0x134>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001dd4:	6823      	ldr	r3, [r4, #0]
 8001dd6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001dda:	d001      	beq.n	8001de0 <HAL_ADC_ConfigChannel+0x3bc>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001ddc:	2000      	movs	r0, #0
 8001dde:	e639      	b.n	8001a54 <HAL_ADC_ConfigChannel+0x30>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001de0:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8001de4:	4a23      	ldr	r2, [pc, #140]	@ (8001e74 <HAL_ADC_ConfigChannel+0x450>)
 8001de6:	6893      	ldr	r3, [r2, #8]
 8001de8:	f023 73e0 	bic.w	r3, r3, #29360128	@ 0x1c00000
 8001dec:	4319      	orrs	r1, r3
 8001dee:	6091      	str	r1, [r2, #8]
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001df0:	4b21      	ldr	r3, [pc, #132]	@ (8001e78 <HAL_ADC_ConfigChannel+0x454>)
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	099b      	lsrs	r3, r3, #6
 8001df6:	4a21      	ldr	r2, [pc, #132]	@ (8001e7c <HAL_ADC_ConfigChannel+0x458>)
 8001df8:	fba2 2303 	umull	r2, r3, r2, r3
 8001dfc:	099b      	lsrs	r3, r3, #6
 8001dfe:	3301      	adds	r3, #1
 8001e00:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8001e04:	009b      	lsls	r3, r3, #2
 8001e06:	9301      	str	r3, [sp, #4]
          while (wait_loop_index != 0UL)
 8001e08:	9b01      	ldr	r3, [sp, #4]
 8001e0a:	b11b      	cbz	r3, 8001e14 <HAL_ADC_ConfigChannel+0x3f0>
            wait_loop_index--;
 8001e0c:	9b01      	ldr	r3, [sp, #4]
 8001e0e:	3b01      	subs	r3, #1
 8001e10:	9301      	str	r3, [sp, #4]
 8001e12:	e7f9      	b.n	8001e08 <HAL_ADC_ConfigChannel+0x3e4>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001e14:	2000      	movs	r0, #0
 8001e16:	e61d      	b.n	8001a54 <HAL_ADC_ConfigChannel+0x30>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8001e18:	f012 7f80 	tst.w	r2, #16777216	@ 0x1000000
 8001e1c:	f47f aea0 	bne.w	8001b60 <HAL_ADC_ConfigChannel+0x13c>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001e20:	6822      	ldr	r2, [r4, #0]
 8001e22:	4b17      	ldr	r3, [pc, #92]	@ (8001e80 <HAL_ADC_ConfigChannel+0x45c>)
 8001e24:	429a      	cmp	r2, r3
 8001e26:	d01c      	beq.n	8001e62 <HAL_ADC_ConfigChannel+0x43e>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001e28:	f041 7180 	orr.w	r1, r1, #16777216	@ 0x1000000
 8001e2c:	4a11      	ldr	r2, [pc, #68]	@ (8001e74 <HAL_ADC_ConfigChannel+0x450>)
 8001e2e:	6893      	ldr	r3, [r2, #8]
 8001e30:	f023 73e0 	bic.w	r3, r3, #29360128	@ 0x1c00000
 8001e34:	4319      	orrs	r1, r3
 8001e36:	6091      	str	r1, [r2, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001e38:	2000      	movs	r0, #0
}
 8001e3a:	e60b      	b.n	8001a54 <HAL_ADC_ConfigChannel+0x30>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8001e3c:	f412 0f80 	tst.w	r2, #4194304	@ 0x400000
 8001e40:	d111      	bne.n	8001e66 <HAL_ADC_ConfigChannel+0x442>
        if (ADC_VREFINT_INSTANCE(hadc))
 8001e42:	6822      	ldr	r2, [r4, #0]
 8001e44:	4b0e      	ldr	r3, [pc, #56]	@ (8001e80 <HAL_ADC_ConfigChannel+0x45c>)
 8001e46:	429a      	cmp	r2, r3
 8001e48:	d00f      	beq.n	8001e6a <HAL_ADC_ConfigChannel+0x446>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001e4a:	f441 0380 	orr.w	r3, r1, #4194304	@ 0x400000
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8001e4e:	4909      	ldr	r1, [pc, #36]	@ (8001e74 <HAL_ADC_ConfigChannel+0x450>)
 8001e50:	688a      	ldr	r2, [r1, #8]
 8001e52:	f022 72e0 	bic.w	r2, r2, #29360128	@ 0x1c00000
 8001e56:	4313      	orrs	r3, r2
 8001e58:	608b      	str	r3, [r1, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001e5a:	2000      	movs	r0, #0
}
 8001e5c:	e5fa      	b.n	8001a54 <HAL_ADC_ConfigChannel+0x30>
 8001e5e:	2000      	movs	r0, #0
 8001e60:	e5f8      	b.n	8001a54 <HAL_ADC_ConfigChannel+0x30>
 8001e62:	2000      	movs	r0, #0
 8001e64:	e5f6      	b.n	8001a54 <HAL_ADC_ConfigChannel+0x30>
 8001e66:	2000      	movs	r0, #0
 8001e68:	e5f4      	b.n	8001a54 <HAL_ADC_ConfigChannel+0x30>
 8001e6a:	2000      	movs	r0, #0
 8001e6c:	e5f2      	b.n	8001a54 <HAL_ADC_ConfigChannel+0x30>
  __HAL_LOCK(hadc);
 8001e6e:	2002      	movs	r0, #2
 8001e70:	e5f3      	b.n	8001a5a <HAL_ADC_ConfigChannel+0x36>
 8001e72:	bf00      	nop
 8001e74:	50000300 	.word	0x50000300
 8001e78:	20000018 	.word	0x20000018
 8001e7c:	053e2d63 	.word	0x053e2d63
 8001e80:	50000100 	.word	0x50000100

08001e84 <ADC_Enable>:
{
 8001e84:	b530      	push	{r4, r5, lr}
 8001e86:	b083      	sub	sp, #12
  __IO uint32_t wait_loop_index = 0UL;
 8001e88:	2300      	movs	r3, #0
 8001e8a:	9301      	str	r3, [sp, #4]
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001e8c:	6803      	ldr	r3, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001e8e:	689a      	ldr	r2, [r3, #8]
 8001e90:	f012 0f01 	tst.w	r2, #1
 8001e94:	d158      	bne.n	8001f48 <ADC_Enable+0xc4>
 8001e96:	4604      	mov	r4, r0
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8001e98:	6899      	ldr	r1, [r3, #8]
 8001e9a:	4a2d      	ldr	r2, [pc, #180]	@ (8001f50 <ADC_Enable+0xcc>)
 8001e9c:	4211      	tst	r1, r2
 8001e9e:	d119      	bne.n	8001ed4 <ADC_Enable+0x50>
  MODIFY_REG(ADCx->CR,
 8001ea0:	689a      	ldr	r2, [r3, #8]
 8001ea2:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8001ea6:	f022 023f 	bic.w	r2, r2, #63	@ 0x3f
 8001eaa:	f042 0201 	orr.w	r2, r2, #1
 8001eae:	609a      	str	r2, [r3, #8]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8001eb0:	4b28      	ldr	r3, [pc, #160]	@ (8001f54 <ADC_Enable+0xd0>)
 8001eb2:	689b      	ldr	r3, [r3, #8]
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8001eb4:	f413 0f00 	tst.w	r3, #8388608	@ 0x800000
 8001eb8:	d01c      	beq.n	8001ef4 <ADC_Enable+0x70>
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001eba:	4b27      	ldr	r3, [pc, #156]	@ (8001f58 <ADC_Enable+0xd4>)
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	099b      	lsrs	r3, r3, #6
 8001ec0:	4a26      	ldr	r2, [pc, #152]	@ (8001f5c <ADC_Enable+0xd8>)
 8001ec2:	fba2 2303 	umull	r2, r3, r2, r3
 8001ec6:	099b      	lsrs	r3, r3, #6
 8001ec8:	3301      	adds	r3, #1
 8001eca:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8001ece:	009b      	lsls	r3, r3, #2
 8001ed0:	9301      	str	r3, [sp, #4]
      while (wait_loop_index != 0UL)
 8001ed2:	e00c      	b.n	8001eee <ADC_Enable+0x6a>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001ed4:	6dc3      	ldr	r3, [r0, #92]	@ 0x5c
 8001ed6:	f043 0310 	orr.w	r3, r3, #16
 8001eda:	65c3      	str	r3, [r0, #92]	@ 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001edc:	6e03      	ldr	r3, [r0, #96]	@ 0x60
 8001ede:	f043 0301 	orr.w	r3, r3, #1
 8001ee2:	6603      	str	r3, [r0, #96]	@ 0x60
      return HAL_ERROR;
 8001ee4:	2001      	movs	r0, #1
 8001ee6:	e030      	b.n	8001f4a <ADC_Enable+0xc6>
        wait_loop_index--;
 8001ee8:	9b01      	ldr	r3, [sp, #4]
 8001eea:	3b01      	subs	r3, #1
 8001eec:	9301      	str	r3, [sp, #4]
      while (wait_loop_index != 0UL)
 8001eee:	9b01      	ldr	r3, [sp, #4]
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d1f9      	bne.n	8001ee8 <ADC_Enable+0x64>
    tickstart = HAL_GetTick();
 8001ef4:	f7ff fbe2 	bl	80016bc <HAL_GetTick>
 8001ef8:	4605      	mov	r5, r0
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001efa:	6823      	ldr	r3, [r4, #0]
 8001efc:	681a      	ldr	r2, [r3, #0]
 8001efe:	f012 0f01 	tst.w	r2, #1
 8001f02:	d11f      	bne.n	8001f44 <ADC_Enable+0xc0>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001f04:	689a      	ldr	r2, [r3, #8]
 8001f06:	f012 0f01 	tst.w	r2, #1
 8001f0a:	d107      	bne.n	8001f1c <ADC_Enable+0x98>
  MODIFY_REG(ADCx->CR,
 8001f0c:	689a      	ldr	r2, [r3, #8]
 8001f0e:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8001f12:	f022 023f 	bic.w	r2, r2, #63	@ 0x3f
 8001f16:	f042 0201 	orr.w	r2, r2, #1
 8001f1a:	609a      	str	r2, [r3, #8]
      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001f1c:	f7ff fbce 	bl	80016bc <HAL_GetTick>
 8001f20:	1b43      	subs	r3, r0, r5
 8001f22:	2b02      	cmp	r3, #2
 8001f24:	d9e9      	bls.n	8001efa <ADC_Enable+0x76>
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001f26:	6823      	ldr	r3, [r4, #0]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	f013 0f01 	tst.w	r3, #1
 8001f2e:	d1e4      	bne.n	8001efa <ADC_Enable+0x76>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001f30:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 8001f32:	f043 0310 	orr.w	r3, r3, #16
 8001f36:	65e3      	str	r3, [r4, #92]	@ 0x5c
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001f38:	6e23      	ldr	r3, [r4, #96]	@ 0x60
 8001f3a:	f043 0301 	orr.w	r3, r3, #1
 8001f3e:	6623      	str	r3, [r4, #96]	@ 0x60
          return HAL_ERROR;
 8001f40:	2001      	movs	r0, #1
 8001f42:	e002      	b.n	8001f4a <ADC_Enable+0xc6>
  return HAL_OK;
 8001f44:	2000      	movs	r0, #0
 8001f46:	e000      	b.n	8001f4a <ADC_Enable+0xc6>
 8001f48:	2000      	movs	r0, #0
}
 8001f4a:	b003      	add	sp, #12
 8001f4c:	bd30      	pop	{r4, r5, pc}
 8001f4e:	bf00      	nop
 8001f50:	8000003f 	.word	0x8000003f
 8001f54:	50000300 	.word	0x50000300
 8001f58:	20000018 	.word	0x20000018
 8001f5c:	053e2d63 	.word	0x053e2d63

08001f60 <HAL_ADC_Start_DMA>:
{
 8001f60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001f62:	4604      	mov	r4, r0
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8001f64:	4b3b      	ldr	r3, [pc, #236]	@ (8002054 <HAL_ADC_Start_DMA+0xf4>)
 8001f66:	689d      	ldr	r5, [r3, #8]
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001f68:	6800      	ldr	r0, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001f6a:	6880      	ldr	r0, [r0, #8]
 8001f6c:	f010 0f04 	tst.w	r0, #4
 8001f70:	d16c      	bne.n	800204c <HAL_ADC_Start_DMA+0xec>
 8001f72:	460e      	mov	r6, r1
 8001f74:	4617      	mov	r7, r2
 8001f76:	f005 051f 	and.w	r5, r5, #31
    __HAL_LOCK(hadc);
 8001f7a:	f894 3058 	ldrb.w	r3, [r4, #88]	@ 0x58
 8001f7e:	2b01      	cmp	r3, #1
 8001f80:	d066      	beq.n	8002050 <HAL_ADC_Start_DMA+0xf0>
 8001f82:	2301      	movs	r3, #1
 8001f84:	f884 3058 	strb.w	r3, [r4, #88]	@ 0x58
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 8001f88:	2d09      	cmp	r5, #9
 8001f8a:	d805      	bhi.n	8001f98 <HAL_ADC_Start_DMA+0x38>
 8001f8c:	f240 2321 	movw	r3, #545	@ 0x221
 8001f90:	40eb      	lsrs	r3, r5
 8001f92:	f013 0f01 	tst.w	r3, #1
 8001f96:	d104      	bne.n	8001fa2 <HAL_ADC_Start_DMA+0x42>
      __HAL_UNLOCK(hadc);
 8001f98:	2300      	movs	r3, #0
 8001f9a:	f884 3058 	strb.w	r3, [r4, #88]	@ 0x58
      tmp_hal_status = HAL_ERROR;
 8001f9e:	2001      	movs	r0, #1
 8001fa0:	e055      	b.n	800204e <HAL_ADC_Start_DMA+0xee>
      tmp_hal_status = ADC_Enable(hadc);
 8001fa2:	4620      	mov	r0, r4
 8001fa4:	f7ff ff6e 	bl	8001e84 <ADC_Enable>
      if (tmp_hal_status == HAL_OK)
 8001fa8:	2800      	cmp	r0, #0
 8001faa:	d14b      	bne.n	8002044 <HAL_ADC_Start_DMA+0xe4>
        ADC_STATE_CLR_SET(hadc->State,
 8001fac:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 8001fae:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8001fb2:	f023 0301 	bic.w	r3, r3, #1
 8001fb6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001fba:	65e3      	str	r3, [r4, #92]	@ 0x5c
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001fbc:	6823      	ldr	r3, [r4, #0]
 8001fbe:	4a26      	ldr	r2, [pc, #152]	@ (8002058 <HAL_ADC_Start_DMA+0xf8>)
 8001fc0:	4293      	cmp	r3, r2
 8001fc2:	d039      	beq.n	8002038 <HAL_ADC_Start_DMA+0xd8>
 8001fc4:	461a      	mov	r2, r3
 8001fc6:	4293      	cmp	r3, r2
 8001fc8:	d000      	beq.n	8001fcc <HAL_ADC_Start_DMA+0x6c>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001fca:	b91d      	cbnz	r5, 8001fd4 <HAL_ADC_Start_DMA+0x74>
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001fcc:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 8001fce:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8001fd2:	65e3      	str	r3, [r4, #92]	@ 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8001fd4:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 8001fd6:	f413 5f80 	tst.w	r3, #4096	@ 0x1000
 8001fda:	d030      	beq.n	800203e <HAL_ADC_Start_DMA+0xde>
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001fdc:	6e23      	ldr	r3, [r4, #96]	@ 0x60
 8001fde:	f023 0306 	bic.w	r3, r3, #6
 8001fe2:	6623      	str	r3, [r4, #96]	@ 0x60
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001fe4:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8001fe6:	4a1d      	ldr	r2, [pc, #116]	@ (800205c <HAL_ADC_Start_DMA+0xfc>)
 8001fe8:	62da      	str	r2, [r3, #44]	@ 0x2c
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001fea:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8001fec:	4a1c      	ldr	r2, [pc, #112]	@ (8002060 <HAL_ADC_Start_DMA+0x100>)
 8001fee:	631a      	str	r2, [r3, #48]	@ 0x30
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001ff0:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8001ff2:	4a1c      	ldr	r2, [pc, #112]	@ (8002064 <HAL_ADC_Start_DMA+0x104>)
 8001ff4:	635a      	str	r2, [r3, #52]	@ 0x34
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001ff6:	6823      	ldr	r3, [r4, #0]
 8001ff8:	221c      	movs	r2, #28
 8001ffa:	601a      	str	r2, [r3, #0]
        __HAL_UNLOCK(hadc);
 8001ffc:	2300      	movs	r3, #0
 8001ffe:	f884 3058 	strb.w	r3, [r4, #88]	@ 0x58
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002002:	6822      	ldr	r2, [r4, #0]
 8002004:	6853      	ldr	r3, [r2, #4]
 8002006:	f043 0310 	orr.w	r3, r3, #16
 800200a:	6053      	str	r3, [r2, #4]
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 800200c:	6822      	ldr	r2, [r4, #0]
 800200e:	68d3      	ldr	r3, [r2, #12]
 8002010:	f043 0301 	orr.w	r3, r3, #1
 8002014:	60d3      	str	r3, [r2, #12]
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002016:	6821      	ldr	r1, [r4, #0]
 8002018:	463b      	mov	r3, r7
 800201a:	4632      	mov	r2, r6
 800201c:	3140      	adds	r1, #64	@ 0x40
 800201e:	6d60      	ldr	r0, [r4, #84]	@ 0x54
 8002020:	f000 fa86 	bl	8002530 <HAL_DMA_Start_IT>
        LL_ADC_REG_StartConversion(hadc->Instance);
 8002024:	6822      	ldr	r2, [r4, #0]
  MODIFY_REG(ADCx->CR,
 8002026:	6893      	ldr	r3, [r2, #8]
 8002028:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800202c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002030:	f043 0304 	orr.w	r3, r3, #4
 8002034:	6093      	str	r3, [r2, #8]
}
 8002036:	e00a      	b.n	800204e <HAL_ADC_Start_DMA+0xee>
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002038:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800203c:	e7c3      	b.n	8001fc6 <HAL_ADC_Start_DMA+0x66>
          ADC_CLEAR_ERRORCODE(hadc);
 800203e:	2300      	movs	r3, #0
 8002040:	6623      	str	r3, [r4, #96]	@ 0x60
 8002042:	e7cf      	b.n	8001fe4 <HAL_ADC_Start_DMA+0x84>
        __HAL_UNLOCK(hadc);
 8002044:	2300      	movs	r3, #0
 8002046:	f884 3058 	strb.w	r3, [r4, #88]	@ 0x58
 800204a:	e000      	b.n	800204e <HAL_ADC_Start_DMA+0xee>
    tmp_hal_status = HAL_BUSY;
 800204c:	2002      	movs	r0, #2
}
 800204e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    __HAL_LOCK(hadc);
 8002050:	2002      	movs	r0, #2
 8002052:	e7fc      	b.n	800204e <HAL_ADC_Start_DMA+0xee>
 8002054:	50000300 	.word	0x50000300
 8002058:	50000100 	.word	0x50000100
 800205c:	08001981 	.word	0x08001981
 8002060:	08001975 	.word	0x08001975
 8002064:	08001a09 	.word	0x08001a09

08002068 <ADC_Disable>:
{
 8002068:	b538      	push	{r3, r4, r5, lr}
 800206a:	4604      	mov	r4, r0
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 800206c:	6802      	ldr	r2, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 800206e:	6893      	ldr	r3, [r2, #8]
 8002070:	f013 0302 	ands.w	r3, r3, #2
 8002074:	d000      	beq.n	8002078 <ADC_Disable+0x10>
 8002076:	2301      	movs	r3, #1
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002078:	6891      	ldr	r1, [r2, #8]
 800207a:	f011 0f01 	tst.w	r1, #1
 800207e:	d039      	beq.n	80020f4 <ADC_Disable+0x8c>
      && (tmp_adc_is_disable_on_going == 0UL)
 8002080:	2b00      	cmp	r3, #0
 8002082:	d139      	bne.n	80020f8 <ADC_Disable+0x90>
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8002084:	6893      	ldr	r3, [r2, #8]
 8002086:	f003 030d 	and.w	r3, r3, #13
 800208a:	2b01      	cmp	r3, #1
 800208c:	d009      	beq.n	80020a2 <ADC_Disable+0x3a>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800208e:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 8002090:	f043 0310 	orr.w	r3, r3, #16
 8002094:	65e3      	str	r3, [r4, #92]	@ 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002096:	6e23      	ldr	r3, [r4, #96]	@ 0x60
 8002098:	f043 0301 	orr.w	r3, r3, #1
 800209c:	6623      	str	r3, [r4, #96]	@ 0x60
      return HAL_ERROR;
 800209e:	2001      	movs	r0, #1
 80020a0:	e029      	b.n	80020f6 <ADC_Disable+0x8e>
  MODIFY_REG(ADCx->CR,
 80020a2:	6893      	ldr	r3, [r2, #8]
 80020a4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80020a8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80020ac:	f043 0302 	orr.w	r3, r3, #2
 80020b0:	6093      	str	r3, [r2, #8]
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 80020b2:	6823      	ldr	r3, [r4, #0]
 80020b4:	2203      	movs	r2, #3
 80020b6:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 80020b8:	f7ff fb00 	bl	80016bc <HAL_GetTick>
 80020bc:	4605      	mov	r5, r0
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80020be:	6823      	ldr	r3, [r4, #0]
 80020c0:	689b      	ldr	r3, [r3, #8]
 80020c2:	f013 0f01 	tst.w	r3, #1
 80020c6:	d013      	beq.n	80020f0 <ADC_Disable+0x88>
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80020c8:	f7ff faf8 	bl	80016bc <HAL_GetTick>
 80020cc:	1b40      	subs	r0, r0, r5
 80020ce:	2802      	cmp	r0, #2
 80020d0:	d9f5      	bls.n	80020be <ADC_Disable+0x56>
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80020d2:	6823      	ldr	r3, [r4, #0]
 80020d4:	689b      	ldr	r3, [r3, #8]
 80020d6:	f013 0f01 	tst.w	r3, #1
 80020da:	d0f0      	beq.n	80020be <ADC_Disable+0x56>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80020dc:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 80020de:	f043 0310 	orr.w	r3, r3, #16
 80020e2:	65e3      	str	r3, [r4, #92]	@ 0x5c
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80020e4:	6e23      	ldr	r3, [r4, #96]	@ 0x60
 80020e6:	f043 0301 	orr.w	r3, r3, #1
 80020ea:	6623      	str	r3, [r4, #96]	@ 0x60
          return HAL_ERROR;
 80020ec:	2001      	movs	r0, #1
 80020ee:	e002      	b.n	80020f6 <ADC_Disable+0x8e>
  return HAL_OK;
 80020f0:	2000      	movs	r0, #0
 80020f2:	e000      	b.n	80020f6 <ADC_Disable+0x8e>
 80020f4:	2000      	movs	r0, #0
}
 80020f6:	bd38      	pop	{r3, r4, r5, pc}
  return HAL_OK;
 80020f8:	2000      	movs	r0, #0
 80020fa:	e7fc      	b.n	80020f6 <ADC_Disable+0x8e>

080020fc <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 80020fc:	b530      	push	{r4, r5, lr}
 80020fe:	b083      	sub	sp, #12
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8002100:	2300      	movs	r3, #0
 8002102:	9301      	str	r3, [sp, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002104:	f890 3058 	ldrb.w	r3, [r0, #88]	@ 0x58
 8002108:	2b01      	cmp	r3, #1
 800210a:	d041      	beq.n	8002190 <HAL_ADCEx_Calibration_Start+0x94>
 800210c:	4604      	mov	r4, r0
 800210e:	460d      	mov	r5, r1
 8002110:	2301      	movs	r3, #1
 8002112:	f880 3058 	strb.w	r3, [r0, #88]	@ 0x58

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8002116:	f7ff ffa7 	bl	8002068 <ADC_Disable>

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 800211a:	bb80      	cbnz	r0, 800217e <HAL_ADCEx_Calibration_Start+0x82>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800211c:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 800211e:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8002122:	f023 0302 	bic.w	r3, r3, #2
 8002126:	f043 0302 	orr.w	r3, r3, #2
 800212a:	65e3      	str	r3, [r4, #92]	@ 0x5c
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 800212c:	6822      	ldr	r2, [r4, #0]
  MODIFY_REG(ADCx->CR,
 800212e:	6893      	ldr	r3, [r2, #8]
 8002130:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 8002134:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002138:	f005 4580 	and.w	r5, r5, #1073741824	@ 0x40000000
 800213c:	432b      	orrs	r3, r5
 800213e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8002142:	6093      	str	r3, [r2, #8]

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8002144:	6823      	ldr	r3, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8002146:	689b      	ldr	r3, [r3, #8]
 8002148:	2b00      	cmp	r3, #0
 800214a:	db06      	blt.n	800215a <HAL_ADCEx_Calibration_Start+0x5e>
        return HAL_ERROR;
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800214c:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 800214e:	f023 0303 	bic.w	r3, r3, #3
 8002152:	f043 0301 	orr.w	r3, r3, #1
 8002156:	65e3      	str	r3, [r4, #92]	@ 0x5c
 8002158:	e015      	b.n	8002186 <HAL_ADCEx_Calibration_Start+0x8a>
      wait_loop_index++;
 800215a:	9b01      	ldr	r3, [sp, #4]
 800215c:	3301      	adds	r3, #1
 800215e:	9301      	str	r3, [sp, #4]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8002160:	9a01      	ldr	r2, [sp, #4]
 8002162:	4b0c      	ldr	r3, [pc, #48]	@ (8002194 <HAL_ADCEx_Calibration_Start+0x98>)
 8002164:	429a      	cmp	r2, r3
 8002166:	d9ed      	bls.n	8002144 <HAL_ADCEx_Calibration_Start+0x48>
        ADC_STATE_CLR_SET(hadc->State,
 8002168:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 800216a:	f023 0312 	bic.w	r3, r3, #18
 800216e:	f043 0310 	orr.w	r3, r3, #16
 8002172:	65e3      	str	r3, [r4, #92]	@ 0x5c
        __HAL_UNLOCK(hadc);
 8002174:	2300      	movs	r3, #0
 8002176:	f884 3058 	strb.w	r3, [r4, #88]	@ 0x58
        return HAL_ERROR;
 800217a:	2001      	movs	r0, #1
 800217c:	e006      	b.n	800218c <HAL_ADCEx_Calibration_Start+0x90>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800217e:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 8002180:	f043 0310 	orr.w	r3, r3, #16
 8002184:	65e3      	str	r3, [r4, #92]	@ 0x5c
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002186:	2300      	movs	r3, #0
 8002188:	f884 3058 	strb.w	r3, [r4, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
}
 800218c:	b003      	add	sp, #12
 800218e:	bd30      	pop	{r4, r5, pc}
  __HAL_LOCK(hadc);
 8002190:	2002      	movs	r0, #2
 8002192:	e7fb      	b.n	800218c <HAL_ADCEx_Calibration_Start+0x90>
 8002194:	0004de01 	.word	0x0004de01

08002198 <HAL_ADCEx_MultiModeConfigChannel>:
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002198:	f890 2058 	ldrb.w	r2, [r0, #88]	@ 0x58
 800219c:	2a01      	cmp	r2, #1
 800219e:	f000 8081 	beq.w	80022a4 <HAL_ADCEx_MultiModeConfigChannel+0x10c>
{
 80021a2:	b410      	push	{r4}
 80021a4:	b09d      	sub	sp, #116	@ 0x74
 80021a6:	4603      	mov	r3, r0
  __HAL_LOCK(hadc);
 80021a8:	2201      	movs	r2, #1
 80021aa:	f880 2058 	strb.w	r2, [r0, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 80021ae:	2200      	movs	r2, #0
 80021b0:	9218      	str	r2, [sp, #96]	@ 0x60
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 80021b2:	9219      	str	r2, [sp, #100]	@ 0x64

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 80021b4:	6800      	ldr	r0, [r0, #0]
 80021b6:	f1b0 4fa0 	cmp.w	r0, #1342177280	@ 0x50000000
 80021ba:	d038      	beq.n	800222e <HAL_ADCEx_MultiModeConfigChannel+0x96>
 80021bc:	2200      	movs	r2, #0
 80021be:	9201      	str	r2, [sp, #4]

  if (tmp_hadc_slave.Instance == NULL)
 80021c0:	9a01      	ldr	r2, [sp, #4]
 80021c2:	2a00      	cmp	r2, #0
 80021c4:	d036      	beq.n	8002234 <HAL_ADCEx_MultiModeConfigChannel+0x9c>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80021c6:	6892      	ldr	r2, [r2, #8]
 80021c8:	f012 0204 	ands.w	r2, r2, #4
 80021cc:	d000      	beq.n	80021d0 <HAL_ADCEx_MultiModeConfigChannel+0x38>
 80021ce:	2201      	movs	r2, #1
 80021d0:	6880      	ldr	r0, [r0, #8]
 80021d2:	f010 0f04 	tst.w	r0, #4
 80021d6:	d151      	bne.n	800227c <HAL_ADCEx_MultiModeConfigChannel+0xe4>
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 80021d8:	2a00      	cmp	r2, #0
 80021da:	d14f      	bne.n	800227c <HAL_ADCEx_MultiModeConfigChannel+0xe4>
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80021dc:	680a      	ldr	r2, [r1, #0]
 80021de:	2a00      	cmp	r2, #0
 80021e0:	d031      	beq.n	8002246 <HAL_ADCEx_MultiModeConfigChannel+0xae>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 80021e2:	4c31      	ldr	r4, [pc, #196]	@ (80022a8 <HAL_ADCEx_MultiModeConfigChannel+0x110>)
 80021e4:	68a2      	ldr	r2, [r4, #8]
 80021e6:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 80021ea:	6848      	ldr	r0, [r1, #4]
 80021ec:	f893 c038 	ldrb.w	ip, [r3, #56]	@ 0x38
 80021f0:	ea40 304c 	orr.w	r0, r0, ip, lsl #13
 80021f4:	4302      	orrs	r2, r0
 80021f6:	60a2      	str	r2, [r4, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80021f8:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 80021fc:	6892      	ldr	r2, [r2, #8]
 80021fe:	f012 0201 	ands.w	r2, r2, #1
 8002202:	d000      	beq.n	8002206 <HAL_ADCEx_MultiModeConfigChannel+0x6e>
 8002204:	2201      	movs	r2, #1
 8002206:	4829      	ldr	r0, [pc, #164]	@ (80022ac <HAL_ADCEx_MultiModeConfigChannel+0x114>)
 8002208:	6880      	ldr	r0, [r0, #8]
 800220a:	f010 0f01 	tst.w	r0, #1
 800220e:	d141      	bne.n	8002294 <HAL_ADCEx_MultiModeConfigChannel+0xfc>
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002210:	2a00      	cmp	r2, #0
 8002212:	d141      	bne.n	8002298 <HAL_ADCEx_MultiModeConfigChannel+0x100>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8002214:	4c24      	ldr	r4, [pc, #144]	@ (80022a8 <HAL_ADCEx_MultiModeConfigChannel+0x110>)
 8002216:	68a2      	ldr	r2, [r4, #8]
 8002218:	f422 6271 	bic.w	r2, r2, #3856	@ 0xf10
 800221c:	f022 020f 	bic.w	r2, r2, #15
 8002220:	6808      	ldr	r0, [r1, #0]
 8002222:	6889      	ldr	r1, [r1, #8]
 8002224:	4301      	orrs	r1, r0
 8002226:	430a      	orrs	r2, r1
 8002228:	60a2      	str	r2, [r4, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800222a:	2000      	movs	r0, #0
 800222c:	e02b      	b.n	8002286 <HAL_ADCEx_MultiModeConfigChannel+0xee>
  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 800222e:	4a1f      	ldr	r2, [pc, #124]	@ (80022ac <HAL_ADCEx_MultiModeConfigChannel+0x114>)
 8002230:	9201      	str	r2, [sp, #4]
 8002232:	e7c5      	b.n	80021c0 <HAL_ADCEx_MultiModeConfigChannel+0x28>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002234:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002236:	f042 0220 	orr.w	r2, r2, #32
 800223a:	65da      	str	r2, [r3, #92]	@ 0x5c
    __HAL_UNLOCK(hadc);
 800223c:	2200      	movs	r2, #0
 800223e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
    return HAL_ERROR;
 8002242:	2001      	movs	r0, #1
 8002244:	e022      	b.n	800228c <HAL_ADCEx_MultiModeConfigChannel+0xf4>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8002246:	4918      	ldr	r1, [pc, #96]	@ (80022a8 <HAL_ADCEx_MultiModeConfigChannel+0x110>)
 8002248:	688a      	ldr	r2, [r1, #8]
 800224a:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 800224e:	608a      	str	r2, [r1, #8]
 8002250:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8002254:	6892      	ldr	r2, [r2, #8]
 8002256:	f012 0201 	ands.w	r2, r2, #1
 800225a:	d000      	beq.n	800225e <HAL_ADCEx_MultiModeConfigChannel+0xc6>
 800225c:	2201      	movs	r2, #1
 800225e:	4913      	ldr	r1, [pc, #76]	@ (80022ac <HAL_ADCEx_MultiModeConfigChannel+0x114>)
 8002260:	6889      	ldr	r1, [r1, #8]
 8002262:	f011 0f01 	tst.w	r1, #1
 8002266:	d119      	bne.n	800229c <HAL_ADCEx_MultiModeConfigChannel+0x104>

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002268:	b9d2      	cbnz	r2, 80022a0 <HAL_ADCEx_MultiModeConfigChannel+0x108>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800226a:	490f      	ldr	r1, [pc, #60]	@ (80022a8 <HAL_ADCEx_MultiModeConfigChannel+0x110>)
 800226c:	688a      	ldr	r2, [r1, #8]
 800226e:	f422 6271 	bic.w	r2, r2, #3856	@ 0xf10
 8002272:	f022 020f 	bic.w	r2, r2, #15
 8002276:	608a      	str	r2, [r1, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002278:	2000      	movs	r0, #0
 800227a:	e004      	b.n	8002286 <HAL_ADCEx_MultiModeConfigChannel+0xee>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800227c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800227e:	f042 0220 	orr.w	r2, r2, #32
 8002282:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8002284:	2001      	movs	r0, #1
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002286:	2200      	movs	r2, #0
 8002288:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
}
 800228c:	b01d      	add	sp, #116	@ 0x74
 800228e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002292:	4770      	bx	lr
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002294:	2000      	movs	r0, #0
 8002296:	e7f6      	b.n	8002286 <HAL_ADCEx_MultiModeConfigChannel+0xee>
 8002298:	2000      	movs	r0, #0
 800229a:	e7f4      	b.n	8002286 <HAL_ADCEx_MultiModeConfigChannel+0xee>
 800229c:	2000      	movs	r0, #0
 800229e:	e7f2      	b.n	8002286 <HAL_ADCEx_MultiModeConfigChannel+0xee>
 80022a0:	2000      	movs	r0, #0
 80022a2:	e7f0      	b.n	8002286 <HAL_ADCEx_MultiModeConfigChannel+0xee>
  __HAL_LOCK(hadc);
 80022a4:	2002      	movs	r0, #2
}
 80022a6:	4770      	bx	lr
 80022a8:	50000300 	.word	0x50000300
 80022ac:	50000100 	.word	0x50000100

080022b0 <__NVIC_EnableIRQ>:
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
 80022b0:	2800      	cmp	r0, #0
 80022b2:	db07      	blt.n	80022c4 <__NVIC_EnableIRQ+0x14>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80022b4:	f000 021f 	and.w	r2, r0, #31
 80022b8:	0940      	lsrs	r0, r0, #5
 80022ba:	2301      	movs	r3, #1
 80022bc:	4093      	lsls	r3, r2
 80022be:	4a02      	ldr	r2, [pc, #8]	@ (80022c8 <__NVIC_EnableIRQ+0x18>)
 80022c0:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80022c4:	4770      	bx	lr
 80022c6:	bf00      	nop
 80022c8:	e000e100 	.word	0xe000e100

080022cc <__NVIC_SetPriority>:
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
 80022cc:	2800      	cmp	r0, #0
 80022ce:	db08      	blt.n	80022e2 <__NVIC_SetPriority+0x16>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022d0:	0109      	lsls	r1, r1, #4
 80022d2:	b2c9      	uxtb	r1, r1
 80022d4:	f100 4060 	add.w	r0, r0, #3758096384	@ 0xe0000000
 80022d8:	f500 4061 	add.w	r0, r0, #57600	@ 0xe100
 80022dc:	f880 1300 	strb.w	r1, [r0, #768]	@ 0x300
 80022e0:	4770      	bx	lr
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022e2:	f000 000f 	and.w	r0, r0, #15
 80022e6:	0109      	lsls	r1, r1, #4
 80022e8:	b2c9      	uxtb	r1, r1
 80022ea:	4b01      	ldr	r3, [pc, #4]	@ (80022f0 <__NVIC_SetPriority+0x24>)
 80022ec:	5419      	strb	r1, [r3, r0]
  }
}
 80022ee:	4770      	bx	lr
 80022f0:	e000ed14 	.word	0xe000ed14

080022f4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80022f4:	b500      	push	{lr}
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80022f6:	f000 0007 	and.w	r0, r0, #7
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80022fa:	f1c0 0c07 	rsb	ip, r0, #7
 80022fe:	f1bc 0f04 	cmp.w	ip, #4
 8002302:	bf28      	it	cs
 8002304:	f04f 0c04 	movcs.w	ip, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002308:	1d03      	adds	r3, r0, #4
 800230a:	2b06      	cmp	r3, #6
 800230c:	d90f      	bls.n	800232e <NVIC_EncodePriority+0x3a>
 800230e:	1ec3      	subs	r3, r0, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002310:	f04f 3eff 	mov.w	lr, #4294967295	@ 0xffffffff
 8002314:	fa0e f00c 	lsl.w	r0, lr, ip
 8002318:	ea21 0100 	bic.w	r1, r1, r0
 800231c:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800231e:	fa0e fe03 	lsl.w	lr, lr, r3
 8002322:	ea22 020e 	bic.w	r2, r2, lr
         );
}
 8002326:	ea41 0002 	orr.w	r0, r1, r2
 800232a:	f85d fb04 	ldr.w	pc, [sp], #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800232e:	2300      	movs	r3, #0
 8002330:	e7ee      	b.n	8002310 <NVIC_EncodePriority+0x1c>
	...

08002334 <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002334:	4a07      	ldr	r2, [pc, #28]	@ (8002354 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8002336:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002338:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 800233c:	041b      	lsls	r3, r3, #16
 800233e:	0c1b      	lsrs	r3, r3, #16
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002340:	0200      	lsls	r0, r0, #8
 8002342:	f400 60e0 	and.w	r0, r0, #1792	@ 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002346:	4303      	orrs	r3, r0
  reg_value  =  (reg_value                                   |
 8002348:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800234c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
  SCB->AIRCR =  reg_value;
 8002350:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8002352:	4770      	bx	lr
 8002354:	e000ed00 	.word	0xe000ed00

08002358 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002358:	b510      	push	{r4, lr}
 800235a:	4604      	mov	r4, r0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800235c:	4b05      	ldr	r3, [pc, #20]	@ (8002374 <HAL_NVIC_SetPriority+0x1c>)
 800235e:	68d8      	ldr	r0, [r3, #12]
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002360:	f3c0 2002 	ubfx	r0, r0, #8, #3
 8002364:	f7ff ffc6 	bl	80022f4 <NVIC_EncodePriority>
 8002368:	4601      	mov	r1, r0
 800236a:	4620      	mov	r0, r4
 800236c:	f7ff ffae 	bl	80022cc <__NVIC_SetPriority>
}
 8002370:	bd10      	pop	{r4, pc}
 8002372:	bf00      	nop
 8002374:	e000ed00 	.word	0xe000ed00

08002378 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002378:	b508      	push	{r3, lr}
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800237a:	f7ff ff99 	bl	80022b0 <__NVIC_EnableIRQ>
}
 800237e:	bd08      	pop	{r3, pc}

08002380 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002380:	3801      	subs	r0, #1
 8002382:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8002386:	d20b      	bcs.n	80023a0 <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002388:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800238c:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800238e:	4a05      	ldr	r2, [pc, #20]	@ (80023a4 <HAL_SYSTICK_Config+0x24>)
 8002390:	21f0      	movs	r1, #240	@ 0xf0
 8002392:	f882 1023 	strb.w	r1, [r2, #35]	@ 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002396:	2000      	movs	r0, #0
 8002398:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800239a:	2207      	movs	r2, #7
 800239c:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800239e:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80023a0:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80023a2:	4770      	bx	lr
 80023a4:	e000ed00 	.word	0xe000ed00

080023a8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80023a8:	b430      	push	{r4, r5}
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80023aa:	6cc4      	ldr	r4, [r0, #76]	@ 0x4c
 80023ac:	6d05      	ldr	r5, [r0, #80]	@ 0x50
 80023ae:	6065      	str	r5, [r4, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 80023b0:	6d44      	ldr	r4, [r0, #84]	@ 0x54
 80023b2:	b114      	cbz	r4, 80023ba <DMA_SetConfig+0x12>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80023b4:	6d84      	ldr	r4, [r0, #88]	@ 0x58
 80023b6:	6dc5      	ldr	r5, [r0, #92]	@ 0x5c
 80023b8:	6065      	str	r5, [r4, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80023ba:	6c44      	ldr	r4, [r0, #68]	@ 0x44
 80023bc:	f004 0c1f 	and.w	ip, r4, #31
 80023c0:	2401      	movs	r4, #1
 80023c2:	fa04 f40c 	lsl.w	r4, r4, ip
 80023c6:	6c05      	ldr	r5, [r0, #64]	@ 0x40
 80023c8:	606c      	str	r4, [r5, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80023ca:	6804      	ldr	r4, [r0, #0]
 80023cc:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80023ce:	6883      	ldr	r3, [r0, #8]
 80023d0:	2b10      	cmp	r3, #16
 80023d2:	d005      	beq.n	80023e0 <DMA_SetConfig+0x38>
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 80023d4:	6803      	ldr	r3, [r0, #0]
 80023d6:	6099      	str	r1, [r3, #8]

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 80023d8:	6803      	ldr	r3, [r0, #0]
 80023da:	60da      	str	r2, [r3, #12]
  }
}
 80023dc:	bc30      	pop	{r4, r5}
 80023de:	4770      	bx	lr
    hdma->Instance->CPAR = DstAddress;
 80023e0:	6803      	ldr	r3, [r0, #0]
 80023e2:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = SrcAddress;
 80023e4:	6803      	ldr	r3, [r0, #0]
 80023e6:	60d9      	str	r1, [r3, #12]
 80023e8:	e7f8      	b.n	80023dc <DMA_SetConfig+0x34>
	...

080023ec <DMA_CalcDMAMUXChannelBaseAndMask>:
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 80023ec:	6803      	ldr	r3, [r0, #0]
 80023ee:	4a0c      	ldr	r2, [pc, #48]	@ (8002420 <DMA_CalcDMAMUXChannelBaseAndMask+0x34>)
 80023f0:	4293      	cmp	r3, r2
 80023f2:	d813      	bhi.n	800241c <DMA_CalcDMAMUXChannelBaseAndMask+0x30>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 80023f4:	490b      	ldr	r1, [pc, #44]	@ (8002424 <DMA_CalcDMAMUXChannelBaseAndMask+0x38>)
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80023f6:	b2db      	uxtb	r3, r3
 80023f8:	3b08      	subs	r3, #8
 80023fa:	4a0b      	ldr	r2, [pc, #44]	@ (8002428 <DMA_CalcDMAMUXChannelBaseAndMask+0x3c>)
 80023fc:	fba2 2303 	umull	r2, r3, r2, r3
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8002400:	6c42      	ldr	r2, [r0, #68]	@ 0x44
 8002402:	f022 0203 	bic.w	r2, r2, #3
 8002406:	440a      	add	r2, r1
 8002408:	6482      	str	r2, [r0, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800240a:	4a08      	ldr	r2, [pc, #32]	@ (800242c <DMA_CalcDMAMUXChannelBaseAndMask+0x40>)
 800240c:	64c2      	str	r2, [r0, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 800240e:	f3c3 1304 	ubfx	r3, r3, #4, #5
 8002412:	2201      	movs	r2, #1
 8002414:	fa02 f303 	lsl.w	r3, r2, r3
 8002418:	6503      	str	r3, [r0, #80]	@ 0x50
}
 800241a:	4770      	bx	lr
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
 800241c:	4904      	ldr	r1, [pc, #16]	@ (8002430 <DMA_CalcDMAMUXChannelBaseAndMask+0x44>)
 800241e:	e7ea      	b.n	80023f6 <DMA_CalcDMAMUXChannelBaseAndMask+0xa>
 8002420:	40020407 	.word	0x40020407
 8002424:	40020800 	.word	0x40020800
 8002428:	cccccccd 	.word	0xcccccccd
 800242c:	40020880 	.word	0x40020880
 8002430:	40020820 	.word	0x40020820

08002434 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8002434:	7903      	ldrb	r3, [r0, #4]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8002436:	4a07      	ldr	r2, [pc, #28]	@ (8002454 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x20>)
 8002438:	441a      	add	r2, r3
 800243a:	0092      	lsls	r2, r2, #2
 800243c:	6542      	str	r2, [r0, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800243e:	4a06      	ldr	r2, [pc, #24]	@ (8002458 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x24>)
 8002440:	6582      	str	r2, [r0, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8002442:	3b01      	subs	r3, #1
 8002444:	f003 031f 	and.w	r3, r3, #31
 8002448:	2201      	movs	r2, #1
 800244a:	fa02 f303 	lsl.w	r3, r2, r3
 800244e:	65c3      	str	r3, [r0, #92]	@ 0x5c
}
 8002450:	4770      	bx	lr
 8002452:	bf00      	nop
 8002454:	1000823f 	.word	0x1000823f
 8002458:	40020940 	.word	0x40020940

0800245c <HAL_DMA_Init>:
  if (hdma == NULL)
 800245c:	2800      	cmp	r0, #0
 800245e:	d059      	beq.n	8002514 <HAL_DMA_Init+0xb8>
{
 8002460:	b510      	push	{r4, lr}
 8002462:	4604      	mov	r4, r0
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8002464:	6802      	ldr	r2, [r0, #0]
 8002466:	4b2c      	ldr	r3, [pc, #176]	@ (8002518 <HAL_DMA_Init+0xbc>)
 8002468:	429a      	cmp	r2, r3
 800246a:	d83b      	bhi.n	80024e4 <HAL_DMA_Init+0x88>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800246c:	4b2b      	ldr	r3, [pc, #172]	@ (800251c <HAL_DMA_Init+0xc0>)
 800246e:	4413      	add	r3, r2
 8002470:	492b      	ldr	r1, [pc, #172]	@ (8002520 <HAL_DMA_Init+0xc4>)
 8002472:	fba1 1303 	umull	r1, r3, r1, r3
 8002476:	091b      	lsrs	r3, r3, #4
 8002478:	009b      	lsls	r3, r3, #2
 800247a:	6443      	str	r3, [r0, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 800247c:	4b29      	ldr	r3, [pc, #164]	@ (8002524 <HAL_DMA_Init+0xc8>)
 800247e:	6403      	str	r3, [r0, #64]	@ 0x40
  hdma->State = HAL_DMA_STATE_BUSY;
 8002480:	2302      	movs	r3, #2
 8002482:	f884 3025 	strb.w	r3, [r4, #37]	@ 0x25
  tmp = hdma->Instance->CCR;
 8002486:	6811      	ldr	r1, [r2, #0]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8002488:	f36f 110e 	bfc	r1, #4, #11
  tmp |=  hdma->Init.Direction        |
 800248c:	68a3      	ldr	r3, [r4, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800248e:	68e0      	ldr	r0, [r4, #12]
  tmp |=  hdma->Init.Direction        |
 8002490:	4303      	orrs	r3, r0
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002492:	6920      	ldr	r0, [r4, #16]
 8002494:	4303      	orrs	r3, r0
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002496:	6960      	ldr	r0, [r4, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002498:	4303      	orrs	r3, r0
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800249a:	69a0      	ldr	r0, [r4, #24]
 800249c:	4303      	orrs	r3, r0
          hdma->Init.Mode                | hdma->Init.Priority;
 800249e:	69e0      	ldr	r0, [r4, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80024a0:	4303      	orrs	r3, r0
          hdma->Init.Mode                | hdma->Init.Priority;
 80024a2:	6a20      	ldr	r0, [r4, #32]
 80024a4:	4303      	orrs	r3, r0
  tmp |=  hdma->Init.Direction        |
 80024a6:	430b      	orrs	r3, r1
  hdma->Instance->CCR = tmp;
 80024a8:	6013      	str	r3, [r2, #0]
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80024aa:	4620      	mov	r0, r4
 80024ac:	f7ff ff9e 	bl	80023ec <DMA_CalcDMAMUXChannelBaseAndMask>
  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80024b0:	68a3      	ldr	r3, [r4, #8]
 80024b2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80024b6:	d020      	beq.n	80024fa <HAL_DMA_Init+0x9e>
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80024b8:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 80024ba:	7922      	ldrb	r2, [r4, #4]
 80024bc:	601a      	str	r2, [r3, #0]
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80024be:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 80024c0:	6d22      	ldr	r2, [r4, #80]	@ 0x50
 80024c2:	605a      	str	r2, [r3, #4]
  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80024c4:	6863      	ldr	r3, [r4, #4]
 80024c6:	3b01      	subs	r3, #1
 80024c8:	2b03      	cmp	r3, #3
 80024ca:	d919      	bls.n	8002500 <HAL_DMA_Init+0xa4>
    hdma->DMAmuxRequestGen = 0U;
 80024cc:	2300      	movs	r3, #0
 80024ce:	6563      	str	r3, [r4, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 80024d0:	65a3      	str	r3, [r4, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80024d2:	65e3      	str	r3, [r4, #92]	@ 0x5c
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80024d4:	2000      	movs	r0, #0
 80024d6:	63e0      	str	r0, [r4, #60]	@ 0x3c
  hdma->State  = HAL_DMA_STATE_READY;
 80024d8:	2301      	movs	r3, #1
 80024da:	f884 3025 	strb.w	r3, [r4, #37]	@ 0x25
  hdma->Lock = HAL_UNLOCKED;
 80024de:	f884 0024 	strb.w	r0, [r4, #36]	@ 0x24
}
 80024e2:	bd10      	pop	{r4, pc}
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 80024e4:	4b10      	ldr	r3, [pc, #64]	@ (8002528 <HAL_DMA_Init+0xcc>)
 80024e6:	4413      	add	r3, r2
 80024e8:	490d      	ldr	r1, [pc, #52]	@ (8002520 <HAL_DMA_Init+0xc4>)
 80024ea:	fba1 1303 	umull	r1, r3, r1, r3
 80024ee:	091b      	lsrs	r3, r3, #4
 80024f0:	009b      	lsls	r3, r3, #2
 80024f2:	6443      	str	r3, [r0, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 80024f4:	4b0d      	ldr	r3, [pc, #52]	@ (800252c <HAL_DMA_Init+0xd0>)
 80024f6:	6403      	str	r3, [r0, #64]	@ 0x40
 80024f8:	e7c2      	b.n	8002480 <HAL_DMA_Init+0x24>
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80024fa:	2300      	movs	r3, #0
 80024fc:	6063      	str	r3, [r4, #4]
 80024fe:	e7db      	b.n	80024b8 <HAL_DMA_Init+0x5c>
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8002500:	4620      	mov	r0, r4
 8002502:	f7ff ff97 	bl	8002434 <DMA_CalcDMAMUXRequestGenBaseAndMask>
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8002506:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8002508:	2200      	movs	r2, #0
 800250a:	601a      	str	r2, [r3, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800250c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800250e:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 8002510:	605a      	str	r2, [r3, #4]
 8002512:	e7df      	b.n	80024d4 <HAL_DMA_Init+0x78>
    return HAL_ERROR;
 8002514:	2001      	movs	r0, #1
}
 8002516:	4770      	bx	lr
 8002518:	40020407 	.word	0x40020407
 800251c:	bffdfff8 	.word	0xbffdfff8
 8002520:	cccccccd 	.word	0xcccccccd
 8002524:	40020000 	.word	0x40020000
 8002528:	bffdfbf8 	.word	0xbffdfbf8
 800252c:	40020400 	.word	0x40020400

08002530 <HAL_DMA_Start_IT>:
{
 8002530:	b538      	push	{r3, r4, r5, lr}
 8002532:	4604      	mov	r4, r0
  __HAL_LOCK(hdma);
 8002534:	f890 0024 	ldrb.w	r0, [r0, #36]	@ 0x24
 8002538:	2801      	cmp	r0, #1
 800253a:	d041      	beq.n	80025c0 <HAL_DMA_Start_IT+0x90>
 800253c:	2001      	movs	r0, #1
 800253e:	f884 0024 	strb.w	r0, [r4, #36]	@ 0x24
  if (HAL_DMA_STATE_READY == hdma->State)
 8002542:	f894 0025 	ldrb.w	r0, [r4, #37]	@ 0x25
 8002546:	b2c0      	uxtb	r0, r0
 8002548:	2801      	cmp	r0, #1
 800254a:	d004      	beq.n	8002556 <HAL_DMA_Start_IT+0x26>
    __HAL_UNLOCK(hdma);
 800254c:	2300      	movs	r3, #0
 800254e:	f884 3024 	strb.w	r3, [r4, #36]	@ 0x24
    status = HAL_BUSY;
 8002552:	2002      	movs	r0, #2
}
 8002554:	bd38      	pop	{r3, r4, r5, pc}
    hdma->State = HAL_DMA_STATE_BUSY;
 8002556:	2002      	movs	r0, #2
 8002558:	f884 0025 	strb.w	r0, [r4, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800255c:	2000      	movs	r0, #0
 800255e:	63e0      	str	r0, [r4, #60]	@ 0x3c
    __HAL_DMA_DISABLE(hdma);
 8002560:	6825      	ldr	r5, [r4, #0]
 8002562:	6828      	ldr	r0, [r5, #0]
 8002564:	f020 0001 	bic.w	r0, r0, #1
 8002568:	6028      	str	r0, [r5, #0]
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800256a:	4620      	mov	r0, r4
 800256c:	f7ff ff1c 	bl	80023a8 <DMA_SetConfig>
    if (NULL != hdma->XferHalfCpltCallback)
 8002570:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8002572:	b1d3      	cbz	r3, 80025aa <HAL_DMA_Start_IT+0x7a>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002574:	6822      	ldr	r2, [r4, #0]
 8002576:	6813      	ldr	r3, [r2, #0]
 8002578:	f043 030e 	orr.w	r3, r3, #14
 800257c:	6013      	str	r3, [r2, #0]
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800257e:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 8002580:	681a      	ldr	r2, [r3, #0]
 8002582:	f412 3f80 	tst.w	r2, #65536	@ 0x10000
 8002586:	d003      	beq.n	8002590 <HAL_DMA_Start_IT+0x60>
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8002588:	681a      	ldr	r2, [r3, #0]
 800258a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800258e:	601a      	str	r2, [r3, #0]
    if (hdma->DMAmuxRequestGen != 0U)
 8002590:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8002592:	b11b      	cbz	r3, 800259c <HAL_DMA_Start_IT+0x6c>
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8002594:	681a      	ldr	r2, [r3, #0]
 8002596:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800259a:	601a      	str	r2, [r3, #0]
    __HAL_DMA_ENABLE(hdma);
 800259c:	6822      	ldr	r2, [r4, #0]
 800259e:	6813      	ldr	r3, [r2, #0]
 80025a0:	f043 0301 	orr.w	r3, r3, #1
 80025a4:	6013      	str	r3, [r2, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80025a6:	2000      	movs	r0, #0
 80025a8:	e7d4      	b.n	8002554 <HAL_DMA_Start_IT+0x24>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80025aa:	6822      	ldr	r2, [r4, #0]
 80025ac:	6813      	ldr	r3, [r2, #0]
 80025ae:	f023 0304 	bic.w	r3, r3, #4
 80025b2:	6013      	str	r3, [r2, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80025b4:	6822      	ldr	r2, [r4, #0]
 80025b6:	6813      	ldr	r3, [r2, #0]
 80025b8:	f043 030a 	orr.w	r3, r3, #10
 80025bc:	6013      	str	r3, [r2, #0]
 80025be:	e7de      	b.n	800257e <HAL_DMA_Start_IT+0x4e>
  __HAL_LOCK(hdma);
 80025c0:	2002      	movs	r0, #2
 80025c2:	e7c7      	b.n	8002554 <HAL_DMA_Start_IT+0x24>

080025c4 <HAL_DMA_IRQHandler>:
{
 80025c4:	b538      	push	{r3, r4, r5, lr}
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80025c6:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 80025c8:	6819      	ldr	r1, [r3, #0]
  uint32_t source_it = hdma->Instance->CCR;
 80025ca:	6804      	ldr	r4, [r0, #0]
 80025cc:	6825      	ldr	r5, [r4, #0]
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 80025ce:	6c43      	ldr	r3, [r0, #68]	@ 0x44
 80025d0:	f003 031f 	and.w	r3, r3, #31
 80025d4:	2204      	movs	r2, #4
 80025d6:	409a      	lsls	r2, r3
 80025d8:	420a      	tst	r2, r1
 80025da:	d015      	beq.n	8002608 <HAL_DMA_IRQHandler+0x44>
 80025dc:	f015 0f04 	tst.w	r5, #4
 80025e0:	d012      	beq.n	8002608 <HAL_DMA_IRQHandler+0x44>
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80025e2:	6823      	ldr	r3, [r4, #0]
 80025e4:	f013 0f20 	tst.w	r3, #32
 80025e8:	d103      	bne.n	80025f2 <HAL_DMA_IRQHandler+0x2e>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80025ea:	6823      	ldr	r3, [r4, #0]
 80025ec:	f023 0304 	bic.w	r3, r3, #4
 80025f0:	6023      	str	r3, [r4, #0]
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 80025f2:	6c43      	ldr	r3, [r0, #68]	@ 0x44
 80025f4:	f003 021f 	and.w	r2, r3, #31
 80025f8:	6c01      	ldr	r1, [r0, #64]	@ 0x40
 80025fa:	2304      	movs	r3, #4
 80025fc:	4093      	lsls	r3, r2
 80025fe:	604b      	str	r3, [r1, #4]
    if (hdma->XferHalfCpltCallback != NULL)
 8002600:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8002602:	b103      	cbz	r3, 8002606 <HAL_DMA_IRQHandler+0x42>
      hdma->XferHalfCpltCallback(hdma);
 8002604:	4798      	blx	r3
}
 8002606:	bd38      	pop	{r3, r4, r5, pc}
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8002608:	2202      	movs	r2, #2
 800260a:	409a      	lsls	r2, r3
 800260c:	420a      	tst	r2, r1
 800260e:	d01c      	beq.n	800264a <HAL_DMA_IRQHandler+0x86>
           && (0U != (source_it & DMA_IT_TC)))
 8002610:	f015 0f02 	tst.w	r5, #2
 8002614:	d019      	beq.n	800264a <HAL_DMA_IRQHandler+0x86>
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002616:	6823      	ldr	r3, [r4, #0]
 8002618:	f013 0f20 	tst.w	r3, #32
 800261c:	d106      	bne.n	800262c <HAL_DMA_IRQHandler+0x68>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800261e:	6823      	ldr	r3, [r4, #0]
 8002620:	f023 030a 	bic.w	r3, r3, #10
 8002624:	6023      	str	r3, [r4, #0]
      hdma->State = HAL_DMA_STATE_READY;
 8002626:	2301      	movs	r3, #1
 8002628:	f880 3025 	strb.w	r3, [r0, #37]	@ 0x25
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 800262c:	6c43      	ldr	r3, [r0, #68]	@ 0x44
 800262e:	f003 021f 	and.w	r2, r3, #31
 8002632:	6c01      	ldr	r1, [r0, #64]	@ 0x40
 8002634:	2302      	movs	r3, #2
 8002636:	4093      	lsls	r3, r2
 8002638:	604b      	str	r3, [r1, #4]
    __HAL_UNLOCK(hdma);
 800263a:	2300      	movs	r3, #0
 800263c:	f880 3024 	strb.w	r3, [r0, #36]	@ 0x24
    if (hdma->XferCpltCallback != NULL)
 8002640:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 8002642:	2b00      	cmp	r3, #0
 8002644:	d0df      	beq.n	8002606 <HAL_DMA_IRQHandler+0x42>
      hdma->XferCpltCallback(hdma);
 8002646:	4798      	blx	r3
 8002648:	e7dd      	b.n	8002606 <HAL_DMA_IRQHandler+0x42>
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 800264a:	2208      	movs	r2, #8
 800264c:	fa02 f303 	lsl.w	r3, r2, r3
 8002650:	420b      	tst	r3, r1
 8002652:	d0d8      	beq.n	8002606 <HAL_DMA_IRQHandler+0x42>
           && (0U != (source_it & DMA_IT_TE)))
 8002654:	f015 0f08 	tst.w	r5, #8
 8002658:	d0d5      	beq.n	8002606 <HAL_DMA_IRQHandler+0x42>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800265a:	6823      	ldr	r3, [r4, #0]
 800265c:	f023 030e 	bic.w	r3, r3, #14
 8002660:	6023      	str	r3, [r4, #0]
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8002662:	6c43      	ldr	r3, [r0, #68]	@ 0x44
 8002664:	f003 031f 	and.w	r3, r3, #31
 8002668:	6c01      	ldr	r1, [r0, #64]	@ 0x40
 800266a:	2201      	movs	r2, #1
 800266c:	fa02 f303 	lsl.w	r3, r2, r3
 8002670:	604b      	str	r3, [r1, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002672:	63c2      	str	r2, [r0, #60]	@ 0x3c
    hdma->State = HAL_DMA_STATE_READY;
 8002674:	f880 2025 	strb.w	r2, [r0, #37]	@ 0x25
    __HAL_UNLOCK(hdma);
 8002678:	2300      	movs	r3, #0
 800267a:	f880 3024 	strb.w	r3, [r0, #36]	@ 0x24
    if (hdma->XferErrorCallback != NULL)
 800267e:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 8002680:	2b00      	cmp	r3, #0
 8002682:	d0c0      	beq.n	8002606 <HAL_DMA_IRQHandler+0x42>
      hdma->XferErrorCallback(hdma);
 8002684:	4798      	blx	r3
  return;
 8002686:	e7be      	b.n	8002606 <HAL_DMA_IRQHandler+0x42>

08002688 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002688:	b5f0      	push	{r4, r5, r6, r7, lr}
 800268a:	b083      	sub	sp, #12
  uint32_t position = 0x00U;
 800268c:	2300      	movs	r3, #0
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800268e:	e062      	b.n	8002756 <HAL_GPIO_Init+0xce>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002690:	6885      	ldr	r5, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002692:	005e      	lsls	r6, r3, #1
 8002694:	2403      	movs	r4, #3
 8002696:	40b4      	lsls	r4, r6
 8002698:	ea25 0504 	bic.w	r5, r5, r4
        temp |= (GPIO_Init->Speed << (position * 2U));
 800269c:	68cc      	ldr	r4, [r1, #12]
 800269e:	40b4      	lsls	r4, r6
 80026a0:	432c      	orrs	r4, r5
        GPIOx->OSPEEDR = temp;
 80026a2:	6084      	str	r4, [r0, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80026a4:	6845      	ldr	r5, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80026a6:	ea25 050c 	bic.w	r5, r5, ip
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80026aa:	684c      	ldr	r4, [r1, #4]
 80026ac:	f3c4 1400 	ubfx	r4, r4, #4, #1
 80026b0:	409c      	lsls	r4, r3
 80026b2:	432c      	orrs	r4, r5
        GPIOx->OTYPER = temp;
 80026b4:	6044      	str	r4, [r0, #4]
 80026b6:	e05f      	b.n	8002778 <HAL_GPIO_Init+0xf0>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80026b8:	08dd      	lsrs	r5, r3, #3
 80026ba:	3508      	adds	r5, #8
 80026bc:	f850 4025 	ldr.w	r4, [r0, r5, lsl #2]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80026c0:	f003 0c07 	and.w	ip, r3, #7
 80026c4:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 80026c8:	f04f 0e0f 	mov.w	lr, #15
 80026cc:	fa0e fe0c 	lsl.w	lr, lr, ip
 80026d0:	ea24 0e0e 	bic.w	lr, r4, lr
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80026d4:	690c      	ldr	r4, [r1, #16]
 80026d6:	fa04 f40c 	lsl.w	r4, r4, ip
 80026da:	ea44 040e 	orr.w	r4, r4, lr
        GPIOx->AFR[position >> 3U] = temp;
 80026de:	f840 4025 	str.w	r4, [r0, r5, lsl #2]
 80026e2:	e060      	b.n	80027a6 <HAL_GPIO_Init+0x11e>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80026e4:	2405      	movs	r4, #5
 80026e6:	e000      	b.n	80026ea <HAL_GPIO_Init+0x62>
 80026e8:	2400      	movs	r4, #0
 80026ea:	fa04 f40e 	lsl.w	r4, r4, lr
 80026ee:	432c      	orrs	r4, r5
        SYSCFG->EXTICR[position >> 2U] = temp;
 80026f0:	f10c 0c02 	add.w	ip, ip, #2
 80026f4:	4d55      	ldr	r5, [pc, #340]	@ (800284c <HAL_GPIO_Init+0x1c4>)
 80026f6:	f845 402c 	str.w	r4, [r5, ip, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80026fa:	4c55      	ldr	r4, [pc, #340]	@ (8002850 <HAL_GPIO_Init+0x1c8>)
 80026fc:	68a5      	ldr	r5, [r4, #8]
        temp &= ~(iocurrent);
 80026fe:	43d4      	mvns	r4, r2
 8002700:	ea25 0602 	bic.w	r6, r5, r2
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002704:	684f      	ldr	r7, [r1, #4]
 8002706:	f417 1f80 	tst.w	r7, #1048576	@ 0x100000
 800270a:	d001      	beq.n	8002710 <HAL_GPIO_Init+0x88>
        {
          temp |= iocurrent;
 800270c:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->RTSR1 = temp;
 8002710:	4d4f      	ldr	r5, [pc, #316]	@ (8002850 <HAL_GPIO_Init+0x1c8>)
 8002712:	60ae      	str	r6, [r5, #8]

        temp = EXTI->FTSR1;
 8002714:	68ed      	ldr	r5, [r5, #12]
        temp &= ~(iocurrent);
 8002716:	ea04 0605 	and.w	r6, r4, r5
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800271a:	684f      	ldr	r7, [r1, #4]
 800271c:	f417 1f00 	tst.w	r7, #2097152	@ 0x200000
 8002720:	d001      	beq.n	8002726 <HAL_GPIO_Init+0x9e>
        {
          temp |= iocurrent;
 8002722:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->FTSR1 = temp;
 8002726:	4d4a      	ldr	r5, [pc, #296]	@ (8002850 <HAL_GPIO_Init+0x1c8>)
 8002728:	60ee      	str	r6, [r5, #12]

        temp = EXTI->EMR1;
 800272a:	686d      	ldr	r5, [r5, #4]
        temp &= ~(iocurrent);
 800272c:	ea04 0605 	and.w	r6, r4, r5
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002730:	684f      	ldr	r7, [r1, #4]
 8002732:	f417 3f00 	tst.w	r7, #131072	@ 0x20000
 8002736:	d001      	beq.n	800273c <HAL_GPIO_Init+0xb4>
        {
          temp |= iocurrent;
 8002738:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->EMR1 = temp;
 800273c:	4d44      	ldr	r5, [pc, #272]	@ (8002850 <HAL_GPIO_Init+0x1c8>)
 800273e:	606e      	str	r6, [r5, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002740:	682d      	ldr	r5, [r5, #0]
        temp &= ~(iocurrent);
 8002742:	402c      	ands	r4, r5
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002744:	684e      	ldr	r6, [r1, #4]
 8002746:	f416 3f80 	tst.w	r6, #65536	@ 0x10000
 800274a:	d001      	beq.n	8002750 <HAL_GPIO_Init+0xc8>
        {
          temp |= iocurrent;
 800274c:	ea42 0405 	orr.w	r4, r2, r5
        }
        EXTI->IMR1 = temp;
 8002750:	4a3f      	ldr	r2, [pc, #252]	@ (8002850 <HAL_GPIO_Init+0x1c8>)
 8002752:	6014      	str	r4, [r2, #0]
      }
    }

    position++;
 8002754:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002756:	680a      	ldr	r2, [r1, #0]
 8002758:	fa32 f403 	lsrs.w	r4, r2, r3
 800275c:	d074      	beq.n	8002848 <HAL_GPIO_Init+0x1c0>
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800275e:	f04f 0c01 	mov.w	ip, #1
 8002762:	fa0c fc03 	lsl.w	ip, ip, r3
    if (iocurrent != 0x00u)
 8002766:	ea1c 0202 	ands.w	r2, ip, r2
 800276a:	d0f3      	beq.n	8002754 <HAL_GPIO_Init+0xcc>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800276c:	684c      	ldr	r4, [r1, #4]
 800276e:	f004 0403 	and.w	r4, r4, #3
 8002772:	3c01      	subs	r4, #1
 8002774:	2c01      	cmp	r4, #1
 8002776:	d98b      	bls.n	8002690 <HAL_GPIO_Init+0x8>
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002778:	684c      	ldr	r4, [r1, #4]
 800277a:	f004 0403 	and.w	r4, r4, #3
 800277e:	2c03      	cmp	r4, #3
 8002780:	d00c      	beq.n	800279c <HAL_GPIO_Init+0x114>
        temp = GPIOx->PUPDR;
 8002782:	68c4      	ldr	r4, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002784:	005d      	lsls	r5, r3, #1
 8002786:	f04f 0c03 	mov.w	ip, #3
 800278a:	fa0c fc05 	lsl.w	ip, ip, r5
 800278e:	ea24 0c0c 	bic.w	ip, r4, ip
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002792:	688c      	ldr	r4, [r1, #8]
 8002794:	40ac      	lsls	r4, r5
 8002796:	ea44 040c 	orr.w	r4, r4, ip
        GPIOx->PUPDR = temp;
 800279a:	60c4      	str	r4, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800279c:	684c      	ldr	r4, [r1, #4]
 800279e:	f004 0403 	and.w	r4, r4, #3
 80027a2:	2c02      	cmp	r4, #2
 80027a4:	d088      	beq.n	80026b8 <HAL_GPIO_Init+0x30>
      temp = GPIOx->MODER;
 80027a6:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80027a8:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 80027ac:	f04f 0c03 	mov.w	ip, #3
 80027b0:	fa0c fc0e 	lsl.w	ip, ip, lr
 80027b4:	ea24 0c0c 	bic.w	ip, r4, ip
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80027b8:	684c      	ldr	r4, [r1, #4]
 80027ba:	f004 0403 	and.w	r4, r4, #3
 80027be:	fa04 f40e 	lsl.w	r4, r4, lr
 80027c2:	ea44 040c 	orr.w	r4, r4, ip
      GPIOx->MODER = temp;
 80027c6:	6004      	str	r4, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80027c8:	684c      	ldr	r4, [r1, #4]
 80027ca:	f414 3f40 	tst.w	r4, #196608	@ 0x30000
 80027ce:	d0c1      	beq.n	8002754 <HAL_GPIO_Init+0xcc>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80027d0:	4c20      	ldr	r4, [pc, #128]	@ (8002854 <HAL_GPIO_Init+0x1cc>)
 80027d2:	6e25      	ldr	r5, [r4, #96]	@ 0x60
 80027d4:	f045 0501 	orr.w	r5, r5, #1
 80027d8:	6625      	str	r5, [r4, #96]	@ 0x60
 80027da:	6e24      	ldr	r4, [r4, #96]	@ 0x60
 80027dc:	f004 0401 	and.w	r4, r4, #1
 80027e0:	9401      	str	r4, [sp, #4]
 80027e2:	9c01      	ldr	r4, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 80027e4:	ea4f 0c93 	mov.w	ip, r3, lsr #2
 80027e8:	f10c 0502 	add.w	r5, ip, #2
 80027ec:	4c17      	ldr	r4, [pc, #92]	@ (800284c <HAL_GPIO_Init+0x1c4>)
 80027ee:	f854 5025 	ldr.w	r5, [r4, r5, lsl #2]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80027f2:	f003 0e03 	and.w	lr, r3, #3
 80027f6:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 80027fa:	240f      	movs	r4, #15
 80027fc:	fa04 f40e 	lsl.w	r4, r4, lr
 8002800:	ea25 0504 	bic.w	r5, r5, r4
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002804:	f1b0 4f90 	cmp.w	r0, #1207959552	@ 0x48000000
 8002808:	f43f af6e 	beq.w	80026e8 <HAL_GPIO_Init+0x60>
 800280c:	4c12      	ldr	r4, [pc, #72]	@ (8002858 <HAL_GPIO_Init+0x1d0>)
 800280e:	42a0      	cmp	r0, r4
 8002810:	d012      	beq.n	8002838 <HAL_GPIO_Init+0x1b0>
 8002812:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 8002816:	42a0      	cmp	r0, r4
 8002818:	d010      	beq.n	800283c <HAL_GPIO_Init+0x1b4>
 800281a:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 800281e:	42a0      	cmp	r0, r4
 8002820:	d00e      	beq.n	8002840 <HAL_GPIO_Init+0x1b8>
 8002822:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 8002826:	42a0      	cmp	r0, r4
 8002828:	d00c      	beq.n	8002844 <HAL_GPIO_Init+0x1bc>
 800282a:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 800282e:	42a0      	cmp	r0, r4
 8002830:	f43f af58 	beq.w	80026e4 <HAL_GPIO_Init+0x5c>
 8002834:	2406      	movs	r4, #6
 8002836:	e758      	b.n	80026ea <HAL_GPIO_Init+0x62>
 8002838:	2401      	movs	r4, #1
 800283a:	e756      	b.n	80026ea <HAL_GPIO_Init+0x62>
 800283c:	2402      	movs	r4, #2
 800283e:	e754      	b.n	80026ea <HAL_GPIO_Init+0x62>
 8002840:	2403      	movs	r4, #3
 8002842:	e752      	b.n	80026ea <HAL_GPIO_Init+0x62>
 8002844:	2404      	movs	r4, #4
 8002846:	e750      	b.n	80026ea <HAL_GPIO_Init+0x62>
  }
}
 8002848:	b003      	add	sp, #12
 800284a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800284c:	40010000 	.word	0x40010000
 8002850:	40010400 	.word	0x40010400
 8002854:	40021000 	.word	0x40021000
 8002858:	48000400 	.word	0x48000400

0800285c <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800285c:	b10a      	cbz	r2, 8002862 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800285e:	6181      	str	r1, [r0, #24]
 8002860:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002862:	6281      	str	r1, [r0, #40]	@ 0x28
  }
}
 8002864:	4770      	bx	lr
	...

08002868 <HAL_PWREx_ControlVoltageScaling>:
{
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8002868:	2800      	cmp	r0, #0
 800286a:	d136      	bne.n	80028da <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800286c:	4b3e      	ldr	r3, [pc, #248]	@ (8002968 <HAL_PWREx_ControlVoltageScaling+0x100>)
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002874:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002878:	d008      	beq.n	800288c <HAL_PWREx_ControlVoltageScaling+0x24>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800287a:	4a3b      	ldr	r2, [pc, #236]	@ (8002968 <HAL_PWREx_ControlVoltageScaling+0x100>)
 800287c:	f8d2 3080 	ldr.w	r3, [r2, #128]	@ 0x80
 8002880:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002884:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8002888:	2000      	movs	r0, #0
 800288a:	4770      	bx	lr
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800288c:	4a36      	ldr	r2, [pc, #216]	@ (8002968 <HAL_PWREx_ControlVoltageScaling+0x100>)
 800288e:	f8d2 3080 	ldr.w	r3, [r2, #128]	@ 0x80
 8002892:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002896:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800289a:	6813      	ldr	r3, [r2, #0]
 800289c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80028a0:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80028a4:	6013      	str	r3, [r2, #0]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80028a6:	4b31      	ldr	r3, [pc, #196]	@ (800296c <HAL_PWREx_ControlVoltageScaling+0x104>)
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	2232      	movs	r2, #50	@ 0x32
 80028ac:	fb02 f303 	mul.w	r3, r2, r3
 80028b0:	4a2f      	ldr	r2, [pc, #188]	@ (8002970 <HAL_PWREx_ControlVoltageScaling+0x108>)
 80028b2:	fba2 2303 	umull	r2, r3, r2, r3
 80028b6:	0c9b      	lsrs	r3, r3, #18
 80028b8:	3301      	adds	r3, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80028ba:	e000      	b.n	80028be <HAL_PWREx_ControlVoltageScaling+0x56>
        wait_loop_index--;
 80028bc:	3b01      	subs	r3, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80028be:	4a2a      	ldr	r2, [pc, #168]	@ (8002968 <HAL_PWREx_ControlVoltageScaling+0x100>)
 80028c0:	6952      	ldr	r2, [r2, #20]
 80028c2:	f412 6f80 	tst.w	r2, #1024	@ 0x400
 80028c6:	d001      	beq.n	80028cc <HAL_PWREx_ControlVoltageScaling+0x64>
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d1f7      	bne.n	80028bc <HAL_PWREx_ControlVoltageScaling+0x54>
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80028cc:	4b26      	ldr	r3, [pc, #152]	@ (8002968 <HAL_PWREx_ControlVoltageScaling+0x100>)
 80028ce:	695b      	ldr	r3, [r3, #20]
 80028d0:	f413 6f80 	tst.w	r3, #1024	@ 0x400
 80028d4:	d144      	bne.n	8002960 <HAL_PWREx_ControlVoltageScaling+0xf8>
  return HAL_OK;
 80028d6:	2000      	movs	r0, #0
 80028d8:	4770      	bx	lr
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80028da:	f5b0 7f00 	cmp.w	r0, #512	@ 0x200
 80028de:	d008      	beq.n	80028f2 <HAL_PWREx_ControlVoltageScaling+0x8a>
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80028e0:	4a21      	ldr	r2, [pc, #132]	@ (8002968 <HAL_PWREx_ControlVoltageScaling+0x100>)
 80028e2:	6813      	ldr	r3, [r2, #0]
 80028e4:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80028e8:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80028ec:	6013      	str	r3, [r2, #0]
  return HAL_OK;
 80028ee:	2000      	movs	r0, #0
 80028f0:	4770      	bx	lr
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80028f2:	4b1d      	ldr	r3, [pc, #116]	@ (8002968 <HAL_PWREx_ControlVoltageScaling+0x100>)
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80028fa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80028fe:	d008      	beq.n	8002912 <HAL_PWREx_ControlVoltageScaling+0xaa>
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002900:	4a19      	ldr	r2, [pc, #100]	@ (8002968 <HAL_PWREx_ControlVoltageScaling+0x100>)
 8002902:	f8d2 3080 	ldr.w	r3, [r2, #128]	@ 0x80
 8002906:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800290a:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
  return HAL_OK;
 800290e:	2000      	movs	r0, #0
 8002910:	4770      	bx	lr
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002912:	4a15      	ldr	r2, [pc, #84]	@ (8002968 <HAL_PWREx_ControlVoltageScaling+0x100>)
 8002914:	f8d2 3080 	ldr.w	r3, [r2, #128]	@ 0x80
 8002918:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800291c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002920:	6813      	ldr	r3, [r2, #0]
 8002922:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002926:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800292a:	6013      	str	r3, [r2, #0]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800292c:	4b0f      	ldr	r3, [pc, #60]	@ (800296c <HAL_PWREx_ControlVoltageScaling+0x104>)
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	2232      	movs	r2, #50	@ 0x32
 8002932:	fb02 f303 	mul.w	r3, r2, r3
 8002936:	4a0e      	ldr	r2, [pc, #56]	@ (8002970 <HAL_PWREx_ControlVoltageScaling+0x108>)
 8002938:	fba2 2303 	umull	r2, r3, r2, r3
 800293c:	0c9b      	lsrs	r3, r3, #18
 800293e:	3301      	adds	r3, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002940:	e000      	b.n	8002944 <HAL_PWREx_ControlVoltageScaling+0xdc>
        wait_loop_index--;
 8002942:	3b01      	subs	r3, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002944:	4a08      	ldr	r2, [pc, #32]	@ (8002968 <HAL_PWREx_ControlVoltageScaling+0x100>)
 8002946:	6952      	ldr	r2, [r2, #20]
 8002948:	f412 6f80 	tst.w	r2, #1024	@ 0x400
 800294c:	d001      	beq.n	8002952 <HAL_PWREx_ControlVoltageScaling+0xea>
 800294e:	2b00      	cmp	r3, #0
 8002950:	d1f7      	bne.n	8002942 <HAL_PWREx_ControlVoltageScaling+0xda>
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002952:	4b05      	ldr	r3, [pc, #20]	@ (8002968 <HAL_PWREx_ControlVoltageScaling+0x100>)
 8002954:	695b      	ldr	r3, [r3, #20]
 8002956:	f413 6f80 	tst.w	r3, #1024	@ 0x400
 800295a:	d103      	bne.n	8002964 <HAL_PWREx_ControlVoltageScaling+0xfc>
  return HAL_OK;
 800295c:	2000      	movs	r0, #0
 800295e:	4770      	bx	lr
        return HAL_TIMEOUT;
 8002960:	2003      	movs	r0, #3
 8002962:	4770      	bx	lr
        return HAL_TIMEOUT;
 8002964:	2003      	movs	r0, #3
}
 8002966:	4770      	bx	lr
 8002968:	40007000 	.word	0x40007000
 800296c:	20000018 	.word	0x20000018
 8002970:	431bde83 	.word	0x431bde83

08002974 <HAL_PWREx_DisableUCPDDeadBattery>:
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8002974:	4a02      	ldr	r2, [pc, #8]	@ (8002980 <HAL_PWREx_DisableUCPDDeadBattery+0xc>)
 8002976:	6893      	ldr	r3, [r2, #8]
 8002978:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800297c:	6093      	str	r3, [r2, #8]
}
 800297e:	4770      	bx	lr
 8002980:	40007000 	.word	0x40007000

08002984 <RCC_GetSysClockFreqFromPLLSource>:
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002984:	4b12      	ldr	r3, [pc, #72]	@ (80029d0 <RCC_GetSysClockFreqFromPLLSource+0x4c>)
 8002986:	68da      	ldr	r2, [r3, #12]
 8002988:	f002 0203 	and.w	r2, r2, #3
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800298c:	68db      	ldr	r3, [r3, #12]
 800298e:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8002992:	3301      	adds	r3, #1

  switch (pllsource)
 8002994:	2a03      	cmp	r2, #3
 8002996:	d011      	beq.n	80029bc <RCC_GetSysClockFreqFromPLLSource+0x38>
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
    break;

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002998:	480e      	ldr	r0, [pc, #56]	@ (80029d4 <RCC_GetSysClockFreqFromPLLSource+0x50>)
 800299a:	fbb0 f0f3 	udiv	r0, r0, r3
 800299e:	4b0c      	ldr	r3, [pc, #48]	@ (80029d0 <RCC_GetSysClockFreqFromPLLSource+0x4c>)
 80029a0:	68db      	ldr	r3, [r3, #12]
 80029a2:	f3c3 2306 	ubfx	r3, r3, #8, #7
 80029a6:	fb03 f000 	mul.w	r0, r3, r0
    break;
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80029aa:	4b09      	ldr	r3, [pc, #36]	@ (80029d0 <RCC_GetSysClockFreqFromPLLSource+0x4c>)
 80029ac:	68db      	ldr	r3, [r3, #12]
 80029ae:	f3c3 6341 	ubfx	r3, r3, #25, #2
 80029b2:	3301      	adds	r3, #1
 80029b4:	005b      	lsls	r3, r3, #1
  sysclockfreq = pllvco/pllr;

  return sysclockfreq;
}
 80029b6:	fbb0 f0f3 	udiv	r0, r0, r3
 80029ba:	4770      	bx	lr
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80029bc:	4806      	ldr	r0, [pc, #24]	@ (80029d8 <RCC_GetSysClockFreqFromPLLSource+0x54>)
 80029be:	fbb0 f0f3 	udiv	r0, r0, r3
 80029c2:	4b03      	ldr	r3, [pc, #12]	@ (80029d0 <RCC_GetSysClockFreqFromPLLSource+0x4c>)
 80029c4:	68db      	ldr	r3, [r3, #12]
 80029c6:	f3c3 2306 	ubfx	r3, r3, #8, #7
 80029ca:	fb03 f000 	mul.w	r0, r3, r0
    break;
 80029ce:	e7ec      	b.n	80029aa <RCC_GetSysClockFreqFromPLLSource+0x26>
 80029d0:	40021000 	.word	0x40021000
 80029d4:	00f42400 	.word	0x00f42400
 80029d8:	007a1200 	.word	0x007a1200

080029dc <HAL_RCC_OscConfig>:
  if (RCC_OscInitStruct == NULL)
 80029dc:	2800      	cmp	r0, #0
 80029de:	f000 824f 	beq.w	8002e80 <HAL_RCC_OscConfig+0x4a4>
{
 80029e2:	b570      	push	{r4, r5, r6, lr}
 80029e4:	b082      	sub	sp, #8
 80029e6:	4604      	mov	r4, r0
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80029e8:	6803      	ldr	r3, [r0, #0]
 80029ea:	f013 0f01 	tst.w	r3, #1
 80029ee:	d037      	beq.n	8002a60 <HAL_RCC_OscConfig+0x84>
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80029f0:	4aa4      	ldr	r2, [pc, #656]	@ (8002c84 <HAL_RCC_OscConfig+0x2a8>)
 80029f2:	6893      	ldr	r3, [r2, #8]
 80029f4:	f003 030c 	and.w	r3, r3, #12
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80029f8:	68d2      	ldr	r2, [r2, #12]
 80029fa:	f002 0203 	and.w	r2, r2, #3
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80029fe:	2b0c      	cmp	r3, #12
 8002a00:	d023      	beq.n	8002a4a <HAL_RCC_OscConfig+0x6e>
 8002a02:	2b08      	cmp	r3, #8
 8002a04:	d023      	beq.n	8002a4e <HAL_RCC_OscConfig+0x72>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002a06:	6863      	ldr	r3, [r4, #4]
 8002a08:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002a0c:	d04e      	beq.n	8002aac <HAL_RCC_OscConfig+0xd0>
 8002a0e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002a12:	d051      	beq.n	8002ab8 <HAL_RCC_OscConfig+0xdc>
 8002a14:	4b9b      	ldr	r3, [pc, #620]	@ (8002c84 <HAL_RCC_OscConfig+0x2a8>)
 8002a16:	681a      	ldr	r2, [r3, #0]
 8002a18:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8002a1c:	601a      	str	r2, [r3, #0]
 8002a1e:	681a      	ldr	r2, [r3, #0]
 8002a20:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8002a24:	601a      	str	r2, [r3, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002a26:	6863      	ldr	r3, [r4, #4]
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d052      	beq.n	8002ad2 <HAL_RCC_OscConfig+0xf6>
        tickstart = HAL_GetTick();
 8002a2c:	f7fe fe46 	bl	80016bc <HAL_GetTick>
 8002a30:	4605      	mov	r5, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002a32:	4b94      	ldr	r3, [pc, #592]	@ (8002c84 <HAL_RCC_OscConfig+0x2a8>)
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 8002a3a:	d111      	bne.n	8002a60 <HAL_RCC_OscConfig+0x84>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002a3c:	f7fe fe3e 	bl	80016bc <HAL_GetTick>
 8002a40:	1b40      	subs	r0, r0, r5
 8002a42:	2864      	cmp	r0, #100	@ 0x64
 8002a44:	d9f5      	bls.n	8002a32 <HAL_RCC_OscConfig+0x56>
            return HAL_TIMEOUT;
 8002a46:	2003      	movs	r0, #3
 8002a48:	e223      	b.n	8002e92 <HAL_RCC_OscConfig+0x4b6>
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8002a4a:	2a03      	cmp	r2, #3
 8002a4c:	d1d9      	bne.n	8002a02 <HAL_RCC_OscConfig+0x26>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a4e:	4b8d      	ldr	r3, [pc, #564]	@ (8002c84 <HAL_RCC_OscConfig+0x2a8>)
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 8002a56:	d003      	beq.n	8002a60 <HAL_RCC_OscConfig+0x84>
 8002a58:	6863      	ldr	r3, [r4, #4]
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	f000 8212 	beq.w	8002e84 <HAL_RCC_OscConfig+0x4a8>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002a60:	6823      	ldr	r3, [r4, #0]
 8002a62:	f013 0f02 	tst.w	r3, #2
 8002a66:	d05d      	beq.n	8002b24 <HAL_RCC_OscConfig+0x148>
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002a68:	4a86      	ldr	r2, [pc, #536]	@ (8002c84 <HAL_RCC_OscConfig+0x2a8>)
 8002a6a:	6893      	ldr	r3, [r2, #8]
 8002a6c:	f003 030c 	and.w	r3, r3, #12
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002a70:	68d2      	ldr	r2, [r2, #12]
 8002a72:	f002 0203 	and.w	r2, r2, #3
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8002a76:	2b0c      	cmp	r3, #12
 8002a78:	d03a      	beq.n	8002af0 <HAL_RCC_OscConfig+0x114>
 8002a7a:	2b04      	cmp	r3, #4
 8002a7c:	d03a      	beq.n	8002af4 <HAL_RCC_OscConfig+0x118>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002a7e:	68e3      	ldr	r3, [r4, #12]
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d075      	beq.n	8002b70 <HAL_RCC_OscConfig+0x194>
        __HAL_RCC_HSI_ENABLE();
 8002a84:	4a7f      	ldr	r2, [pc, #508]	@ (8002c84 <HAL_RCC_OscConfig+0x2a8>)
 8002a86:	6813      	ldr	r3, [r2, #0]
 8002a88:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002a8c:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8002a8e:	f7fe fe15 	bl	80016bc <HAL_GetTick>
 8002a92:	4605      	mov	r5, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002a94:	4b7b      	ldr	r3, [pc, #492]	@ (8002c84 <HAL_RCC_OscConfig+0x2a8>)
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	f413 6f80 	tst.w	r3, #1024	@ 0x400
 8002a9c:	d15f      	bne.n	8002b5e <HAL_RCC_OscConfig+0x182>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002a9e:	f7fe fe0d 	bl	80016bc <HAL_GetTick>
 8002aa2:	1b40      	subs	r0, r0, r5
 8002aa4:	2802      	cmp	r0, #2
 8002aa6:	d9f5      	bls.n	8002a94 <HAL_RCC_OscConfig+0xb8>
            return HAL_TIMEOUT;
 8002aa8:	2003      	movs	r0, #3
 8002aaa:	e1f2      	b.n	8002e92 <HAL_RCC_OscConfig+0x4b6>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002aac:	4a75      	ldr	r2, [pc, #468]	@ (8002c84 <HAL_RCC_OscConfig+0x2a8>)
 8002aae:	6813      	ldr	r3, [r2, #0]
 8002ab0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002ab4:	6013      	str	r3, [r2, #0]
 8002ab6:	e7b6      	b.n	8002a26 <HAL_RCC_OscConfig+0x4a>
 8002ab8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8002abc:	f5a3 333c 	sub.w	r3, r3, #192512	@ 0x2f000
 8002ac0:	681a      	ldr	r2, [r3, #0]
 8002ac2:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 8002ac6:	601a      	str	r2, [r3, #0]
 8002ac8:	681a      	ldr	r2, [r3, #0]
 8002aca:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8002ace:	601a      	str	r2, [r3, #0]
 8002ad0:	e7a9      	b.n	8002a26 <HAL_RCC_OscConfig+0x4a>
        tickstart = HAL_GetTick();
 8002ad2:	f7fe fdf3 	bl	80016bc <HAL_GetTick>
 8002ad6:	4605      	mov	r5, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002ad8:	4b6a      	ldr	r3, [pc, #424]	@ (8002c84 <HAL_RCC_OscConfig+0x2a8>)
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 8002ae0:	d0be      	beq.n	8002a60 <HAL_RCC_OscConfig+0x84>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002ae2:	f7fe fdeb 	bl	80016bc <HAL_GetTick>
 8002ae6:	1b40      	subs	r0, r0, r5
 8002ae8:	2864      	cmp	r0, #100	@ 0x64
 8002aea:	d9f5      	bls.n	8002ad8 <HAL_RCC_OscConfig+0xfc>
            return HAL_TIMEOUT;
 8002aec:	2003      	movs	r0, #3
 8002aee:	e1d0      	b.n	8002e92 <HAL_RCC_OscConfig+0x4b6>
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8002af0:	2a02      	cmp	r2, #2
 8002af2:	d1c2      	bne.n	8002a7a <HAL_RCC_OscConfig+0x9e>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002af4:	4b63      	ldr	r3, [pc, #396]	@ (8002c84 <HAL_RCC_OscConfig+0x2a8>)
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	f413 6f80 	tst.w	r3, #1024	@ 0x400
 8002afc:	d003      	beq.n	8002b06 <HAL_RCC_OscConfig+0x12a>
 8002afe:	68e3      	ldr	r3, [r4, #12]
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	f000 81c1 	beq.w	8002e88 <HAL_RCC_OscConfig+0x4ac>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b06:	4a5f      	ldr	r2, [pc, #380]	@ (8002c84 <HAL_RCC_OscConfig+0x2a8>)
 8002b08:	6853      	ldr	r3, [r2, #4]
 8002b0a:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 8002b0e:	6921      	ldr	r1, [r4, #16]
 8002b10:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8002b14:	6053      	str	r3, [r2, #4]
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002b16:	4b5c      	ldr	r3, [pc, #368]	@ (8002c88 <HAL_RCC_OscConfig+0x2ac>)
 8002b18:	6818      	ldr	r0, [r3, #0]
 8002b1a:	f7fe fd8b 	bl	8001634 <HAL_InitTick>
 8002b1e:	2800      	cmp	r0, #0
 8002b20:	f040 81b4 	bne.w	8002e8c <HAL_RCC_OscConfig+0x4b0>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002b24:	6823      	ldr	r3, [r4, #0]
 8002b26:	f013 0f08 	tst.w	r3, #8
 8002b2a:	d04c      	beq.n	8002bc6 <HAL_RCC_OscConfig+0x1ea>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002b2c:	6963      	ldr	r3, [r4, #20]
 8002b2e:	b39b      	cbz	r3, 8002b98 <HAL_RCC_OscConfig+0x1bc>
      __HAL_RCC_LSI_ENABLE();
 8002b30:	4a54      	ldr	r2, [pc, #336]	@ (8002c84 <HAL_RCC_OscConfig+0x2a8>)
 8002b32:	f8d2 3094 	ldr.w	r3, [r2, #148]	@ 0x94
 8002b36:	f043 0301 	orr.w	r3, r3, #1
 8002b3a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
      tickstart = HAL_GetTick();
 8002b3e:	f7fe fdbd 	bl	80016bc <HAL_GetTick>
 8002b42:	4605      	mov	r5, r0
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002b44:	4b4f      	ldr	r3, [pc, #316]	@ (8002c84 <HAL_RCC_OscConfig+0x2a8>)
 8002b46:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002b4a:	f013 0f02 	tst.w	r3, #2
 8002b4e:	d13a      	bne.n	8002bc6 <HAL_RCC_OscConfig+0x1ea>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002b50:	f7fe fdb4 	bl	80016bc <HAL_GetTick>
 8002b54:	1b40      	subs	r0, r0, r5
 8002b56:	2802      	cmp	r0, #2
 8002b58:	d9f4      	bls.n	8002b44 <HAL_RCC_OscConfig+0x168>
          return HAL_TIMEOUT;
 8002b5a:	2003      	movs	r0, #3
 8002b5c:	e199      	b.n	8002e92 <HAL_RCC_OscConfig+0x4b6>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b5e:	4a49      	ldr	r2, [pc, #292]	@ (8002c84 <HAL_RCC_OscConfig+0x2a8>)
 8002b60:	6853      	ldr	r3, [r2, #4]
 8002b62:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 8002b66:	6921      	ldr	r1, [r4, #16]
 8002b68:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8002b6c:	6053      	str	r3, [r2, #4]
 8002b6e:	e7d9      	b.n	8002b24 <HAL_RCC_OscConfig+0x148>
        __HAL_RCC_HSI_DISABLE();
 8002b70:	4a44      	ldr	r2, [pc, #272]	@ (8002c84 <HAL_RCC_OscConfig+0x2a8>)
 8002b72:	6813      	ldr	r3, [r2, #0]
 8002b74:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002b78:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8002b7a:	f7fe fd9f 	bl	80016bc <HAL_GetTick>
 8002b7e:	4605      	mov	r5, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002b80:	4b40      	ldr	r3, [pc, #256]	@ (8002c84 <HAL_RCC_OscConfig+0x2a8>)
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	f413 6f80 	tst.w	r3, #1024	@ 0x400
 8002b88:	d0cc      	beq.n	8002b24 <HAL_RCC_OscConfig+0x148>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002b8a:	f7fe fd97 	bl	80016bc <HAL_GetTick>
 8002b8e:	1b40      	subs	r0, r0, r5
 8002b90:	2802      	cmp	r0, #2
 8002b92:	d9f5      	bls.n	8002b80 <HAL_RCC_OscConfig+0x1a4>
            return HAL_TIMEOUT;
 8002b94:	2003      	movs	r0, #3
 8002b96:	e17c      	b.n	8002e92 <HAL_RCC_OscConfig+0x4b6>
      __HAL_RCC_LSI_DISABLE();
 8002b98:	4a3a      	ldr	r2, [pc, #232]	@ (8002c84 <HAL_RCC_OscConfig+0x2a8>)
 8002b9a:	f8d2 3094 	ldr.w	r3, [r2, #148]	@ 0x94
 8002b9e:	f023 0301 	bic.w	r3, r3, #1
 8002ba2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
      tickstart = HAL_GetTick();
 8002ba6:	f7fe fd89 	bl	80016bc <HAL_GetTick>
 8002baa:	4605      	mov	r5, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002bac:	4b35      	ldr	r3, [pc, #212]	@ (8002c84 <HAL_RCC_OscConfig+0x2a8>)
 8002bae:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002bb2:	f013 0f02 	tst.w	r3, #2
 8002bb6:	d006      	beq.n	8002bc6 <HAL_RCC_OscConfig+0x1ea>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002bb8:	f7fe fd80 	bl	80016bc <HAL_GetTick>
 8002bbc:	1b40      	subs	r0, r0, r5
 8002bbe:	2802      	cmp	r0, #2
 8002bc0:	d9f4      	bls.n	8002bac <HAL_RCC_OscConfig+0x1d0>
          return HAL_TIMEOUT;
 8002bc2:	2003      	movs	r0, #3
 8002bc4:	e165      	b.n	8002e92 <HAL_RCC_OscConfig+0x4b6>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002bc6:	6823      	ldr	r3, [r4, #0]
 8002bc8:	f013 0f04 	tst.w	r3, #4
 8002bcc:	f000 8081 	beq.w	8002cd2 <HAL_RCC_OscConfig+0x2f6>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002bd0:	4b2c      	ldr	r3, [pc, #176]	@ (8002c84 <HAL_RCC_OscConfig+0x2a8>)
 8002bd2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002bd4:	f013 5f80 	tst.w	r3, #268435456	@ 0x10000000
 8002bd8:	d136      	bne.n	8002c48 <HAL_RCC_OscConfig+0x26c>
      __HAL_RCC_PWR_CLK_ENABLE();
 8002bda:	4b2a      	ldr	r3, [pc, #168]	@ (8002c84 <HAL_RCC_OscConfig+0x2a8>)
 8002bdc:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8002bde:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8002be2:	659a      	str	r2, [r3, #88]	@ 0x58
 8002be4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002be6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002bea:	9301      	str	r3, [sp, #4]
 8002bec:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8002bee:	2501      	movs	r5, #1
    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002bf0:	4b26      	ldr	r3, [pc, #152]	@ (8002c8c <HAL_RCC_OscConfig+0x2b0>)
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8002bf8:	d028      	beq.n	8002c4c <HAL_RCC_OscConfig+0x270>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002bfa:	68a3      	ldr	r3, [r4, #8]
 8002bfc:	2b01      	cmp	r3, #1
 8002bfe:	d039      	beq.n	8002c74 <HAL_RCC_OscConfig+0x298>
 8002c00:	2b05      	cmp	r3, #5
 8002c02:	d045      	beq.n	8002c90 <HAL_RCC_OscConfig+0x2b4>
 8002c04:	4b1f      	ldr	r3, [pc, #124]	@ (8002c84 <HAL_RCC_OscConfig+0x2a8>)
 8002c06:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 8002c0a:	f022 0201 	bic.w	r2, r2, #1
 8002c0e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
 8002c12:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 8002c16:	f022 0204 	bic.w	r2, r2, #4
 8002c1a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002c1e:	68a3      	ldr	r3, [r4, #8]
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d043      	beq.n	8002cac <HAL_RCC_OscConfig+0x2d0>
      tickstart = HAL_GetTick();
 8002c24:	f7fe fd4a 	bl	80016bc <HAL_GetTick>
 8002c28:	4606      	mov	r6, r0
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002c2a:	4b16      	ldr	r3, [pc, #88]	@ (8002c84 <HAL_RCC_OscConfig+0x2a8>)
 8002c2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002c30:	f013 0f02 	tst.w	r3, #2
 8002c34:	d14c      	bne.n	8002cd0 <HAL_RCC_OscConfig+0x2f4>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c36:	f7fe fd41 	bl	80016bc <HAL_GetTick>
 8002c3a:	1b80      	subs	r0, r0, r6
 8002c3c:	f241 3388 	movw	r3, #5000	@ 0x1388
 8002c40:	4298      	cmp	r0, r3
 8002c42:	d9f2      	bls.n	8002c2a <HAL_RCC_OscConfig+0x24e>
          return HAL_TIMEOUT;
 8002c44:	2003      	movs	r0, #3
 8002c46:	e124      	b.n	8002e92 <HAL_RCC_OscConfig+0x4b6>
    FlagStatus       pwrclkchanged = RESET;
 8002c48:	2500      	movs	r5, #0
 8002c4a:	e7d1      	b.n	8002bf0 <HAL_RCC_OscConfig+0x214>
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002c4c:	4a0f      	ldr	r2, [pc, #60]	@ (8002c8c <HAL_RCC_OscConfig+0x2b0>)
 8002c4e:	6813      	ldr	r3, [r2, #0]
 8002c50:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002c54:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8002c56:	f7fe fd31 	bl	80016bc <HAL_GetTick>
 8002c5a:	4606      	mov	r6, r0
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002c5c:	4b0b      	ldr	r3, [pc, #44]	@ (8002c8c <HAL_RCC_OscConfig+0x2b0>)
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8002c64:	d1c9      	bne.n	8002bfa <HAL_RCC_OscConfig+0x21e>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c66:	f7fe fd29 	bl	80016bc <HAL_GetTick>
 8002c6a:	1b80      	subs	r0, r0, r6
 8002c6c:	2802      	cmp	r0, #2
 8002c6e:	d9f5      	bls.n	8002c5c <HAL_RCC_OscConfig+0x280>
          return HAL_TIMEOUT;
 8002c70:	2003      	movs	r0, #3
 8002c72:	e10e      	b.n	8002e92 <HAL_RCC_OscConfig+0x4b6>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002c74:	4a03      	ldr	r2, [pc, #12]	@ (8002c84 <HAL_RCC_OscConfig+0x2a8>)
 8002c76:	f8d2 3090 	ldr.w	r3, [r2, #144]	@ 0x90
 8002c7a:	f043 0301 	orr.w	r3, r3, #1
 8002c7e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002c82:	e7cc      	b.n	8002c1e <HAL_RCC_OscConfig+0x242>
 8002c84:	40021000 	.word	0x40021000
 8002c88:	20000020 	.word	0x20000020
 8002c8c:	40007000 	.word	0x40007000
 8002c90:	4b88      	ldr	r3, [pc, #544]	@ (8002eb4 <HAL_RCC_OscConfig+0x4d8>)
 8002c92:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 8002c96:	f042 0204 	orr.w	r2, r2, #4
 8002c9a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
 8002c9e:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 8002ca2:	f042 0201 	orr.w	r2, r2, #1
 8002ca6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
 8002caa:	e7b8      	b.n	8002c1e <HAL_RCC_OscConfig+0x242>
      tickstart = HAL_GetTick();
 8002cac:	f7fe fd06 	bl	80016bc <HAL_GetTick>
 8002cb0:	4606      	mov	r6, r0
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002cb2:	4b80      	ldr	r3, [pc, #512]	@ (8002eb4 <HAL_RCC_OscConfig+0x4d8>)
 8002cb4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002cb8:	f013 0f02 	tst.w	r3, #2
 8002cbc:	d008      	beq.n	8002cd0 <HAL_RCC_OscConfig+0x2f4>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002cbe:	f7fe fcfd 	bl	80016bc <HAL_GetTick>
 8002cc2:	1b80      	subs	r0, r0, r6
 8002cc4:	f241 3388 	movw	r3, #5000	@ 0x1388
 8002cc8:	4298      	cmp	r0, r3
 8002cca:	d9f2      	bls.n	8002cb2 <HAL_RCC_OscConfig+0x2d6>
          return HAL_TIMEOUT;
 8002ccc:	2003      	movs	r0, #3
 8002cce:	e0e0      	b.n	8002e92 <HAL_RCC_OscConfig+0x4b6>
    if (pwrclkchanged == SET)
 8002cd0:	b9e5      	cbnz	r5, 8002d0c <HAL_RCC_OscConfig+0x330>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002cd2:	6823      	ldr	r3, [r4, #0]
 8002cd4:	f013 0f20 	tst.w	r3, #32
 8002cd8:	d035      	beq.n	8002d46 <HAL_RCC_OscConfig+0x36a>
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002cda:	69a3      	ldr	r3, [r4, #24]
 8002cdc:	b1e3      	cbz	r3, 8002d18 <HAL_RCC_OscConfig+0x33c>
      __HAL_RCC_HSI48_ENABLE();
 8002cde:	4a75      	ldr	r2, [pc, #468]	@ (8002eb4 <HAL_RCC_OscConfig+0x4d8>)
 8002ce0:	f8d2 3098 	ldr.w	r3, [r2, #152]	@ 0x98
 8002ce4:	f043 0301 	orr.w	r3, r3, #1
 8002ce8:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98
      tickstart = HAL_GetTick();
 8002cec:	f7fe fce6 	bl	80016bc <HAL_GetTick>
 8002cf0:	4605      	mov	r5, r0
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002cf2:	4b70      	ldr	r3, [pc, #448]	@ (8002eb4 <HAL_RCC_OscConfig+0x4d8>)
 8002cf4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002cf8:	f013 0f02 	tst.w	r3, #2
 8002cfc:	d123      	bne.n	8002d46 <HAL_RCC_OscConfig+0x36a>
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002cfe:	f7fe fcdd 	bl	80016bc <HAL_GetTick>
 8002d02:	1b40      	subs	r0, r0, r5
 8002d04:	2802      	cmp	r0, #2
 8002d06:	d9f4      	bls.n	8002cf2 <HAL_RCC_OscConfig+0x316>
          return HAL_TIMEOUT;
 8002d08:	2003      	movs	r0, #3
 8002d0a:	e0c2      	b.n	8002e92 <HAL_RCC_OscConfig+0x4b6>
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d0c:	4a69      	ldr	r2, [pc, #420]	@ (8002eb4 <HAL_RCC_OscConfig+0x4d8>)
 8002d0e:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 8002d10:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002d14:	6593      	str	r3, [r2, #88]	@ 0x58
 8002d16:	e7dc      	b.n	8002cd2 <HAL_RCC_OscConfig+0x2f6>
      __HAL_RCC_HSI48_DISABLE();
 8002d18:	4a66      	ldr	r2, [pc, #408]	@ (8002eb4 <HAL_RCC_OscConfig+0x4d8>)
 8002d1a:	f8d2 3098 	ldr.w	r3, [r2, #152]	@ 0x98
 8002d1e:	f023 0301 	bic.w	r3, r3, #1
 8002d22:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98
      tickstart = HAL_GetTick();
 8002d26:	f7fe fcc9 	bl	80016bc <HAL_GetTick>
 8002d2a:	4605      	mov	r5, r0
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002d2c:	4b61      	ldr	r3, [pc, #388]	@ (8002eb4 <HAL_RCC_OscConfig+0x4d8>)
 8002d2e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002d32:	f013 0f02 	tst.w	r3, #2
 8002d36:	d006      	beq.n	8002d46 <HAL_RCC_OscConfig+0x36a>
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002d38:	f7fe fcc0 	bl	80016bc <HAL_GetTick>
 8002d3c:	1b40      	subs	r0, r0, r5
 8002d3e:	2802      	cmp	r0, #2
 8002d40:	d9f4      	bls.n	8002d2c <HAL_RCC_OscConfig+0x350>
          return HAL_TIMEOUT;
 8002d42:	2003      	movs	r0, #3
 8002d44:	e0a5      	b.n	8002e92 <HAL_RCC_OscConfig+0x4b6>
  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002d46:	69e3      	ldr	r3, [r4, #28]
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	f000 80a1 	beq.w	8002e90 <HAL_RCC_OscConfig+0x4b4>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002d4e:	4a59      	ldr	r2, [pc, #356]	@ (8002eb4 <HAL_RCC_OscConfig+0x4d8>)
 8002d50:	6892      	ldr	r2, [r2, #8]
 8002d52:	f002 020c 	and.w	r2, r2, #12
 8002d56:	2a0c      	cmp	r2, #12
 8002d58:	d064      	beq.n	8002e24 <HAL_RCC_OscConfig+0x448>
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002d5a:	2b02      	cmp	r3, #2
 8002d5c:	d013      	beq.n	8002d86 <HAL_RCC_OscConfig+0x3aa>
        __HAL_RCC_PLL_DISABLE();
 8002d5e:	4a55      	ldr	r2, [pc, #340]	@ (8002eb4 <HAL_RCC_OscConfig+0x4d8>)
 8002d60:	6813      	ldr	r3, [r2, #0]
 8002d62:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002d66:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8002d68:	f7fe fca8 	bl	80016bc <HAL_GetTick>
 8002d6c:	4604      	mov	r4, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002d6e:	4b51      	ldr	r3, [pc, #324]	@ (8002eb4 <HAL_RCC_OscConfig+0x4d8>)
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 8002d76:	d04e      	beq.n	8002e16 <HAL_RCC_OscConfig+0x43a>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d78:	f7fe fca0 	bl	80016bc <HAL_GetTick>
 8002d7c:	1b00      	subs	r0, r0, r4
 8002d7e:	2802      	cmp	r0, #2
 8002d80:	d9f5      	bls.n	8002d6e <HAL_RCC_OscConfig+0x392>
            return HAL_TIMEOUT;
 8002d82:	2003      	movs	r0, #3
 8002d84:	e085      	b.n	8002e92 <HAL_RCC_OscConfig+0x4b6>
        __HAL_RCC_PLL_DISABLE();
 8002d86:	4a4b      	ldr	r2, [pc, #300]	@ (8002eb4 <HAL_RCC_OscConfig+0x4d8>)
 8002d88:	6813      	ldr	r3, [r2, #0]
 8002d8a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002d8e:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8002d90:	f7fe fc94 	bl	80016bc <HAL_GetTick>
 8002d94:	4605      	mov	r5, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002d96:	4b47      	ldr	r3, [pc, #284]	@ (8002eb4 <HAL_RCC_OscConfig+0x4d8>)
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 8002d9e:	d006      	beq.n	8002dae <HAL_RCC_OscConfig+0x3d2>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002da0:	f7fe fc8c 	bl	80016bc <HAL_GetTick>
 8002da4:	1b40      	subs	r0, r0, r5
 8002da6:	2802      	cmp	r0, #2
 8002da8:	d9f5      	bls.n	8002d96 <HAL_RCC_OscConfig+0x3ba>
            return HAL_TIMEOUT;
 8002daa:	2003      	movs	r0, #3
 8002dac:	e071      	b.n	8002e92 <HAL_RCC_OscConfig+0x4b6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002dae:	4a41      	ldr	r2, [pc, #260]	@ (8002eb4 <HAL_RCC_OscConfig+0x4d8>)
 8002db0:	68d3      	ldr	r3, [r2, #12]
 8002db2:	4941      	ldr	r1, [pc, #260]	@ (8002eb8 <HAL_RCC_OscConfig+0x4dc>)
 8002db4:	4019      	ands	r1, r3
 8002db6:	6a23      	ldr	r3, [r4, #32]
 8002db8:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 8002dba:	3801      	subs	r0, #1
 8002dbc:	ea43 1300 	orr.w	r3, r3, r0, lsl #4
 8002dc0:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 8002dc2:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 8002dc6:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 8002dc8:	0840      	lsrs	r0, r0, #1
 8002dca:	3801      	subs	r0, #1
 8002dcc:	ea43 5340 	orr.w	r3, r3, r0, lsl #21
 8002dd0:	6b60      	ldr	r0, [r4, #52]	@ 0x34
 8002dd2:	0840      	lsrs	r0, r0, #1
 8002dd4:	3801      	subs	r0, #1
 8002dd6:	ea43 6340 	orr.w	r3, r3, r0, lsl #25
 8002dda:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 8002ddc:	ea43 63c0 	orr.w	r3, r3, r0, lsl #27
 8002de0:	4319      	orrs	r1, r3
 8002de2:	60d1      	str	r1, [r2, #12]
        __HAL_RCC_PLL_ENABLE();
 8002de4:	6813      	ldr	r3, [r2, #0]
 8002de6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002dea:	6013      	str	r3, [r2, #0]
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002dec:	68d3      	ldr	r3, [r2, #12]
 8002dee:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002df2:	60d3      	str	r3, [r2, #12]
        tickstart = HAL_GetTick();
 8002df4:	f7fe fc62 	bl	80016bc <HAL_GetTick>
 8002df8:	4604      	mov	r4, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002dfa:	4b2e      	ldr	r3, [pc, #184]	@ (8002eb4 <HAL_RCC_OscConfig+0x4d8>)
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 8002e02:	d106      	bne.n	8002e12 <HAL_RCC_OscConfig+0x436>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e04:	f7fe fc5a 	bl	80016bc <HAL_GetTick>
 8002e08:	1b00      	subs	r0, r0, r4
 8002e0a:	2802      	cmp	r0, #2
 8002e0c:	d9f5      	bls.n	8002dfa <HAL_RCC_OscConfig+0x41e>
            return HAL_TIMEOUT;
 8002e0e:	2003      	movs	r0, #3
 8002e10:	e03f      	b.n	8002e92 <HAL_RCC_OscConfig+0x4b6>
  return HAL_OK;
 8002e12:	2000      	movs	r0, #0
 8002e14:	e03d      	b.n	8002e92 <HAL_RCC_OscConfig+0x4b6>
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8002e16:	4a27      	ldr	r2, [pc, #156]	@ (8002eb4 <HAL_RCC_OscConfig+0x4d8>)
 8002e18:	68d1      	ldr	r1, [r2, #12]
 8002e1a:	4b28      	ldr	r3, [pc, #160]	@ (8002ebc <HAL_RCC_OscConfig+0x4e0>)
 8002e1c:	400b      	ands	r3, r1
 8002e1e:	60d3      	str	r3, [r2, #12]
  return HAL_OK;
 8002e20:	2000      	movs	r0, #0
 8002e22:	e036      	b.n	8002e92 <HAL_RCC_OscConfig+0x4b6>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002e24:	2b01      	cmp	r3, #1
 8002e26:	d036      	beq.n	8002e96 <HAL_RCC_OscConfig+0x4ba>
      temp_pllckcfg = RCC->PLLCFGR;
 8002e28:	4b22      	ldr	r3, [pc, #136]	@ (8002eb4 <HAL_RCC_OscConfig+0x4d8>)
 8002e2a:	68db      	ldr	r3, [r3, #12]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e2c:	f003 0103 	and.w	r1, r3, #3
 8002e30:	6a22      	ldr	r2, [r4, #32]
 8002e32:	4291      	cmp	r1, r2
 8002e34:	d131      	bne.n	8002e9a <HAL_RCC_OscConfig+0x4be>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002e36:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8002e3a:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8002e3c:	3901      	subs	r1, #1
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e3e:	ebb2 1f01 	cmp.w	r2, r1, lsl #4
 8002e42:	d12c      	bne.n	8002e9e <HAL_RCC_OscConfig+0x4c2>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8002e44:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8002e48:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002e4a:	ebb2 2f01 	cmp.w	r2, r1, lsl #8
 8002e4e:	d128      	bne.n	8002ea2 <HAL_RCC_OscConfig+0x4c6>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002e50:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8002e54:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8002e56:	ebb2 6fc1 	cmp.w	r2, r1, lsl #27
 8002e5a:	d124      	bne.n	8002ea6 <HAL_RCC_OscConfig+0x4ca>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002e5c:	f403 01c0 	and.w	r1, r3, #6291456	@ 0x600000
 8002e60:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8002e62:	0852      	lsrs	r2, r2, #1
 8002e64:	3a01      	subs	r2, #1
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002e66:	ebb1 5f42 	cmp.w	r1, r2, lsl #21
 8002e6a:	d11e      	bne.n	8002eaa <HAL_RCC_OscConfig+0x4ce>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002e6c:	f003 63c0 	and.w	r3, r3, #100663296	@ 0x6000000
 8002e70:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 8002e72:	0852      	lsrs	r2, r2, #1
 8002e74:	3a01      	subs	r2, #1
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002e76:	ebb3 6f42 	cmp.w	r3, r2, lsl #25
 8002e7a:	d118      	bne.n	8002eae <HAL_RCC_OscConfig+0x4d2>
  return HAL_OK;
 8002e7c:	2000      	movs	r0, #0
 8002e7e:	e008      	b.n	8002e92 <HAL_RCC_OscConfig+0x4b6>
    return HAL_ERROR;
 8002e80:	2001      	movs	r0, #1
}
 8002e82:	4770      	bx	lr
        return HAL_ERROR;
 8002e84:	2001      	movs	r0, #1
 8002e86:	e004      	b.n	8002e92 <HAL_RCC_OscConfig+0x4b6>
        return HAL_ERROR;
 8002e88:	2001      	movs	r0, #1
 8002e8a:	e002      	b.n	8002e92 <HAL_RCC_OscConfig+0x4b6>
          return HAL_ERROR;
 8002e8c:	2001      	movs	r0, #1
 8002e8e:	e000      	b.n	8002e92 <HAL_RCC_OscConfig+0x4b6>
  return HAL_OK;
 8002e90:	2000      	movs	r0, #0
}
 8002e92:	b002      	add	sp, #8
 8002e94:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_ERROR;
 8002e96:	2001      	movs	r0, #1
 8002e98:	e7fb      	b.n	8002e92 <HAL_RCC_OscConfig+0x4b6>
        return HAL_ERROR;
 8002e9a:	2001      	movs	r0, #1
 8002e9c:	e7f9      	b.n	8002e92 <HAL_RCC_OscConfig+0x4b6>
 8002e9e:	2001      	movs	r0, #1
 8002ea0:	e7f7      	b.n	8002e92 <HAL_RCC_OscConfig+0x4b6>
 8002ea2:	2001      	movs	r0, #1
 8002ea4:	e7f5      	b.n	8002e92 <HAL_RCC_OscConfig+0x4b6>
 8002ea6:	2001      	movs	r0, #1
 8002ea8:	e7f3      	b.n	8002e92 <HAL_RCC_OscConfig+0x4b6>
 8002eaa:	2001      	movs	r0, #1
 8002eac:	e7f1      	b.n	8002e92 <HAL_RCC_OscConfig+0x4b6>
 8002eae:	2001      	movs	r0, #1
 8002eb0:	e7ef      	b.n	8002e92 <HAL_RCC_OscConfig+0x4b6>
 8002eb2:	bf00      	nop
 8002eb4:	40021000 	.word	0x40021000
 8002eb8:	019f800c 	.word	0x019f800c
 8002ebc:	feeefffc 	.word	0xfeeefffc

08002ec0 <HAL_RCC_GetSysClockFreq>:
  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8002ec0:	4b1e      	ldr	r3, [pc, #120]	@ (8002f3c <HAL_RCC_GetSysClockFreq+0x7c>)
 8002ec2:	689b      	ldr	r3, [r3, #8]
 8002ec4:	f003 030c 	and.w	r3, r3, #12
 8002ec8:	2b04      	cmp	r3, #4
 8002eca:	d033      	beq.n	8002f34 <HAL_RCC_GetSysClockFreq+0x74>
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8002ecc:	4b1b      	ldr	r3, [pc, #108]	@ (8002f3c <HAL_RCC_GetSysClockFreq+0x7c>)
 8002ece:	689b      	ldr	r3, [r3, #8]
 8002ed0:	f003 030c 	and.w	r3, r3, #12
 8002ed4:	2b08      	cmp	r3, #8
 8002ed6:	d02f      	beq.n	8002f38 <HAL_RCC_GetSysClockFreq+0x78>
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8002ed8:	4b18      	ldr	r3, [pc, #96]	@ (8002f3c <HAL_RCC_GetSysClockFreq+0x7c>)
 8002eda:	689b      	ldr	r3, [r3, #8]
 8002edc:	f003 030c 	and.w	r3, r3, #12
 8002ee0:	2b0c      	cmp	r3, #12
 8002ee2:	d001      	beq.n	8002ee8 <HAL_RCC_GetSysClockFreq+0x28>
    sysclockfreq = 0U;
 8002ee4:	2000      	movs	r0, #0
}
 8002ee6:	4770      	bx	lr
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002ee8:	4b14      	ldr	r3, [pc, #80]	@ (8002f3c <HAL_RCC_GetSysClockFreq+0x7c>)
 8002eea:	68da      	ldr	r2, [r3, #12]
 8002eec:	f002 0203 	and.w	r2, r2, #3
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002ef0:	68db      	ldr	r3, [r3, #12]
 8002ef2:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8002ef6:	3301      	adds	r3, #1
    switch (pllsource)
 8002ef8:	2a03      	cmp	r2, #3
 8002efa:	d011      	beq.n	8002f20 <HAL_RCC_GetSysClockFreq+0x60>
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002efc:	4810      	ldr	r0, [pc, #64]	@ (8002f40 <HAL_RCC_GetSysClockFreq+0x80>)
 8002efe:	fbb0 f0f3 	udiv	r0, r0, r3
 8002f02:	4b0e      	ldr	r3, [pc, #56]	@ (8002f3c <HAL_RCC_GetSysClockFreq+0x7c>)
 8002f04:	68db      	ldr	r3, [r3, #12]
 8002f06:	f3c3 2306 	ubfx	r3, r3, #8, #7
 8002f0a:	fb03 f000 	mul.w	r0, r3, r0
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002f0e:	4b0b      	ldr	r3, [pc, #44]	@ (8002f3c <HAL_RCC_GetSysClockFreq+0x7c>)
 8002f10:	68db      	ldr	r3, [r3, #12]
 8002f12:	f3c3 6341 	ubfx	r3, r3, #25, #2
 8002f16:	3301      	adds	r3, #1
 8002f18:	005b      	lsls	r3, r3, #1
    sysclockfreq = pllvco/pllr;
 8002f1a:	fbb0 f0f3 	udiv	r0, r0, r3
 8002f1e:	4770      	bx	lr
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002f20:	4808      	ldr	r0, [pc, #32]	@ (8002f44 <HAL_RCC_GetSysClockFreq+0x84>)
 8002f22:	fbb0 f0f3 	udiv	r0, r0, r3
 8002f26:	4b05      	ldr	r3, [pc, #20]	@ (8002f3c <HAL_RCC_GetSysClockFreq+0x7c>)
 8002f28:	68db      	ldr	r3, [r3, #12]
 8002f2a:	f3c3 2306 	ubfx	r3, r3, #8, #7
 8002f2e:	fb03 f000 	mul.w	r0, r3, r0
      break;
 8002f32:	e7ec      	b.n	8002f0e <HAL_RCC_GetSysClockFreq+0x4e>
    sysclockfreq = HSI_VALUE;
 8002f34:	4802      	ldr	r0, [pc, #8]	@ (8002f40 <HAL_RCC_GetSysClockFreq+0x80>)
 8002f36:	4770      	bx	lr
    sysclockfreq = HSE_VALUE;
 8002f38:	4802      	ldr	r0, [pc, #8]	@ (8002f44 <HAL_RCC_GetSysClockFreq+0x84>)
 8002f3a:	4770      	bx	lr
 8002f3c:	40021000 	.word	0x40021000
 8002f40:	00f42400 	.word	0x00f42400
 8002f44:	007a1200 	.word	0x007a1200

08002f48 <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 8002f48:	2800      	cmp	r0, #0
 8002f4a:	f000 80e6 	beq.w	800311a <HAL_RCC_ClockConfig+0x1d2>
{
 8002f4e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f50:	460c      	mov	r4, r1
 8002f52:	4605      	mov	r5, r0
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002f54:	4b74      	ldr	r3, [pc, #464]	@ (8003128 <HAL_RCC_ClockConfig+0x1e0>)
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	f003 030f 	and.w	r3, r3, #15
 8002f5c:	428b      	cmp	r3, r1
 8002f5e:	d20b      	bcs.n	8002f78 <HAL_RCC_ClockConfig+0x30>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f60:	4a71      	ldr	r2, [pc, #452]	@ (8003128 <HAL_RCC_ClockConfig+0x1e0>)
 8002f62:	6813      	ldr	r3, [r2, #0]
 8002f64:	f023 030f 	bic.w	r3, r3, #15
 8002f68:	430b      	orrs	r3, r1
 8002f6a:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f6c:	6813      	ldr	r3, [r2, #0]
 8002f6e:	f003 030f 	and.w	r3, r3, #15
 8002f72:	428b      	cmp	r3, r1
 8002f74:	f040 80d3 	bne.w	800311e <HAL_RCC_ClockConfig+0x1d6>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002f78:	682e      	ldr	r6, [r5, #0]
 8002f7a:	f016 0601 	ands.w	r6, r6, #1
 8002f7e:	d05f      	beq.n	8003040 <HAL_RCC_ClockConfig+0xf8>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002f80:	686b      	ldr	r3, [r5, #4]
 8002f82:	2b03      	cmp	r3, #3
 8002f84:	d02f      	beq.n	8002fe6 <HAL_RCC_ClockConfig+0x9e>
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002f86:	2b02      	cmp	r3, #2
 8002f88:	d04d      	beq.n	8003026 <HAL_RCC_ClockConfig+0xde>
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002f8a:	4b68      	ldr	r3, [pc, #416]	@ (800312c <HAL_RCC_ClockConfig+0x1e4>)
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	f413 6f80 	tst.w	r3, #1024	@ 0x400
 8002f92:	f000 80c6 	beq.w	8003122 <HAL_RCC_ClockConfig+0x1da>
      pllfreq = HAL_RCC_GetSysClockFreq();
 8002f96:	f7ff ff93 	bl	8002ec0 <HAL_RCC_GetSysClockFreq>
      if(pllfreq > 80000000U)
 8002f9a:	4b65      	ldr	r3, [pc, #404]	@ (8003130 <HAL_RCC_ClockConfig+0x1e8>)
 8002f9c:	4298      	cmp	r0, r3
 8002f9e:	d94d      	bls.n	800303c <HAL_RCC_ClockConfig+0xf4>
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002fa0:	4a62      	ldr	r2, [pc, #392]	@ (800312c <HAL_RCC_ClockConfig+0x1e4>)
 8002fa2:	6893      	ldr	r3, [r2, #8]
 8002fa4:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002fa8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002fac:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8002fae:	2680      	movs	r6, #128	@ 0x80
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002fb0:	4a5e      	ldr	r2, [pc, #376]	@ (800312c <HAL_RCC_ClockConfig+0x1e4>)
 8002fb2:	6893      	ldr	r3, [r2, #8]
 8002fb4:	f023 0303 	bic.w	r3, r3, #3
 8002fb8:	6869      	ldr	r1, [r5, #4]
 8002fba:	430b      	orrs	r3, r1
 8002fbc:	6093      	str	r3, [r2, #8]
    tickstart = HAL_GetTick();
 8002fbe:	f7fe fb7d 	bl	80016bc <HAL_GetTick>
 8002fc2:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002fc4:	4b59      	ldr	r3, [pc, #356]	@ (800312c <HAL_RCC_ClockConfig+0x1e4>)
 8002fc6:	689b      	ldr	r3, [r3, #8]
 8002fc8:	f003 030c 	and.w	r3, r3, #12
 8002fcc:	686a      	ldr	r2, [r5, #4]
 8002fce:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8002fd2:	d035      	beq.n	8003040 <HAL_RCC_ClockConfig+0xf8>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002fd4:	f7fe fb72 	bl	80016bc <HAL_GetTick>
 8002fd8:	1bc0      	subs	r0, r0, r7
 8002fda:	f241 3388 	movw	r3, #5000	@ 0x1388
 8002fde:	4298      	cmp	r0, r3
 8002fe0:	d9f0      	bls.n	8002fc4 <HAL_RCC_ClockConfig+0x7c>
        return HAL_TIMEOUT;
 8002fe2:	2003      	movs	r0, #3
 8002fe4:	e078      	b.n	80030d8 <HAL_RCC_ClockConfig+0x190>
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002fe6:	4b51      	ldr	r3, [pc, #324]	@ (800312c <HAL_RCC_ClockConfig+0x1e4>)
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 8002fee:	d101      	bne.n	8002ff4 <HAL_RCC_ClockConfig+0xac>
        return HAL_ERROR;
 8002ff0:	2001      	movs	r0, #1
 8002ff2:	e071      	b.n	80030d8 <HAL_RCC_ClockConfig+0x190>
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8002ff4:	f7ff fcc6 	bl	8002984 <RCC_GetSysClockFreqFromPLLSource>
      if(pllfreq > 80000000U)
 8002ff8:	4b4d      	ldr	r3, [pc, #308]	@ (8003130 <HAL_RCC_ClockConfig+0x1e8>)
 8002ffa:	4298      	cmp	r0, r3
 8002ffc:	d91a      	bls.n	8003034 <HAL_RCC_ClockConfig+0xec>
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8002ffe:	4b4b      	ldr	r3, [pc, #300]	@ (800312c <HAL_RCC_ClockConfig+0x1e4>)
 8003000:	689b      	ldr	r3, [r3, #8]
 8003002:	f013 0ff0 	tst.w	r3, #240	@ 0xf0
 8003006:	d005      	beq.n	8003014 <HAL_RCC_ClockConfig+0xcc>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003008:	682e      	ldr	r6, [r5, #0]
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800300a:	f016 0602 	ands.w	r6, r6, #2
 800300e:	d0cf      	beq.n	8002fb0 <HAL_RCC_ClockConfig+0x68>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8003010:	68ab      	ldr	r3, [r5, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003012:	b98b      	cbnz	r3, 8003038 <HAL_RCC_ClockConfig+0xf0>
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003014:	4a45      	ldr	r2, [pc, #276]	@ (800312c <HAL_RCC_ClockConfig+0x1e4>)
 8003016:	6893      	ldr	r3, [r2, #8]
 8003018:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800301c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003020:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8003022:	2680      	movs	r6, #128	@ 0x80
 8003024:	e7c4      	b.n	8002fb0 <HAL_RCC_ClockConfig+0x68>
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003026:	4b41      	ldr	r3, [pc, #260]	@ (800312c <HAL_RCC_ClockConfig+0x1e4>)
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 800302e:	d1b2      	bne.n	8002f96 <HAL_RCC_ClockConfig+0x4e>
          return HAL_ERROR;
 8003030:	2001      	movs	r0, #1
 8003032:	e051      	b.n	80030d8 <HAL_RCC_ClockConfig+0x190>
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8003034:	2600      	movs	r6, #0
 8003036:	e7bb      	b.n	8002fb0 <HAL_RCC_ClockConfig+0x68>
 8003038:	2600      	movs	r6, #0
 800303a:	e7b9      	b.n	8002fb0 <HAL_RCC_ClockConfig+0x68>
 800303c:	2600      	movs	r6, #0
 800303e:	e7b7      	b.n	8002fb0 <HAL_RCC_ClockConfig+0x68>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003040:	682b      	ldr	r3, [r5, #0]
 8003042:	f013 0f02 	tst.w	r3, #2
 8003046:	d048      	beq.n	80030da <HAL_RCC_ClockConfig+0x192>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003048:	f013 0f04 	tst.w	r3, #4
 800304c:	d004      	beq.n	8003058 <HAL_RCC_ClockConfig+0x110>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800304e:	4a37      	ldr	r2, [pc, #220]	@ (800312c <HAL_RCC_ClockConfig+0x1e4>)
 8003050:	6893      	ldr	r3, [r2, #8]
 8003052:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8003056:	6093      	str	r3, [r2, #8]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003058:	682b      	ldr	r3, [r5, #0]
 800305a:	f013 0f08 	tst.w	r3, #8
 800305e:	d006      	beq.n	800306e <HAL_RCC_ClockConfig+0x126>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8003060:	4a32      	ldr	r2, [pc, #200]	@ (800312c <HAL_RCC_ClockConfig+0x1e4>)
 8003062:	6893      	ldr	r3, [r2, #8]
 8003064:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8003068:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800306c:	6093      	str	r3, [r2, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800306e:	4a2f      	ldr	r2, [pc, #188]	@ (800312c <HAL_RCC_ClockConfig+0x1e4>)
 8003070:	6893      	ldr	r3, [r2, #8]
 8003072:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003076:	68a9      	ldr	r1, [r5, #8]
 8003078:	430b      	orrs	r3, r1
 800307a:	6093      	str	r3, [r2, #8]
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800307c:	4b2a      	ldr	r3, [pc, #168]	@ (8003128 <HAL_RCC_ClockConfig+0x1e0>)
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	f003 030f 	and.w	r3, r3, #15
 8003084:	42a3      	cmp	r3, r4
 8003086:	d830      	bhi.n	80030ea <HAL_RCC_ClockConfig+0x1a2>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003088:	682b      	ldr	r3, [r5, #0]
 800308a:	f013 0f04 	tst.w	r3, #4
 800308e:	d006      	beq.n	800309e <HAL_RCC_ClockConfig+0x156>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003090:	4a26      	ldr	r2, [pc, #152]	@ (800312c <HAL_RCC_ClockConfig+0x1e4>)
 8003092:	6893      	ldr	r3, [r2, #8]
 8003094:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8003098:	68e9      	ldr	r1, [r5, #12]
 800309a:	430b      	orrs	r3, r1
 800309c:	6093      	str	r3, [r2, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800309e:	682b      	ldr	r3, [r5, #0]
 80030a0:	f013 0f08 	tst.w	r3, #8
 80030a4:	d007      	beq.n	80030b6 <HAL_RCC_ClockConfig+0x16e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80030a6:	4a21      	ldr	r2, [pc, #132]	@ (800312c <HAL_RCC_ClockConfig+0x1e4>)
 80030a8:	6893      	ldr	r3, [r2, #8]
 80030aa:	f423 5360 	bic.w	r3, r3, #14336	@ 0x3800
 80030ae:	6929      	ldr	r1, [r5, #16]
 80030b0:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80030b4:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80030b6:	f7ff ff03 	bl	8002ec0 <HAL_RCC_GetSysClockFreq>
 80030ba:	4b1c      	ldr	r3, [pc, #112]	@ (800312c <HAL_RCC_ClockConfig+0x1e4>)
 80030bc:	689b      	ldr	r3, [r3, #8]
 80030be:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80030c2:	4a1c      	ldr	r2, [pc, #112]	@ (8003134 <HAL_RCC_ClockConfig+0x1ec>)
 80030c4:	5cd3      	ldrb	r3, [r2, r3]
 80030c6:	f003 031f 	and.w	r3, r3, #31
 80030ca:	40d8      	lsrs	r0, r3
 80030cc:	4b1a      	ldr	r3, [pc, #104]	@ (8003138 <HAL_RCC_ClockConfig+0x1f0>)
 80030ce:	6018      	str	r0, [r3, #0]
  return HAL_InitTick(uwTickPrio);
 80030d0:	4b1a      	ldr	r3, [pc, #104]	@ (800313c <HAL_RCC_ClockConfig+0x1f4>)
 80030d2:	6818      	ldr	r0, [r3, #0]
 80030d4:	f7fe faae 	bl	8001634 <HAL_InitTick>
}
 80030d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if(hpre == RCC_SYSCLK_DIV2)
 80030da:	2e80      	cmp	r6, #128	@ 0x80
 80030dc:	d1ce      	bne.n	800307c <HAL_RCC_ClockConfig+0x134>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80030de:	4a13      	ldr	r2, [pc, #76]	@ (800312c <HAL_RCC_ClockConfig+0x1e4>)
 80030e0:	6893      	ldr	r3, [r2, #8]
 80030e2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80030e6:	6093      	str	r3, [r2, #8]
 80030e8:	e7c8      	b.n	800307c <HAL_RCC_ClockConfig+0x134>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030ea:	4a0f      	ldr	r2, [pc, #60]	@ (8003128 <HAL_RCC_ClockConfig+0x1e0>)
 80030ec:	6813      	ldr	r3, [r2, #0]
 80030ee:	f023 030f 	bic.w	r3, r3, #15
 80030f2:	4323      	orrs	r3, r4
 80030f4:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 80030f6:	f7fe fae1 	bl	80016bc <HAL_GetTick>
 80030fa:	4606      	mov	r6, r0
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80030fc:	4b0a      	ldr	r3, [pc, #40]	@ (8003128 <HAL_RCC_ClockConfig+0x1e0>)
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	f003 030f 	and.w	r3, r3, #15
 8003104:	42a3      	cmp	r3, r4
 8003106:	d0bf      	beq.n	8003088 <HAL_RCC_ClockConfig+0x140>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003108:	f7fe fad8 	bl	80016bc <HAL_GetTick>
 800310c:	1b80      	subs	r0, r0, r6
 800310e:	f241 3388 	movw	r3, #5000	@ 0x1388
 8003112:	4298      	cmp	r0, r3
 8003114:	d9f2      	bls.n	80030fc <HAL_RCC_ClockConfig+0x1b4>
        return HAL_TIMEOUT;
 8003116:	2003      	movs	r0, #3
 8003118:	e7de      	b.n	80030d8 <HAL_RCC_ClockConfig+0x190>
    return HAL_ERROR;
 800311a:	2001      	movs	r0, #1
}
 800311c:	4770      	bx	lr
      return HAL_ERROR;
 800311e:	2001      	movs	r0, #1
 8003120:	e7da      	b.n	80030d8 <HAL_RCC_ClockConfig+0x190>
          return HAL_ERROR;
 8003122:	2001      	movs	r0, #1
 8003124:	e7d8      	b.n	80030d8 <HAL_RCC_ClockConfig+0x190>
 8003126:	bf00      	nop
 8003128:	40022000 	.word	0x40022000
 800312c:	40021000 	.word	0x40021000
 8003130:	04c4b400 	.word	0x04c4b400
 8003134:	08003e34 	.word	0x08003e34
 8003138:	20000018 	.word	0x20000018
 800313c:	20000020 	.word	0x20000020

08003140 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003140:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003142:	b083      	sub	sp, #12
 8003144:	4604      	mov	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003146:	6803      	ldr	r3, [r0, #0]
 8003148:	f413 2f00 	tst.w	r3, #524288	@ 0x80000
 800314c:	d069      	beq.n	8003222 <HAL_RCCEx_PeriphCLKConfig+0xe2>
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800314e:	4bae      	ldr	r3, [pc, #696]	@ (8003408 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 8003150:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003152:	f013 5f80 	tst.w	r3, #268435456	@ 0x10000000
 8003156:	d11e      	bne.n	8003196 <HAL_RCCEx_PeriphCLKConfig+0x56>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003158:	4bab      	ldr	r3, [pc, #684]	@ (8003408 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 800315a:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800315c:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8003160:	659a      	str	r2, [r3, #88]	@ 0x58
 8003162:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003164:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003168:	9301      	str	r3, [sp, #4]
 800316a:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 800316c:	2601      	movs	r6, #1
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800316e:	4aa7      	ldr	r2, [pc, #668]	@ (800340c <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8003170:	6813      	ldr	r3, [r2, #0]
 8003172:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003176:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003178:	f7fe faa0 	bl	80016bc <HAL_GetTick>
 800317c:	4605      	mov	r5, r0

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800317e:	4ba3      	ldr	r3, [pc, #652]	@ (800340c <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8003186:	d108      	bne.n	800319a <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003188:	f7fe fa98 	bl	80016bc <HAL_GetTick>
 800318c:	1b40      	subs	r0, r0, r5
 800318e:	2802      	cmp	r0, #2
 8003190:	d9f5      	bls.n	800317e <HAL_RCCEx_PeriphCLKConfig+0x3e>
      {
        ret = HAL_TIMEOUT;
 8003192:	2503      	movs	r5, #3
 8003194:	e002      	b.n	800319c <HAL_RCCEx_PeriphCLKConfig+0x5c>
    FlagStatus       pwrclkchanged = RESET;
 8003196:	2600      	movs	r6, #0
 8003198:	e7e9      	b.n	800316e <HAL_RCCEx_PeriphCLKConfig+0x2e>
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800319a:	2500      	movs	r5, #0
        break;
      }
    }

    if(ret == HAL_OK)
 800319c:	bb45      	cbnz	r5, 80031f0 <HAL_RCCEx_PeriphCLKConfig+0xb0>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800319e:	4b9a      	ldr	r3, [pc, #616]	@ (8003408 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 80031a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80031a4:	f413 7340 	ands.w	r3, r3, #768	@ 0x300
 80031a8:	d018      	beq.n	80031dc <HAL_RCCEx_PeriphCLKConfig+0x9c>
 80031aa:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 80031ac:	429a      	cmp	r2, r3
 80031ae:	d012      	beq.n	80031d6 <HAL_RCCEx_PeriphCLKConfig+0x96>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80031b0:	4a95      	ldr	r2, [pc, #596]	@ (8003408 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 80031b2:	f8d2 3090 	ldr.w	r3, [r2, #144]	@ 0x90
 80031b6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80031ba:	f8d2 1090 	ldr.w	r1, [r2, #144]	@ 0x90
 80031be:	f441 3180 	orr.w	r1, r1, #65536	@ 0x10000
 80031c2:	f8c2 1090 	str.w	r1, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80031c6:	f8d2 1090 	ldr.w	r1, [r2, #144]	@ 0x90
 80031ca:	f421 3180 	bic.w	r1, r1, #65536	@ 0x10000
 80031ce:	f8c2 1090 	str.w	r1, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80031d2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80031d6:	f013 0f01 	tst.w	r3, #1
 80031da:	d110      	bne.n	80031fe <HAL_RCCEx_PeriphCLKConfig+0xbe>
            break;
          }
        }
      }
      
      if(ret == HAL_OK)
 80031dc:	b945      	cbnz	r5, 80031f0 <HAL_RCCEx_PeriphCLKConfig+0xb0>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80031de:	4a8a      	ldr	r2, [pc, #552]	@ (8003408 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 80031e0:	f8d2 3090 	ldr.w	r3, [r2, #144]	@ 0x90
 80031e4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80031e8:	6c21      	ldr	r1, [r4, #64]	@ 0x40
 80031ea:	430b      	orrs	r3, r1
 80031ec:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      /* set overall return value */
      status = ret;
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80031f0:	b1c6      	cbz	r6, 8003224 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80031f2:	4a85      	ldr	r2, [pc, #532]	@ (8003408 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 80031f4:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 80031f6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80031fa:	6593      	str	r3, [r2, #88]	@ 0x58
 80031fc:	e012      	b.n	8003224 <HAL_RCCEx_PeriphCLKConfig+0xe4>
        tickstart = HAL_GetTick();
 80031fe:	f7fe fa5d 	bl	80016bc <HAL_GetTick>
 8003202:	4607      	mov	r7, r0
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003204:	4b80      	ldr	r3, [pc, #512]	@ (8003408 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 8003206:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800320a:	f013 0f02 	tst.w	r3, #2
 800320e:	d1e5      	bne.n	80031dc <HAL_RCCEx_PeriphCLKConfig+0x9c>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003210:	f7fe fa54 	bl	80016bc <HAL_GetTick>
 8003214:	1bc0      	subs	r0, r0, r7
 8003216:	f241 3388 	movw	r3, #5000	@ 0x1388
 800321a:	4298      	cmp	r0, r3
 800321c:	d9f2      	bls.n	8003204 <HAL_RCCEx_PeriphCLKConfig+0xc4>
            ret = HAL_TIMEOUT;
 800321e:	2503      	movs	r5, #3
 8003220:	e7dc      	b.n	80031dc <HAL_RCCEx_PeriphCLKConfig+0x9c>
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003222:	2500      	movs	r5, #0
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003224:	6823      	ldr	r3, [r4, #0]
 8003226:	f013 0f01 	tst.w	r3, #1
 800322a:	d008      	beq.n	800323e <HAL_RCCEx_PeriphCLKConfig+0xfe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800322c:	4a76      	ldr	r2, [pc, #472]	@ (8003408 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 800322e:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 8003232:	f023 0303 	bic.w	r3, r3, #3
 8003236:	6861      	ldr	r1, [r4, #4]
 8003238:	430b      	orrs	r3, r1
 800323a:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800323e:	6823      	ldr	r3, [r4, #0]
 8003240:	f013 0f02 	tst.w	r3, #2
 8003244:	d008      	beq.n	8003258 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003246:	4a70      	ldr	r2, [pc, #448]	@ (8003408 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 8003248:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 800324c:	f023 030c 	bic.w	r3, r3, #12
 8003250:	68a1      	ldr	r1, [r4, #8]
 8003252:	430b      	orrs	r3, r1
 8003254:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003258:	6823      	ldr	r3, [r4, #0]
 800325a:	f013 0f04 	tst.w	r3, #4
 800325e:	d008      	beq.n	8003272 <HAL_RCCEx_PeriphCLKConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003260:	4a69      	ldr	r2, [pc, #420]	@ (8003408 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 8003262:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 8003266:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 800326a:	68e1      	ldr	r1, [r4, #12]
 800326c:	430b      	orrs	r3, r1
 800326e:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003272:	6823      	ldr	r3, [r4, #0]
 8003274:	f013 0f08 	tst.w	r3, #8
 8003278:	d008      	beq.n	800328c <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800327a:	4a63      	ldr	r2, [pc, #396]	@ (8003408 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 800327c:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 8003280:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8003284:	6921      	ldr	r1, [r4, #16]
 8003286:	430b      	orrs	r3, r1
 8003288:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800328c:	6823      	ldr	r3, [r4, #0]
 800328e:	f013 0f20 	tst.w	r3, #32
 8003292:	d008      	beq.n	80032a6 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003294:	4a5c      	ldr	r2, [pc, #368]	@ (8003408 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 8003296:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 800329a:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 800329e:	6961      	ldr	r1, [r4, #20]
 80032a0:	430b      	orrs	r3, r1
 80032a2:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80032a6:	6823      	ldr	r3, [r4, #0]
 80032a8:	f013 0f40 	tst.w	r3, #64	@ 0x40
 80032ac:	d008      	beq.n	80032c0 <HAL_RCCEx_PeriphCLKConfig+0x180>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80032ae:	4a56      	ldr	r2, [pc, #344]	@ (8003408 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 80032b0:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 80032b4:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80032b8:	69a1      	ldr	r1, [r4, #24]
 80032ba:	430b      	orrs	r3, r1
 80032bc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80032c0:	6823      	ldr	r3, [r4, #0]
 80032c2:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80032c6:	d008      	beq.n	80032da <HAL_RCCEx_PeriphCLKConfig+0x19a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80032c8:	4a4f      	ldr	r2, [pc, #316]	@ (8003408 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 80032ca:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 80032ce:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80032d2:	69e1      	ldr	r1, [r4, #28]
 80032d4:	430b      	orrs	r3, r1
 80032d6:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80032da:	6823      	ldr	r3, [r4, #0]
 80032dc:	f413 7f80 	tst.w	r3, #256	@ 0x100
 80032e0:	d008      	beq.n	80032f4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80032e2:	4a49      	ldr	r2, [pc, #292]	@ (8003408 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 80032e4:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 80032e8:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 80032ec:	6a21      	ldr	r1, [r4, #32]
 80032ee:	430b      	orrs	r3, r1
 80032f0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80032f4:	6823      	ldr	r3, [r4, #0]
 80032f6:	f413 7f00 	tst.w	r3, #512	@ 0x200
 80032fa:	d008      	beq.n	800330e <HAL_RCCEx_PeriphCLKConfig+0x1ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80032fc:	4a42      	ldr	r2, [pc, #264]	@ (8003408 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 80032fe:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 8003302:	f423 2340 	bic.w	r3, r3, #786432	@ 0xc0000
 8003306:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8003308:	430b      	orrs	r3, r1
 800330a:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800330e:	6823      	ldr	r3, [r4, #0]
 8003310:	f413 6f80 	tst.w	r3, #1024	@ 0x400
 8003314:	d00c      	beq.n	8003330 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003316:	4a3c      	ldr	r2, [pc, #240]	@ (8003408 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 8003318:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 800331c:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8003320:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 8003322:	430b      	orrs	r3, r1
 8003324:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8003328:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 800332a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800332e:	d057      	beq.n	80033e0 <HAL_RCCEx_PeriphCLKConfig+0x2a0>

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8003330:	6823      	ldr	r3, [r4, #0]
 8003332:	f413 6f00 	tst.w	r3, #2048	@ 0x800
 8003336:	d00c      	beq.n	8003352 <HAL_RCCEx_PeriphCLKConfig+0x212>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003338:	4a33      	ldr	r2, [pc, #204]	@ (8003408 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 800333a:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 800333e:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8003342:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8003344:	430b      	orrs	r3, r1
 8003346:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800334a:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800334c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003350:	d04b      	beq.n	80033ea <HAL_RCCEx_PeriphCLKConfig+0x2aa>

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003352:	6823      	ldr	r3, [r4, #0]
 8003354:	f413 5f80 	tst.w	r3, #4096	@ 0x1000
 8003358:	d00c      	beq.n	8003374 <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800335a:	4a2b      	ldr	r2, [pc, #172]	@ (8003408 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 800335c:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 8003360:	f023 7340 	bic.w	r3, r3, #50331648	@ 0x3000000
 8003364:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8003366:	430b      	orrs	r3, r1
 8003368:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800336c:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800336e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003372:	d03f      	beq.n	80033f4 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003374:	6823      	ldr	r3, [r4, #0]
 8003376:	f413 5f00 	tst.w	r3, #8192	@ 0x2000
 800337a:	d00c      	beq.n	8003396 <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800337c:	4a22      	ldr	r2, [pc, #136]	@ (8003408 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 800337e:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 8003382:	f023 6340 	bic.w	r3, r3, #201326592	@ 0xc000000
 8003386:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8003388:	430b      	orrs	r3, r1
 800338a:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800338e:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8003390:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003394:	d033      	beq.n	80033fe <HAL_RCCEx_PeriphCLKConfig+0x2be>
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003396:	6823      	ldr	r3, [r4, #0]
 8003398:	f413 4f80 	tst.w	r3, #16384	@ 0x4000
 800339c:	d00c      	beq.n	80033b8 <HAL_RCCEx_PeriphCLKConfig+0x278>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800339e:	4a1a      	ldr	r2, [pc, #104]	@ (8003408 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 80033a0:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 80033a4:	f023 6340 	bic.w	r3, r3, #201326592	@ 0xc000000
 80033a8:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 80033aa:	430b      	orrs	r3, r1
 80033ac:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80033b0:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 80033b2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80033b6:	d02b      	beq.n	8003410 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80033b8:	6823      	ldr	r3, [r4, #0]
 80033ba:	f413 4f00 	tst.w	r3, #32768	@ 0x8000
 80033be:	d00c      	beq.n	80033da <HAL_RCCEx_PeriphCLKConfig+0x29a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80033c0:	4a11      	ldr	r2, [pc, #68]	@ (8003408 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 80033c2:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 80033c6:	f023 5340 	bic.w	r3, r3, #805306368	@ 0x30000000
 80033ca:	6be1      	ldr	r1, [r4, #60]	@ 0x3c
 80033cc:	430b      	orrs	r3, r1
 80033ce:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80033d2:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 80033d4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80033d8:	d01f      	beq.n	800341a <HAL_RCCEx_PeriphCLKConfig+0x2da>
  }

#endif /* QUADSPI */

  return status;
}
 80033da:	4628      	mov	r0, r5
 80033dc:	b003      	add	sp, #12
 80033de:	bdf0      	pop	{r4, r5, r6, r7, pc}
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80033e0:	68d3      	ldr	r3, [r2, #12]
 80033e2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80033e6:	60d3      	str	r3, [r2, #12]
 80033e8:	e7a2      	b.n	8003330 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80033ea:	68d3      	ldr	r3, [r2, #12]
 80033ec:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80033f0:	60d3      	str	r3, [r2, #12]
 80033f2:	e7ae      	b.n	8003352 <HAL_RCCEx_PeriphCLKConfig+0x212>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80033f4:	68d3      	ldr	r3, [r2, #12]
 80033f6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80033fa:	60d3      	str	r3, [r2, #12]
 80033fc:	e7ba      	b.n	8003374 <HAL_RCCEx_PeriphCLKConfig+0x234>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80033fe:	68d3      	ldr	r3, [r2, #12]
 8003400:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003404:	60d3      	str	r3, [r2, #12]
 8003406:	e7c6      	b.n	8003396 <HAL_RCCEx_PeriphCLKConfig+0x256>
 8003408:	40021000 	.word	0x40021000
 800340c:	40007000 	.word	0x40007000
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003410:	68d3      	ldr	r3, [r2, #12]
 8003412:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003416:	60d3      	str	r3, [r2, #12]
 8003418:	e7ce      	b.n	80033b8 <HAL_RCCEx_PeriphCLKConfig+0x278>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800341a:	68d3      	ldr	r3, [r2, #12]
 800341c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003420:	60d3      	str	r3, [r2, #12]
 8003422:	e7da      	b.n	80033da <HAL_RCCEx_PeriphCLKConfig+0x29a>

08003424 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003424:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003426:	6a02      	ldr	r2, [r0, #32]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003428:	6a03      	ldr	r3, [r0, #32]
 800342a:	f023 0301 	bic.w	r3, r3, #1
 800342e:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003430:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003432:	6983      	ldr	r3, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003434:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003438:	f023 0373 	bic.w	r3, r3, #115	@ 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800343c:	680d      	ldr	r5, [r1, #0]
 800343e:	431d      	orrs	r5, r3

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003440:	f022 0202 	bic.w	r2, r2, #2
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003444:	688b      	ldr	r3, [r1, #8]
 8003446:	4313      	orrs	r3, r2

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003448:	4a1c      	ldr	r2, [pc, #112]	@ (80034bc <TIM_OC1_SetConfig+0x98>)
 800344a:	4290      	cmp	r0, r2
 800344c:	d00f      	beq.n	800346e <TIM_OC1_SetConfig+0x4a>
 800344e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003452:	4290      	cmp	r0, r2
 8003454:	d00b      	beq.n	800346e <TIM_OC1_SetConfig+0x4a>
 8003456:	f502 6240 	add.w	r2, r2, #3072	@ 0xc00
 800345a:	4290      	cmp	r0, r2
 800345c:	d007      	beq.n	800346e <TIM_OC1_SetConfig+0x4a>
 800345e:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8003462:	4290      	cmp	r0, r2
 8003464:	d003      	beq.n	800346e <TIM_OC1_SetConfig+0x4a>
 8003466:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800346a:	4290      	cmp	r0, r2
 800346c:	d105      	bne.n	800347a <TIM_OC1_SetConfig+0x56>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800346e:	f023 0308 	bic.w	r3, r3, #8
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003472:	68ca      	ldr	r2, [r1, #12]
 8003474:	431a      	orrs	r2, r3
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003476:	f022 0304 	bic.w	r3, r2, #4
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800347a:	4a10      	ldr	r2, [pc, #64]	@ (80034bc <TIM_OC1_SetConfig+0x98>)
 800347c:	4290      	cmp	r0, r2
 800347e:	d00f      	beq.n	80034a0 <TIM_OC1_SetConfig+0x7c>
 8003480:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003484:	4290      	cmp	r0, r2
 8003486:	d00b      	beq.n	80034a0 <TIM_OC1_SetConfig+0x7c>
 8003488:	f502 6240 	add.w	r2, r2, #3072	@ 0xc00
 800348c:	4290      	cmp	r0, r2
 800348e:	d007      	beq.n	80034a0 <TIM_OC1_SetConfig+0x7c>
 8003490:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8003494:	4290      	cmp	r0, r2
 8003496:	d003      	beq.n	80034a0 <TIM_OC1_SetConfig+0x7c>
 8003498:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800349c:	4290      	cmp	r0, r2
 800349e:	d105      	bne.n	80034ac <TIM_OC1_SetConfig+0x88>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80034a0:	f424 7440 	bic.w	r4, r4, #768	@ 0x300
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80034a4:	694a      	ldr	r2, [r1, #20]
 80034a6:	4322      	orrs	r2, r4
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80034a8:	698c      	ldr	r4, [r1, #24]
 80034aa:	4314      	orrs	r4, r2
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80034ac:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80034ae:	6185      	str	r5, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80034b0:	684a      	ldr	r2, [r1, #4]
 80034b2:	6342      	str	r2, [r0, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80034b4:	6203      	str	r3, [r0, #32]
}
 80034b6:	bc30      	pop	{r4, r5}
 80034b8:	4770      	bx	lr
 80034ba:	bf00      	nop
 80034bc:	40012c00 	.word	0x40012c00

080034c0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80034c0:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80034c2:	6a03      	ldr	r3, [r0, #32]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80034c4:	6a02      	ldr	r2, [r0, #32]
 80034c6:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80034ca:	6202      	str	r2, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80034cc:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80034ce:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80034d0:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 80034d4:	f022 0273 	bic.w	r2, r2, #115	@ 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80034d8:	680d      	ldr	r5, [r1, #0]
 80034da:	4315      	orrs	r5, r2

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80034dc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80034e0:	688a      	ldr	r2, [r1, #8]
 80034e2:	ea43 2302 	orr.w	r3, r3, r2, lsl #8

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80034e6:	4a18      	ldr	r2, [pc, #96]	@ (8003548 <TIM_OC3_SetConfig+0x88>)
 80034e8:	4290      	cmp	r0, r2
 80034ea:	d003      	beq.n	80034f4 <TIM_OC3_SetConfig+0x34>
 80034ec:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80034f0:	4290      	cmp	r0, r2
 80034f2:	d106      	bne.n	8003502 <TIM_OC3_SetConfig+0x42>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80034f4:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80034f8:	68ca      	ldr	r2, [r1, #12]
 80034fa:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80034fe:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003502:	4a11      	ldr	r2, [pc, #68]	@ (8003548 <TIM_OC3_SetConfig+0x88>)
 8003504:	4290      	cmp	r0, r2
 8003506:	d00f      	beq.n	8003528 <TIM_OC3_SetConfig+0x68>
 8003508:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800350c:	4290      	cmp	r0, r2
 800350e:	d00b      	beq.n	8003528 <TIM_OC3_SetConfig+0x68>
 8003510:	f502 6240 	add.w	r2, r2, #3072	@ 0xc00
 8003514:	4290      	cmp	r0, r2
 8003516:	d007      	beq.n	8003528 <TIM_OC3_SetConfig+0x68>
 8003518:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800351c:	4290      	cmp	r0, r2
 800351e:	d003      	beq.n	8003528 <TIM_OC3_SetConfig+0x68>
 8003520:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8003524:	4290      	cmp	r0, r2
 8003526:	d107      	bne.n	8003538 <TIM_OC3_SetConfig+0x78>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003528:	f424 5240 	bic.w	r2, r4, #12288	@ 0x3000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800352c:	694c      	ldr	r4, [r1, #20]
 800352e:	ea42 1204 	orr.w	r2, r2, r4, lsl #4
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003532:	698c      	ldr	r4, [r1, #24]
 8003534:	ea42 1404 	orr.w	r4, r2, r4, lsl #4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003538:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800353a:	61c5      	str	r5, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800353c:	684a      	ldr	r2, [r1, #4]
 800353e:	63c2      	str	r2, [r0, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003540:	6203      	str	r3, [r0, #32]
}
 8003542:	bc30      	pop	{r4, r5}
 8003544:	4770      	bx	lr
 8003546:	bf00      	nop
 8003548:	40012c00 	.word	0x40012c00

0800354c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800354c:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800354e:	6a03      	ldr	r3, [r0, #32]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003550:	6a02      	ldr	r2, [r0, #32]
 8003552:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003556:	6202      	str	r2, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003558:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800355a:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800355c:	f022 7280 	bic.w	r2, r2, #16777216	@ 0x1000000
 8003560:	f422 42e6 	bic.w	r2, r2, #29440	@ 0x7300

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003564:	680d      	ldr	r5, [r1, #0]
 8003566:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800356a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800356e:	688d      	ldr	r5, [r1, #8]
 8003570:	ea43 3305 	orr.w	r3, r3, r5, lsl #12

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8003574:	4d17      	ldr	r5, [pc, #92]	@ (80035d4 <TIM_OC4_SetConfig+0x88>)
 8003576:	42a8      	cmp	r0, r5
 8003578:	d003      	beq.n	8003582 <TIM_OC4_SetConfig+0x36>
 800357a:	f505 6500 	add.w	r5, r5, #2048	@ 0x800
 800357e:	42a8      	cmp	r0, r5
 8003580:	d106      	bne.n	8003590 <TIM_OC4_SetConfig+0x44>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8003582:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8003586:	68cd      	ldr	r5, [r1, #12]
 8003588:	ea43 3305 	orr.w	r3, r3, r5, lsl #12
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 800358c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003590:	4d10      	ldr	r5, [pc, #64]	@ (80035d4 <TIM_OC4_SetConfig+0x88>)
 8003592:	42a8      	cmp	r0, r5
 8003594:	d00f      	beq.n	80035b6 <TIM_OC4_SetConfig+0x6a>
 8003596:	f505 6500 	add.w	r5, r5, #2048	@ 0x800
 800359a:	42a8      	cmp	r0, r5
 800359c:	d00b      	beq.n	80035b6 <TIM_OC4_SetConfig+0x6a>
 800359e:	f505 6540 	add.w	r5, r5, #3072	@ 0xc00
 80035a2:	42a8      	cmp	r0, r5
 80035a4:	d007      	beq.n	80035b6 <TIM_OC4_SetConfig+0x6a>
 80035a6:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 80035aa:	42a8      	cmp	r0, r5
 80035ac:	d003      	beq.n	80035b6 <TIM_OC4_SetConfig+0x6a>
 80035ae:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 80035b2:	42a8      	cmp	r0, r5
 80035b4:	d107      	bne.n	80035c6 <TIM_OC4_SetConfig+0x7a>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 80035b6:	f424 4c40 	bic.w	ip, r4, #49152	@ 0xc000

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80035ba:	694c      	ldr	r4, [r1, #20]
 80035bc:	ea4c 1c84 	orr.w	ip, ip, r4, lsl #6
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 80035c0:	698c      	ldr	r4, [r1, #24]
 80035c2:	ea4c 1484 	orr.w	r4, ip, r4, lsl #6
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80035c6:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80035c8:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80035ca:	684a      	ldr	r2, [r1, #4]
 80035cc:	6402      	str	r2, [r0, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80035ce:	6203      	str	r3, [r0, #32]
}
 80035d0:	bc30      	pop	{r4, r5}
 80035d2:	4770      	bx	lr
 80035d4:	40012c00 	.word	0x40012c00

080035d8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80035d8:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80035da:	6a03      	ldr	r3, [r0, #32]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80035dc:	6a02      	ldr	r2, [r0, #32]
 80035de:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 80035e2:	6202      	str	r2, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80035e4:	6844      	ldr	r4, [r0, #4]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80035e6:	6d02      	ldr	r2, [r0, #80]	@ 0x50

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80035e8:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 80035ec:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80035f0:	680d      	ldr	r5, [r1, #0]
 80035f2:	4315      	orrs	r5, r2

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80035f4:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80035f8:	688a      	ldr	r2, [r1, #8]
 80035fa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80035fe:	4a0f      	ldr	r2, [pc, #60]	@ (800363c <TIM_OC5_SetConfig+0x64>)
 8003600:	4290      	cmp	r0, r2
 8003602:	d00f      	beq.n	8003624 <TIM_OC5_SetConfig+0x4c>
 8003604:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003608:	4290      	cmp	r0, r2
 800360a:	d00b      	beq.n	8003624 <TIM_OC5_SetConfig+0x4c>
 800360c:	f502 6240 	add.w	r2, r2, #3072	@ 0xc00
 8003610:	4290      	cmp	r0, r2
 8003612:	d007      	beq.n	8003624 <TIM_OC5_SetConfig+0x4c>
 8003614:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8003618:	4290      	cmp	r0, r2
 800361a:	d003      	beq.n	8003624 <TIM_OC5_SetConfig+0x4c>
 800361c:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8003620:	4290      	cmp	r0, r2
 8003622:	d104      	bne.n	800362e <TIM_OC5_SetConfig+0x56>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8003624:	f424 3480 	bic.w	r4, r4, #65536	@ 0x10000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8003628:	694a      	ldr	r2, [r1, #20]
 800362a:	ea44 2402 	orr.w	r4, r4, r2, lsl #8
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800362e:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003630:	6505      	str	r5, [r0, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8003632:	684a      	ldr	r2, [r1, #4]
 8003634:	6482      	str	r2, [r0, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003636:	6203      	str	r3, [r0, #32]
}
 8003638:	bc30      	pop	{r4, r5}
 800363a:	4770      	bx	lr
 800363c:	40012c00 	.word	0x40012c00

08003640 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003640:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003642:	6a03      	ldr	r3, [r0, #32]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8003644:	6a02      	ldr	r2, [r0, #32]
 8003646:	f422 1280 	bic.w	r2, r2, #1048576	@ 0x100000
 800364a:	6202      	str	r2, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800364c:	6844      	ldr	r4, [r0, #4]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800364e:	6d02      	ldr	r2, [r0, #80]	@ 0x50

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8003650:	f022 7280 	bic.w	r2, r2, #16777216	@ 0x1000000
 8003654:	f422 42e0 	bic.w	r2, r2, #28672	@ 0x7000
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003658:	680d      	ldr	r5, [r1, #0]
 800365a:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800365e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8003662:	688d      	ldr	r5, [r1, #8]
 8003664:	ea43 5305 	orr.w	r3, r3, r5, lsl #20

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003668:	4d0f      	ldr	r5, [pc, #60]	@ (80036a8 <TIM_OC6_SetConfig+0x68>)
 800366a:	42a8      	cmp	r0, r5
 800366c:	d00f      	beq.n	800368e <TIM_OC6_SetConfig+0x4e>
 800366e:	f505 6500 	add.w	r5, r5, #2048	@ 0x800
 8003672:	42a8      	cmp	r0, r5
 8003674:	d00b      	beq.n	800368e <TIM_OC6_SetConfig+0x4e>
 8003676:	f505 6540 	add.w	r5, r5, #3072	@ 0xc00
 800367a:	42a8      	cmp	r0, r5
 800367c:	d007      	beq.n	800368e <TIM_OC6_SetConfig+0x4e>
 800367e:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8003682:	42a8      	cmp	r0, r5
 8003684:	d003      	beq.n	800368e <TIM_OC6_SetConfig+0x4e>
 8003686:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 800368a:	42a8      	cmp	r0, r5
 800368c:	d104      	bne.n	8003698 <TIM_OC6_SetConfig+0x58>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800368e:	f424 2480 	bic.w	r4, r4, #262144	@ 0x40000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8003692:	694d      	ldr	r5, [r1, #20]
 8003694:	ea44 2485 	orr.w	r4, r4, r5, lsl #10
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003698:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800369a:	6502      	str	r2, [r0, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800369c:	684a      	ldr	r2, [r1, #4]
 800369e:	64c2      	str	r2, [r0, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80036a0:	6203      	str	r3, [r0, #32]
}
 80036a2:	bc30      	pop	{r4, r5}
 80036a4:	4770      	bx	lr
 80036a6:	bf00      	nop
 80036a8:	40012c00 	.word	0x40012c00

080036ac <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80036ac:	b410      	push	{r4}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80036ae:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80036b0:	6a04      	ldr	r4, [r0, #32]
 80036b2:	f024 0401 	bic.w	r4, r4, #1
 80036b6:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 80036b8:	6984      	ldr	r4, [r0, #24]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80036ba:	f024 0cf0 	bic.w	ip, r4, #240	@ 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80036be:	ea4c 1202 	orr.w	r2, ip, r2, lsl #4

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80036c2:	f023 030a 	bic.w	r3, r3, #10
  tmpccer |= TIM_ICPolarity;
 80036c6:	430b      	orrs	r3, r1

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80036c8:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 80036ca:	6203      	str	r3, [r0, #32]
}
 80036cc:	f85d 4b04 	ldr.w	r4, [sp], #4
 80036d0:	4770      	bx	lr

080036d2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80036d2:	b410      	push	{r4}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80036d4:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80036d6:	6a04      	ldr	r4, [r0, #32]
 80036d8:	f024 0410 	bic.w	r4, r4, #16
 80036dc:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 80036de:	6984      	ldr	r4, [r0, #24]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80036e0:	f424 4c70 	bic.w	ip, r4, #61440	@ 0xf000
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80036e4:	ea4c 3202 	orr.w	r2, ip, r2, lsl #12

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80036e8:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 80036ec:	ea43 1301 	orr.w	r3, r3, r1, lsl #4

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80036f0:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 80036f2:	6203      	str	r3, [r0, #32]
}
 80036f4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80036f8:	4770      	bx	lr

080036fa <TIM_ITRx_SetConfig>:
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80036fa:	6883      	ldr	r3, [r0, #8]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80036fc:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8003700:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003704:	430b      	orrs	r3, r1
 8003706:	f043 0307 	orr.w	r3, r3, #7
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800370a:	6083      	str	r3, [r0, #8]
}
 800370c:	4770      	bx	lr

0800370e <HAL_TIM_PWM_MspInit>:
}
 800370e:	4770      	bx	lr

08003710 <TIM_Base_SetConfig>:
  tmpcr1 = TIMx->CR1;
 8003710:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003712:	4a30      	ldr	r2, [pc, #192]	@ (80037d4 <TIM_Base_SetConfig+0xc4>)
 8003714:	4290      	cmp	r0, r2
 8003716:	d00e      	beq.n	8003736 <TIM_Base_SetConfig+0x26>
 8003718:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 800371c:	d00b      	beq.n	8003736 <TIM_Base_SetConfig+0x26>
 800371e:	f5a2 3294 	sub.w	r2, r2, #75776	@ 0x12800
 8003722:	4290      	cmp	r0, r2
 8003724:	d007      	beq.n	8003736 <TIM_Base_SetConfig+0x26>
 8003726:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800372a:	4290      	cmp	r0, r2
 800372c:	d003      	beq.n	8003736 <TIM_Base_SetConfig+0x26>
 800372e:	f502 3296 	add.w	r2, r2, #76800	@ 0x12c00
 8003732:	4290      	cmp	r0, r2
 8003734:	d103      	bne.n	800373e <TIM_Base_SetConfig+0x2e>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003736:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 800373a:	684a      	ldr	r2, [r1, #4]
 800373c:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800373e:	4a25      	ldr	r2, [pc, #148]	@ (80037d4 <TIM_Base_SetConfig+0xc4>)
 8003740:	4290      	cmp	r0, r2
 8003742:	d01a      	beq.n	800377a <TIM_Base_SetConfig+0x6a>
 8003744:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 8003748:	d017      	beq.n	800377a <TIM_Base_SetConfig+0x6a>
 800374a:	f5a2 3294 	sub.w	r2, r2, #75776	@ 0x12800
 800374e:	4290      	cmp	r0, r2
 8003750:	d013      	beq.n	800377a <TIM_Base_SetConfig+0x6a>
 8003752:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8003756:	4290      	cmp	r0, r2
 8003758:	d00f      	beq.n	800377a <TIM_Base_SetConfig+0x6a>
 800375a:	f502 3296 	add.w	r2, r2, #76800	@ 0x12c00
 800375e:	4290      	cmp	r0, r2
 8003760:	d00b      	beq.n	800377a <TIM_Base_SetConfig+0x6a>
 8003762:	f502 6240 	add.w	r2, r2, #3072	@ 0xc00
 8003766:	4290      	cmp	r0, r2
 8003768:	d007      	beq.n	800377a <TIM_Base_SetConfig+0x6a>
 800376a:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800376e:	4290      	cmp	r0, r2
 8003770:	d003      	beq.n	800377a <TIM_Base_SetConfig+0x6a>
 8003772:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8003776:	4290      	cmp	r0, r2
 8003778:	d103      	bne.n	8003782 <TIM_Base_SetConfig+0x72>
    tmpcr1 &= ~TIM_CR1_CKD;
 800377a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800377e:	68ca      	ldr	r2, [r1, #12]
 8003780:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003782:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003786:	694a      	ldr	r2, [r1, #20]
 8003788:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 800378a:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800378c:	688b      	ldr	r3, [r1, #8]
 800378e:	62c3      	str	r3, [r0, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 8003790:	680b      	ldr	r3, [r1, #0]
 8003792:	6283      	str	r3, [r0, #40]	@ 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003794:	4b0f      	ldr	r3, [pc, #60]	@ (80037d4 <TIM_Base_SetConfig+0xc4>)
 8003796:	4298      	cmp	r0, r3
 8003798:	d00f      	beq.n	80037ba <TIM_Base_SetConfig+0xaa>
 800379a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800379e:	4298      	cmp	r0, r3
 80037a0:	d00b      	beq.n	80037ba <TIM_Base_SetConfig+0xaa>
 80037a2:	f503 6340 	add.w	r3, r3, #3072	@ 0xc00
 80037a6:	4298      	cmp	r0, r3
 80037a8:	d007      	beq.n	80037ba <TIM_Base_SetConfig+0xaa>
 80037aa:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80037ae:	4298      	cmp	r0, r3
 80037b0:	d003      	beq.n	80037ba <TIM_Base_SetConfig+0xaa>
 80037b2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80037b6:	4298      	cmp	r0, r3
 80037b8:	d101      	bne.n	80037be <TIM_Base_SetConfig+0xae>
    TIMx->RCR = Structure->RepetitionCounter;
 80037ba:	690b      	ldr	r3, [r1, #16]
 80037bc:	6303      	str	r3, [r0, #48]	@ 0x30
  TIMx->EGR = TIM_EGR_UG;
 80037be:	2301      	movs	r3, #1
 80037c0:	6143      	str	r3, [r0, #20]
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80037c2:	6903      	ldr	r3, [r0, #16]
 80037c4:	f013 0f01 	tst.w	r3, #1
 80037c8:	d003      	beq.n	80037d2 <TIM_Base_SetConfig+0xc2>
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80037ca:	6903      	ldr	r3, [r0, #16]
 80037cc:	f023 0301 	bic.w	r3, r3, #1
 80037d0:	6103      	str	r3, [r0, #16]
}
 80037d2:	4770      	bx	lr
 80037d4:	40012c00 	.word	0x40012c00

080037d8 <HAL_TIM_Base_Init>:
  if (htim == NULL)
 80037d8:	b360      	cbz	r0, 8003834 <HAL_TIM_Base_Init+0x5c>
{
 80037da:	b510      	push	{r4, lr}
 80037dc:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 80037de:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 80037e2:	b313      	cbz	r3, 800382a <HAL_TIM_Base_Init+0x52>
  htim->State = HAL_TIM_STATE_BUSY;
 80037e4:	2302      	movs	r3, #2
 80037e6:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80037ea:	4621      	mov	r1, r4
 80037ec:	f851 0b04 	ldr.w	r0, [r1], #4
 80037f0:	f7ff ff8e 	bl	8003710 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80037f4:	2301      	movs	r3, #1
 80037f6:	f884 3048 	strb.w	r3, [r4, #72]	@ 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80037fa:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
 80037fe:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 8003802:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 8003806:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
 800380a:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800380e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003812:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 8003816:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
 800381a:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
 800381e:	f884 3047 	strb.w	r3, [r4, #71]	@ 0x47
  htim->State = HAL_TIM_STATE_READY;
 8003822:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  return HAL_OK;
 8003826:	2000      	movs	r0, #0
}
 8003828:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 800382a:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
    HAL_TIM_Base_MspInit(htim);
 800382e:	f7fd fe7b 	bl	8001528 <HAL_TIM_Base_MspInit>
 8003832:	e7d7      	b.n	80037e4 <HAL_TIM_Base_Init+0xc>
    return HAL_ERROR;
 8003834:	2001      	movs	r0, #1
}
 8003836:	4770      	bx	lr

08003838 <HAL_TIM_PWM_Init>:
  if (htim == NULL)
 8003838:	b360      	cbz	r0, 8003894 <HAL_TIM_PWM_Init+0x5c>
{
 800383a:	b510      	push	{r4, lr}
 800383c:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 800383e:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8003842:	b313      	cbz	r3, 800388a <HAL_TIM_PWM_Init+0x52>
  htim->State = HAL_TIM_STATE_BUSY;
 8003844:	2302      	movs	r3, #2
 8003846:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800384a:	4621      	mov	r1, r4
 800384c:	f851 0b04 	ldr.w	r0, [r1], #4
 8003850:	f7ff ff5e 	bl	8003710 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003854:	2301      	movs	r3, #1
 8003856:	f884 3048 	strb.w	r3, [r4, #72]	@ 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800385a:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
 800385e:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 8003862:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 8003866:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
 800386a:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800386e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003872:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 8003876:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
 800387a:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
 800387e:	f884 3047 	strb.w	r3, [r4, #71]	@ 0x47
  htim->State = HAL_TIM_STATE_READY;
 8003882:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  return HAL_OK;
 8003886:	2000      	movs	r0, #0
}
 8003888:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 800388a:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
    HAL_TIM_PWM_MspInit(htim);
 800388e:	f7ff ff3e 	bl	800370e <HAL_TIM_PWM_MspInit>
 8003892:	e7d7      	b.n	8003844 <HAL_TIM_PWM_Init+0xc>
    return HAL_ERROR;
 8003894:	2001      	movs	r0, #1
}
 8003896:	4770      	bx	lr

08003898 <TIM_OC2_SetConfig>:
{
 8003898:	b430      	push	{r4, r5}
  tmpccer = TIMx->CCER;
 800389a:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800389c:	6a02      	ldr	r2, [r0, #32]
 800389e:	f022 0210 	bic.w	r2, r2, #16
 80038a2:	6202      	str	r2, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 80038a4:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 80038a6:	6982      	ldr	r2, [r0, #24]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80038a8:	f022 7280 	bic.w	r2, r2, #16777216	@ 0x1000000
 80038ac:	f422 42e6 	bic.w	r2, r2, #29440	@ 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80038b0:	680d      	ldr	r5, [r1, #0]
 80038b2:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer &= ~TIM_CCER_CC2P;
 80038b6:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80038ba:	688d      	ldr	r5, [r1, #8]
 80038bc:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80038c0:	4d17      	ldr	r5, [pc, #92]	@ (8003920 <TIM_OC2_SetConfig+0x88>)
 80038c2:	42a8      	cmp	r0, r5
 80038c4:	d003      	beq.n	80038ce <TIM_OC2_SetConfig+0x36>
 80038c6:	f505 6500 	add.w	r5, r5, #2048	@ 0x800
 80038ca:	42a8      	cmp	r0, r5
 80038cc:	d106      	bne.n	80038dc <TIM_OC2_SetConfig+0x44>
    tmpccer &= ~TIM_CCER_CC2NP;
 80038ce:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80038d2:	68cd      	ldr	r5, [r1, #12]
 80038d4:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpccer &= ~TIM_CCER_CC2NE;
 80038d8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80038dc:	4d10      	ldr	r5, [pc, #64]	@ (8003920 <TIM_OC2_SetConfig+0x88>)
 80038de:	42a8      	cmp	r0, r5
 80038e0:	d00f      	beq.n	8003902 <TIM_OC2_SetConfig+0x6a>
 80038e2:	f505 6500 	add.w	r5, r5, #2048	@ 0x800
 80038e6:	42a8      	cmp	r0, r5
 80038e8:	d00b      	beq.n	8003902 <TIM_OC2_SetConfig+0x6a>
 80038ea:	f505 6540 	add.w	r5, r5, #3072	@ 0xc00
 80038ee:	42a8      	cmp	r0, r5
 80038f0:	d007      	beq.n	8003902 <TIM_OC2_SetConfig+0x6a>
 80038f2:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 80038f6:	42a8      	cmp	r0, r5
 80038f8:	d003      	beq.n	8003902 <TIM_OC2_SetConfig+0x6a>
 80038fa:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 80038fe:	42a8      	cmp	r0, r5
 8003900:	d107      	bne.n	8003912 <TIM_OC2_SetConfig+0x7a>
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003902:	f424 6c40 	bic.w	ip, r4, #3072	@ 0xc00
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003906:	694c      	ldr	r4, [r1, #20]
 8003908:	ea4c 0c84 	orr.w	ip, ip, r4, lsl #2
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800390c:	698c      	ldr	r4, [r1, #24]
 800390e:	ea4c 0484 	orr.w	r4, ip, r4, lsl #2
  TIMx->CR2 = tmpcr2;
 8003912:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 8003914:	6182      	str	r2, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 8003916:	684a      	ldr	r2, [r1, #4]
 8003918:	6382      	str	r2, [r0, #56]	@ 0x38
  TIMx->CCER = tmpccer;
 800391a:	6203      	str	r3, [r0, #32]
}
 800391c:	bc30      	pop	{r4, r5}
 800391e:	4770      	bx	lr
 8003920:	40012c00 	.word	0x40012c00

08003924 <HAL_TIM_PWM_ConfigChannel>:
{
 8003924:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 8003926:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
 800392a:	2b01      	cmp	r3, #1
 800392c:	f000 8095 	beq.w	8003a5a <HAL_TIM_PWM_ConfigChannel+0x136>
 8003930:	4604      	mov	r4, r0
 8003932:	460d      	mov	r5, r1
 8003934:	2301      	movs	r3, #1
 8003936:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
  switch (Channel)
 800393a:	2a14      	cmp	r2, #20
 800393c:	f200 8088 	bhi.w	8003a50 <HAL_TIM_PWM_ConfigChannel+0x12c>
 8003940:	e8df f002 	tbb	[pc, r2]
 8003944:	8686860b 	.word	0x8686860b
 8003948:	8686861f 	.word	0x8686861f
 800394c:	86868634 	.word	0x86868634
 8003950:	86868648 	.word	0x86868648
 8003954:	8686865d 	.word	0x8686865d
 8003958:	71          	.byte	0x71
 8003959:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800395a:	6800      	ldr	r0, [r0, #0]
 800395c:	f7ff fd62 	bl	8003424 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003960:	6822      	ldr	r2, [r4, #0]
 8003962:	6993      	ldr	r3, [r2, #24]
 8003964:	f043 0308 	orr.w	r3, r3, #8
 8003968:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800396a:	6822      	ldr	r2, [r4, #0]
 800396c:	6993      	ldr	r3, [r2, #24]
 800396e:	f023 0304 	bic.w	r3, r3, #4
 8003972:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003974:	6822      	ldr	r2, [r4, #0]
 8003976:	6993      	ldr	r3, [r2, #24]
 8003978:	6929      	ldr	r1, [r5, #16]
 800397a:	430b      	orrs	r3, r1
 800397c:	6193      	str	r3, [r2, #24]
  HAL_StatusTypeDef status = HAL_OK;
 800397e:	2000      	movs	r0, #0
      break;
 8003980:	e067      	b.n	8003a52 <HAL_TIM_PWM_ConfigChannel+0x12e>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003982:	6800      	ldr	r0, [r0, #0]
 8003984:	f7ff ff88 	bl	8003898 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003988:	6822      	ldr	r2, [r4, #0]
 800398a:	6993      	ldr	r3, [r2, #24]
 800398c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8003990:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003992:	6822      	ldr	r2, [r4, #0]
 8003994:	6993      	ldr	r3, [r2, #24]
 8003996:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800399a:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800399c:	6822      	ldr	r2, [r4, #0]
 800399e:	6993      	ldr	r3, [r2, #24]
 80039a0:	6929      	ldr	r1, [r5, #16]
 80039a2:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80039a6:	6193      	str	r3, [r2, #24]
  HAL_StatusTypeDef status = HAL_OK;
 80039a8:	2000      	movs	r0, #0
      break;
 80039aa:	e052      	b.n	8003a52 <HAL_TIM_PWM_ConfigChannel+0x12e>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80039ac:	6800      	ldr	r0, [r0, #0]
 80039ae:	f7ff fd87 	bl	80034c0 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80039b2:	6822      	ldr	r2, [r4, #0]
 80039b4:	69d3      	ldr	r3, [r2, #28]
 80039b6:	f043 0308 	orr.w	r3, r3, #8
 80039ba:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80039bc:	6822      	ldr	r2, [r4, #0]
 80039be:	69d3      	ldr	r3, [r2, #28]
 80039c0:	f023 0304 	bic.w	r3, r3, #4
 80039c4:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80039c6:	6822      	ldr	r2, [r4, #0]
 80039c8:	69d3      	ldr	r3, [r2, #28]
 80039ca:	6929      	ldr	r1, [r5, #16]
 80039cc:	430b      	orrs	r3, r1
 80039ce:	61d3      	str	r3, [r2, #28]
  HAL_StatusTypeDef status = HAL_OK;
 80039d0:	2000      	movs	r0, #0
      break;
 80039d2:	e03e      	b.n	8003a52 <HAL_TIM_PWM_ConfigChannel+0x12e>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80039d4:	6800      	ldr	r0, [r0, #0]
 80039d6:	f7ff fdb9 	bl	800354c <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80039da:	6822      	ldr	r2, [r4, #0]
 80039dc:	69d3      	ldr	r3, [r2, #28]
 80039de:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80039e2:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80039e4:	6822      	ldr	r2, [r4, #0]
 80039e6:	69d3      	ldr	r3, [r2, #28]
 80039e8:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80039ec:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80039ee:	6822      	ldr	r2, [r4, #0]
 80039f0:	69d3      	ldr	r3, [r2, #28]
 80039f2:	6929      	ldr	r1, [r5, #16]
 80039f4:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80039f8:	61d3      	str	r3, [r2, #28]
  HAL_StatusTypeDef status = HAL_OK;
 80039fa:	2000      	movs	r0, #0
      break;
 80039fc:	e029      	b.n	8003a52 <HAL_TIM_PWM_ConfigChannel+0x12e>
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80039fe:	6800      	ldr	r0, [r0, #0]
 8003a00:	f7ff fdea 	bl	80035d8 <TIM_OC5_SetConfig>
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8003a04:	6822      	ldr	r2, [r4, #0]
 8003a06:	6d13      	ldr	r3, [r2, #80]	@ 0x50
 8003a08:	f043 0308 	orr.w	r3, r3, #8
 8003a0c:	6513      	str	r3, [r2, #80]	@ 0x50
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8003a0e:	6822      	ldr	r2, [r4, #0]
 8003a10:	6d13      	ldr	r3, [r2, #80]	@ 0x50
 8003a12:	f023 0304 	bic.w	r3, r3, #4
 8003a16:	6513      	str	r3, [r2, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8003a18:	6822      	ldr	r2, [r4, #0]
 8003a1a:	6d13      	ldr	r3, [r2, #80]	@ 0x50
 8003a1c:	6929      	ldr	r1, [r5, #16]
 8003a1e:	430b      	orrs	r3, r1
 8003a20:	6513      	str	r3, [r2, #80]	@ 0x50
  HAL_StatusTypeDef status = HAL_OK;
 8003a22:	2000      	movs	r0, #0
      break;
 8003a24:	e015      	b.n	8003a52 <HAL_TIM_PWM_ConfigChannel+0x12e>
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8003a26:	6800      	ldr	r0, [r0, #0]
 8003a28:	f7ff fe0a 	bl	8003640 <TIM_OC6_SetConfig>
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8003a2c:	6822      	ldr	r2, [r4, #0]
 8003a2e:	6d13      	ldr	r3, [r2, #80]	@ 0x50
 8003a30:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8003a34:	6513      	str	r3, [r2, #80]	@ 0x50
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8003a36:	6822      	ldr	r2, [r4, #0]
 8003a38:	6d13      	ldr	r3, [r2, #80]	@ 0x50
 8003a3a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003a3e:	6513      	str	r3, [r2, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8003a40:	6822      	ldr	r2, [r4, #0]
 8003a42:	6d13      	ldr	r3, [r2, #80]	@ 0x50
 8003a44:	6929      	ldr	r1, [r5, #16]
 8003a46:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8003a4a:	6513      	str	r3, [r2, #80]	@ 0x50
  HAL_StatusTypeDef status = HAL_OK;
 8003a4c:	2000      	movs	r0, #0
      break;
 8003a4e:	e000      	b.n	8003a52 <HAL_TIM_PWM_ConfigChannel+0x12e>
  switch (Channel)
 8003a50:	2001      	movs	r0, #1
  __HAL_UNLOCK(htim);
 8003a52:	2300      	movs	r3, #0
 8003a54:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
}
 8003a58:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(htim);
 8003a5a:	2002      	movs	r0, #2
 8003a5c:	e7fc      	b.n	8003a58 <HAL_TIM_PWM_ConfigChannel+0x134>

08003a5e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003a5e:	b410      	push	{r4}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003a60:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003a62:	f424 4c7f 	bic.w	ip, r4, #65280	@ 0xff00

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003a66:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
 8003a6a:	430a      	orrs	r2, r1
 8003a6c:	ea42 020c 	orr.w	r2, r2, ip

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003a70:	6082      	str	r2, [r0, #8]
}
 8003a72:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003a76:	4770      	bx	lr

08003a78 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 8003a78:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
 8003a7c:	2b01      	cmp	r3, #1
 8003a7e:	f000 808f 	beq.w	8003ba0 <HAL_TIM_ConfigClockSource+0x128>
{
 8003a82:	b510      	push	{r4, lr}
 8003a84:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 8003a86:	2301      	movs	r3, #1
 8003a88:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 8003a8c:	2302      	movs	r3, #2
 8003a8e:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d
  tmpsmcr = htim->Instance->SMCR;
 8003a92:	6802      	ldr	r2, [r0, #0]
 8003a94:	6890      	ldr	r0, [r2, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003a96:	4b43      	ldr	r3, [pc, #268]	@ (8003ba4 <HAL_TIM_ConfigClockSource+0x12c>)
 8003a98:	4003      	ands	r3, r0
  htim->Instance->SMCR = tmpsmcr;
 8003a9a:	6093      	str	r3, [r2, #8]
  switch (sClockSourceConfig->ClockSource)
 8003a9c:	680b      	ldr	r3, [r1, #0]
 8003a9e:	2b70      	cmp	r3, #112	@ 0x70
 8003aa0:	d055      	beq.n	8003b4e <HAL_TIM_ConfigClockSource+0xd6>
 8003aa2:	d831      	bhi.n	8003b08 <HAL_TIM_ConfigClockSource+0x90>
 8003aa4:	2b50      	cmp	r3, #80	@ 0x50
 8003aa6:	d06c      	beq.n	8003b82 <HAL_TIM_ConfigClockSource+0x10a>
 8003aa8:	d81f      	bhi.n	8003aea <HAL_TIM_ConfigClockSource+0x72>
 8003aaa:	2b40      	cmp	r3, #64	@ 0x40
 8003aac:	d10a      	bne.n	8003ac4 <HAL_TIM_ConfigClockSource+0x4c>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003aae:	68ca      	ldr	r2, [r1, #12]
 8003ab0:	6849      	ldr	r1, [r1, #4]
 8003ab2:	6820      	ldr	r0, [r4, #0]
 8003ab4:	f7ff fdfa 	bl	80036ac <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003ab8:	2140      	movs	r1, #64	@ 0x40
 8003aba:	6820      	ldr	r0, [r4, #0]
 8003abc:	f7ff fe1d 	bl	80036fa <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 8003ac0:	2000      	movs	r0, #0
      break;
 8003ac2:	e029      	b.n	8003b18 <HAL_TIM_ConfigClockSource+0xa0>
  switch (sClockSourceConfig->ClockSource)
 8003ac4:	d868      	bhi.n	8003b98 <HAL_TIM_ConfigClockSource+0x120>
 8003ac6:	2b20      	cmp	r3, #32
 8003ac8:	d003      	beq.n	8003ad2 <HAL_TIM_ConfigClockSource+0x5a>
 8003aca:	d80a      	bhi.n	8003ae2 <HAL_TIM_ConfigClockSource+0x6a>
 8003acc:	b10b      	cbz	r3, 8003ad2 <HAL_TIM_ConfigClockSource+0x5a>
 8003ace:	2b10      	cmp	r3, #16
 8003ad0:	d105      	bne.n	8003ade <HAL_TIM_ConfigClockSource+0x66>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003ad2:	4619      	mov	r1, r3
 8003ad4:	6820      	ldr	r0, [r4, #0]
 8003ad6:	f7ff fe10 	bl	80036fa <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 8003ada:	2000      	movs	r0, #0
      break;
 8003adc:	e01c      	b.n	8003b18 <HAL_TIM_ConfigClockSource+0xa0>
      status = HAL_ERROR;
 8003ade:	2001      	movs	r0, #1
 8003ae0:	e01a      	b.n	8003b18 <HAL_TIM_ConfigClockSource+0xa0>
  switch (sClockSourceConfig->ClockSource)
 8003ae2:	2b30      	cmp	r3, #48	@ 0x30
 8003ae4:	d0f5      	beq.n	8003ad2 <HAL_TIM_ConfigClockSource+0x5a>
      status = HAL_ERROR;
 8003ae6:	2001      	movs	r0, #1
 8003ae8:	e016      	b.n	8003b18 <HAL_TIM_ConfigClockSource+0xa0>
  switch (sClockSourceConfig->ClockSource)
 8003aea:	2b60      	cmp	r3, #96	@ 0x60
 8003aec:	d10a      	bne.n	8003b04 <HAL_TIM_ConfigClockSource+0x8c>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003aee:	68ca      	ldr	r2, [r1, #12]
 8003af0:	6849      	ldr	r1, [r1, #4]
 8003af2:	6820      	ldr	r0, [r4, #0]
 8003af4:	f7ff fded 	bl	80036d2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003af8:	2160      	movs	r1, #96	@ 0x60
 8003afa:	6820      	ldr	r0, [r4, #0]
 8003afc:	f7ff fdfd 	bl	80036fa <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 8003b00:	2000      	movs	r0, #0
      break;
 8003b02:	e009      	b.n	8003b18 <HAL_TIM_ConfigClockSource+0xa0>
      status = HAL_ERROR;
 8003b04:	2001      	movs	r0, #1
 8003b06:	e007      	b.n	8003b18 <HAL_TIM_ConfigClockSource+0xa0>
  switch (sClockSourceConfig->ClockSource)
 8003b08:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003b0c:	d02c      	beq.n	8003b68 <HAL_TIM_ConfigClockSource+0xf0>
 8003b0e:	d80a      	bhi.n	8003b26 <HAL_TIM_ConfigClockSource+0xae>
 8003b10:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003b14:	d142      	bne.n	8003b9c <HAL_TIM_ConfigClockSource+0x124>
 8003b16:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8003b18:	2301      	movs	r3, #1
 8003b1a:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  __HAL_UNLOCK(htim);
 8003b1e:	2300      	movs	r3, #0
 8003b20:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
}
 8003b24:	bd10      	pop	{r4, pc}
  switch (sClockSourceConfig->ClockSource)
 8003b26:	4a20      	ldr	r2, [pc, #128]	@ (8003ba8 <HAL_TIM_ConfigClockSource+0x130>)
 8003b28:	4293      	cmp	r3, r2
 8003b2a:	d0d2      	beq.n	8003ad2 <HAL_TIM_ConfigClockSource+0x5a>
 8003b2c:	d807      	bhi.n	8003b3e <HAL_TIM_ConfigClockSource+0xc6>
 8003b2e:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8003b32:	d0ce      	beq.n	8003ad2 <HAL_TIM_ConfigClockSource+0x5a>
 8003b34:	3a10      	subs	r2, #16
 8003b36:	4293      	cmp	r3, r2
 8003b38:	d0cb      	beq.n	8003ad2 <HAL_TIM_ConfigClockSource+0x5a>
      status = HAL_ERROR;
 8003b3a:	2001      	movs	r0, #1
 8003b3c:	e7ec      	b.n	8003b18 <HAL_TIM_ConfigClockSource+0xa0>
  switch (sClockSourceConfig->ClockSource)
 8003b3e:	4a1b      	ldr	r2, [pc, #108]	@ (8003bac <HAL_TIM_ConfigClockSource+0x134>)
 8003b40:	4293      	cmp	r3, r2
 8003b42:	d0c6      	beq.n	8003ad2 <HAL_TIM_ConfigClockSource+0x5a>
 8003b44:	3230      	adds	r2, #48	@ 0x30
 8003b46:	4293      	cmp	r3, r2
 8003b48:	d0c3      	beq.n	8003ad2 <HAL_TIM_ConfigClockSource+0x5a>
      status = HAL_ERROR;
 8003b4a:	2001      	movs	r0, #1
 8003b4c:	e7e4      	b.n	8003b18 <HAL_TIM_ConfigClockSource+0xa0>
      TIM_ETR_SetConfig(htim->Instance,
 8003b4e:	68cb      	ldr	r3, [r1, #12]
 8003b50:	684a      	ldr	r2, [r1, #4]
 8003b52:	6889      	ldr	r1, [r1, #8]
 8003b54:	6820      	ldr	r0, [r4, #0]
 8003b56:	f7ff ff82 	bl	8003a5e <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003b5a:	6822      	ldr	r2, [r4, #0]
 8003b5c:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003b5e:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
      htim->Instance->SMCR = tmpsmcr;
 8003b62:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8003b64:	2000      	movs	r0, #0
      break;
 8003b66:	e7d7      	b.n	8003b18 <HAL_TIM_ConfigClockSource+0xa0>
      TIM_ETR_SetConfig(htim->Instance,
 8003b68:	68cb      	ldr	r3, [r1, #12]
 8003b6a:	684a      	ldr	r2, [r1, #4]
 8003b6c:	6889      	ldr	r1, [r1, #8]
 8003b6e:	6820      	ldr	r0, [r4, #0]
 8003b70:	f7ff ff75 	bl	8003a5e <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003b74:	6822      	ldr	r2, [r4, #0]
 8003b76:	6893      	ldr	r3, [r2, #8]
 8003b78:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003b7c:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8003b7e:	2000      	movs	r0, #0
      break;
 8003b80:	e7ca      	b.n	8003b18 <HAL_TIM_ConfigClockSource+0xa0>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003b82:	68ca      	ldr	r2, [r1, #12]
 8003b84:	6849      	ldr	r1, [r1, #4]
 8003b86:	6820      	ldr	r0, [r4, #0]
 8003b88:	f7ff fd90 	bl	80036ac <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003b8c:	2150      	movs	r1, #80	@ 0x50
 8003b8e:	6820      	ldr	r0, [r4, #0]
 8003b90:	f7ff fdb3 	bl	80036fa <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 8003b94:	2000      	movs	r0, #0
      break;
 8003b96:	e7bf      	b.n	8003b18 <HAL_TIM_ConfigClockSource+0xa0>
      status = HAL_ERROR;
 8003b98:	2001      	movs	r0, #1
 8003b9a:	e7bd      	b.n	8003b18 <HAL_TIM_ConfigClockSource+0xa0>
 8003b9c:	2001      	movs	r0, #1
 8003b9e:	e7bb      	b.n	8003b18 <HAL_TIM_ConfigClockSource+0xa0>
  __HAL_LOCK(htim);
 8003ba0:	2002      	movs	r0, #2
}
 8003ba2:	4770      	bx	lr
 8003ba4:	ffce0088 	.word	0xffce0088
 8003ba8:	00100030 	.word	0x00100030
 8003bac:	00100040 	.word	0x00100040

08003bb0 <TIM_CCxChannelCmd>:

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003bb0:	f001 011f 	and.w	r1, r1, #31
 8003bb4:	f04f 0c01 	mov.w	ip, #1
 8003bb8:	fa0c fc01 	lsl.w	ip, ip, r1

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003bbc:	6a03      	ldr	r3, [r0, #32]
 8003bbe:	ea23 030c 	bic.w	r3, r3, ip
 8003bc2:	6203      	str	r3, [r0, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003bc4:	6a03      	ldr	r3, [r0, #32]
 8003bc6:	408a      	lsls	r2, r1
 8003bc8:	4313      	orrs	r3, r2
 8003bca:	6203      	str	r3, [r0, #32]
}
 8003bcc:	4770      	bx	lr
	...

08003bd0 <HAL_TIM_PWM_Start>:
{
 8003bd0:	b510      	push	{r4, lr}
 8003bd2:	4604      	mov	r4, r0
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003bd4:	2910      	cmp	r1, #16
 8003bd6:	d83c      	bhi.n	8003c52 <HAL_TIM_PWM_Start+0x82>
 8003bd8:	e8df f001 	tbb	[pc, r1]
 8003bdc:	3b3b3b09 	.word	0x3b3b3b09
 8003be0:	3b3b3b1f 	.word	0x3b3b3b1f
 8003be4:	3b3b3b26 	.word	0x3b3b3b26
 8003be8:	3b3b3b2d 	.word	0x3b3b3b2d
 8003bec:	34          	.byte	0x34
 8003bed:	00          	.byte	0x00
 8003bee:	f890 303e 	ldrb.w	r3, [r0, #62]	@ 0x3e
 8003bf2:	b2db      	uxtb	r3, r3
 8003bf4:	3b01      	subs	r3, #1
 8003bf6:	bf18      	it	ne
 8003bf8:	2301      	movne	r3, #1
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	f040 808e 	bne.w	8003d1c <HAL_TIM_PWM_Start+0x14c>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003c00:	2910      	cmp	r1, #16
 8003c02:	d879      	bhi.n	8003cf8 <HAL_TIM_PWM_Start+0x128>
 8003c04:	e8df f001 	tbb	[pc, r1]
 8003c08:	7878782c 	.word	0x7878782c
 8003c0c:	78787868 	.word	0x78787868
 8003c10:	7878786c 	.word	0x7878786c
 8003c14:	78787870 	.word	0x78787870
 8003c18:	74          	.byte	0x74
 8003c19:	00          	.byte	0x00
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003c1a:	f890 303f 	ldrb.w	r3, [r0, #63]	@ 0x3f
 8003c1e:	b2db      	uxtb	r3, r3
 8003c20:	3b01      	subs	r3, #1
 8003c22:	bf18      	it	ne
 8003c24:	2301      	movne	r3, #1
 8003c26:	e7e8      	b.n	8003bfa <HAL_TIM_PWM_Start+0x2a>
 8003c28:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 8003c2c:	b2db      	uxtb	r3, r3
 8003c2e:	3b01      	subs	r3, #1
 8003c30:	bf18      	it	ne
 8003c32:	2301      	movne	r3, #1
 8003c34:	e7e1      	b.n	8003bfa <HAL_TIM_PWM_Start+0x2a>
 8003c36:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
 8003c3a:	b2db      	uxtb	r3, r3
 8003c3c:	3b01      	subs	r3, #1
 8003c3e:	bf18      	it	ne
 8003c40:	2301      	movne	r3, #1
 8003c42:	e7da      	b.n	8003bfa <HAL_TIM_PWM_Start+0x2a>
 8003c44:	f890 3042 	ldrb.w	r3, [r0, #66]	@ 0x42
 8003c48:	b2db      	uxtb	r3, r3
 8003c4a:	3b01      	subs	r3, #1
 8003c4c:	bf18      	it	ne
 8003c4e:	2301      	movne	r3, #1
 8003c50:	e7d3      	b.n	8003bfa <HAL_TIM_PWM_Start+0x2a>
 8003c52:	f890 3043 	ldrb.w	r3, [r0, #67]	@ 0x43
 8003c56:	b2db      	uxtb	r3, r3
 8003c58:	3b01      	subs	r3, #1
 8003c5a:	bf18      	it	ne
 8003c5c:	2301      	movne	r3, #1
 8003c5e:	e7cc      	b.n	8003bfa <HAL_TIM_PWM_Start+0x2a>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003c60:	2302      	movs	r3, #2
 8003c62:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003c66:	2201      	movs	r2, #1
 8003c68:	6820      	ldr	r0, [r4, #0]
 8003c6a:	f7ff ffa1 	bl	8003bb0 <TIM_CCxChannelCmd>
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003c6e:	6823      	ldr	r3, [r4, #0]
 8003c70:	4a2d      	ldr	r2, [pc, #180]	@ (8003d28 <HAL_TIM_PWM_Start+0x158>)
 8003c72:	4293      	cmp	r3, r2
 8003c74:	d00f      	beq.n	8003c96 <HAL_TIM_PWM_Start+0xc6>
 8003c76:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003c7a:	4293      	cmp	r3, r2
 8003c7c:	d00b      	beq.n	8003c96 <HAL_TIM_PWM_Start+0xc6>
 8003c7e:	f502 6240 	add.w	r2, r2, #3072	@ 0xc00
 8003c82:	4293      	cmp	r3, r2
 8003c84:	d007      	beq.n	8003c96 <HAL_TIM_PWM_Start+0xc6>
 8003c86:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8003c8a:	4293      	cmp	r3, r2
 8003c8c:	d003      	beq.n	8003c96 <HAL_TIM_PWM_Start+0xc6>
 8003c8e:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8003c92:	4293      	cmp	r3, r2
 8003c94:	d103      	bne.n	8003c9e <HAL_TIM_PWM_Start+0xce>
    __HAL_TIM_MOE_ENABLE(htim);
 8003c96:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003c98:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003c9c:	645a      	str	r2, [r3, #68]	@ 0x44
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003c9e:	6823      	ldr	r3, [r4, #0]
 8003ca0:	4a21      	ldr	r2, [pc, #132]	@ (8003d28 <HAL_TIM_PWM_Start+0x158>)
 8003ca2:	4293      	cmp	r3, r2
 8003ca4:	d02c      	beq.n	8003d00 <HAL_TIM_PWM_Start+0x130>
 8003ca6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003caa:	d029      	beq.n	8003d00 <HAL_TIM_PWM_Start+0x130>
 8003cac:	f5a2 3294 	sub.w	r2, r2, #75776	@ 0x12800
 8003cb0:	4293      	cmp	r3, r2
 8003cb2:	d025      	beq.n	8003d00 <HAL_TIM_PWM_Start+0x130>
 8003cb4:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8003cb8:	4293      	cmp	r3, r2
 8003cba:	d021      	beq.n	8003d00 <HAL_TIM_PWM_Start+0x130>
 8003cbc:	f502 3296 	add.w	r2, r2, #76800	@ 0x12c00
 8003cc0:	4293      	cmp	r3, r2
 8003cc2:	d01d      	beq.n	8003d00 <HAL_TIM_PWM_Start+0x130>
 8003cc4:	f502 6240 	add.w	r2, r2, #3072	@ 0xc00
 8003cc8:	4293      	cmp	r3, r2
 8003cca:	d019      	beq.n	8003d00 <HAL_TIM_PWM_Start+0x130>
    __HAL_TIM_ENABLE(htim);
 8003ccc:	681a      	ldr	r2, [r3, #0]
 8003cce:	f042 0201 	orr.w	r2, r2, #1
 8003cd2:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8003cd4:	2000      	movs	r0, #0
 8003cd6:	e022      	b.n	8003d1e <HAL_TIM_PWM_Start+0x14e>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003cd8:	2302      	movs	r3, #2
 8003cda:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 8003cde:	e7c2      	b.n	8003c66 <HAL_TIM_PWM_Start+0x96>
 8003ce0:	2302      	movs	r3, #2
 8003ce2:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 8003ce6:	e7be      	b.n	8003c66 <HAL_TIM_PWM_Start+0x96>
 8003ce8:	2302      	movs	r3, #2
 8003cea:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
 8003cee:	e7ba      	b.n	8003c66 <HAL_TIM_PWM_Start+0x96>
 8003cf0:	2302      	movs	r3, #2
 8003cf2:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8003cf6:	e7b6      	b.n	8003c66 <HAL_TIM_PWM_Start+0x96>
 8003cf8:	2302      	movs	r3, #2
 8003cfa:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003cfe:	e7b2      	b.n	8003c66 <HAL_TIM_PWM_Start+0x96>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003d00:	6899      	ldr	r1, [r3, #8]
 8003d02:	4a0a      	ldr	r2, [pc, #40]	@ (8003d2c <HAL_TIM_PWM_Start+0x15c>)
 8003d04:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003d06:	2a06      	cmp	r2, #6
 8003d08:	d00a      	beq.n	8003d20 <HAL_TIM_PWM_Start+0x150>
 8003d0a:	f5b2 3f80 	cmp.w	r2, #65536	@ 0x10000
 8003d0e:	d009      	beq.n	8003d24 <HAL_TIM_PWM_Start+0x154>
      __HAL_TIM_ENABLE(htim);
 8003d10:	681a      	ldr	r2, [r3, #0]
 8003d12:	f042 0201 	orr.w	r2, r2, #1
 8003d16:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8003d18:	2000      	movs	r0, #0
 8003d1a:	e000      	b.n	8003d1e <HAL_TIM_PWM_Start+0x14e>
    return HAL_ERROR;
 8003d1c:	2001      	movs	r0, #1
}
 8003d1e:	bd10      	pop	{r4, pc}
  return HAL_OK;
 8003d20:	2000      	movs	r0, #0
 8003d22:	e7fc      	b.n	8003d1e <HAL_TIM_PWM_Start+0x14e>
 8003d24:	2000      	movs	r0, #0
 8003d26:	e7fa      	b.n	8003d1e <HAL_TIM_PWM_Start+0x14e>
 8003d28:	40012c00 	.word	0x40012c00
 8003d2c:	00010007 	.word	0x00010007

08003d30 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003d30:	f890 203c 	ldrb.w	r2, [r0, #60]	@ 0x3c
 8003d34:	2a01      	cmp	r2, #1
 8003d36:	d040      	beq.n	8003dba <HAL_TIMEx_MasterConfigSynchronization+0x8a>
{
 8003d38:	b430      	push	{r4, r5}
 8003d3a:	4603      	mov	r3, r0
  __HAL_LOCK(htim);
 8003d3c:	2201      	movs	r2, #1
 8003d3e:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d42:	2202      	movs	r2, #2
 8003d44:	f880 203d 	strb.w	r2, [r0, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003d48:	6800      	ldr	r0, [r0, #0]
 8003d4a:	6842      	ldr	r2, [r0, #4]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003d4c:	6884      	ldr	r4, [r0, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003d4e:	4d1c      	ldr	r5, [pc, #112]	@ (8003dc0 <HAL_TIMEx_MasterConfigSynchronization+0x90>)
 8003d50:	42a8      	cmp	r0, r5
 8003d52:	d003      	beq.n	8003d5c <HAL_TIMEx_MasterConfigSynchronization+0x2c>
 8003d54:	f505 6500 	add.w	r5, r5, #2048	@ 0x800
 8003d58:	42a8      	cmp	r0, r5
 8003d5a:	d103      	bne.n	8003d64 <HAL_TIMEx_MasterConfigSynchronization+0x34>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003d5c:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003d60:	684d      	ldr	r5, [r1, #4]
 8003d62:	432a      	orrs	r2, r5
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003d64:	f022 7200 	bic.w	r2, r2, #33554432	@ 0x2000000
 8003d68:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003d6c:	680d      	ldr	r5, [r1, #0]
 8003d6e:	432a      	orrs	r2, r5

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003d70:	6042      	str	r2, [r0, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003d72:	681a      	ldr	r2, [r3, #0]
 8003d74:	4812      	ldr	r0, [pc, #72]	@ (8003dc0 <HAL_TIMEx_MasterConfigSynchronization+0x90>)
 8003d76:	4282      	cmp	r2, r0
 8003d78:	d012      	beq.n	8003da0 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8003d7a:	f1b2 4f80 	cmp.w	r2, #1073741824	@ 0x40000000
 8003d7e:	d00f      	beq.n	8003da0 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8003d80:	f5a0 3094 	sub.w	r0, r0, #75776	@ 0x12800
 8003d84:	4282      	cmp	r2, r0
 8003d86:	d00b      	beq.n	8003da0 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8003d88:	f500 6080 	add.w	r0, r0, #1024	@ 0x400
 8003d8c:	4282      	cmp	r2, r0
 8003d8e:	d007      	beq.n	8003da0 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8003d90:	f500 3096 	add.w	r0, r0, #76800	@ 0x12c00
 8003d94:	4282      	cmp	r2, r0
 8003d96:	d003      	beq.n	8003da0 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8003d98:	f500 6040 	add.w	r0, r0, #3072	@ 0xc00
 8003d9c:	4282      	cmp	r2, r0
 8003d9e:	d104      	bne.n	8003daa <HAL_TIMEx_MasterConfigSynchronization+0x7a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003da0:	f024 0480 	bic.w	r4, r4, #128	@ 0x80
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003da4:	6889      	ldr	r1, [r1, #8]
 8003da6:	4321      	orrs	r1, r4

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003da8:	6091      	str	r1, [r2, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003daa:	2201      	movs	r2, #1
 8003dac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003db0:	2000      	movs	r0, #0
 8003db2:	f883 003c 	strb.w	r0, [r3, #60]	@ 0x3c

  return HAL_OK;
}
 8003db6:	bc30      	pop	{r4, r5}
 8003db8:	4770      	bx	lr
  __HAL_LOCK(htim);
 8003dba:	2002      	movs	r0, #2
}
 8003dbc:	4770      	bx	lr
 8003dbe:	bf00      	nop
 8003dc0:	40012c00 	.word	0x40012c00

08003dc4 <memset>:
 8003dc4:	4402      	add	r2, r0
 8003dc6:	4603      	mov	r3, r0
 8003dc8:	4293      	cmp	r3, r2
 8003dca:	d100      	bne.n	8003dce <memset+0xa>
 8003dcc:	4770      	bx	lr
 8003dce:	f803 1b01 	strb.w	r1, [r3], #1
 8003dd2:	e7f9      	b.n	8003dc8 <memset+0x4>

08003dd4 <__libc_init_array>:
 8003dd4:	b570      	push	{r4, r5, r6, lr}
 8003dd6:	4d0d      	ldr	r5, [pc, #52]	@ (8003e0c <__libc_init_array+0x38>)
 8003dd8:	4c0d      	ldr	r4, [pc, #52]	@ (8003e10 <__libc_init_array+0x3c>)
 8003dda:	1b64      	subs	r4, r4, r5
 8003ddc:	10a4      	asrs	r4, r4, #2
 8003dde:	2600      	movs	r6, #0
 8003de0:	42a6      	cmp	r6, r4
 8003de2:	d109      	bne.n	8003df8 <__libc_init_array+0x24>
 8003de4:	4d0b      	ldr	r5, [pc, #44]	@ (8003e14 <__libc_init_array+0x40>)
 8003de6:	4c0c      	ldr	r4, [pc, #48]	@ (8003e18 <__libc_init_array+0x44>)
 8003de8:	f000 f818 	bl	8003e1c <_init>
 8003dec:	1b64      	subs	r4, r4, r5
 8003dee:	10a4      	asrs	r4, r4, #2
 8003df0:	2600      	movs	r6, #0
 8003df2:	42a6      	cmp	r6, r4
 8003df4:	d105      	bne.n	8003e02 <__libc_init_array+0x2e>
 8003df6:	bd70      	pop	{r4, r5, r6, pc}
 8003df8:	f855 3b04 	ldr.w	r3, [r5], #4
 8003dfc:	4798      	blx	r3
 8003dfe:	3601      	adds	r6, #1
 8003e00:	e7ee      	b.n	8003de0 <__libc_init_array+0xc>
 8003e02:	f855 3b04 	ldr.w	r3, [r5], #4
 8003e06:	4798      	blx	r3
 8003e08:	3601      	adds	r6, #1
 8003e0a:	e7f2      	b.n	8003df2 <__libc_init_array+0x1e>
 8003e0c:	08003e44 	.word	0x08003e44
 8003e10:	08003e44 	.word	0x08003e44
 8003e14:	08003e44 	.word	0x08003e44
 8003e18:	08003e48 	.word	0x08003e48

08003e1c <_init>:
 8003e1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e1e:	bf00      	nop
 8003e20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003e22:	bc08      	pop	{r3}
 8003e24:	469e      	mov	lr, r3
 8003e26:	4770      	bx	lr

08003e28 <_fini>:
 8003e28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e2a:	bf00      	nop
 8003e2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003e2e:	bc08      	pop	{r3}
 8003e30:	469e      	mov	lr, r3
 8003e32:	4770      	bx	lr
